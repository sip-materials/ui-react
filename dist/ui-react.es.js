var Bf = Object.defineProperty;
var Lf = (e, o, n) => o in e ? Bf(e, o, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[o] = n;
var tr = (e, o, n) => Lf(e, typeof o != "symbol" ? o + "" : o, n);
import * as m from "react";
import Co, { forwardRef as Df, useContext as zf, isValidElement as Os, cloneElement as Es, Children as Ff, createElement as Vf } from "react";
import * as ui from "react-dom";
import Qr from "react-dom";
const Bn = {
  black: "#000",
  white: "#fff"
}, ln = {
  50: "#ffebee",
  100: "#ffcdd2",
  200: "#ef9a9a",
  300: "#e57373",
  400: "#ef5350",
  500: "#f44336",
  600: "#e53935",
  700: "#d32f2f",
  800: "#c62828",
  900: "#b71c1c",
  A100: "#ff8a80",
  A200: "#ff5252",
  A400: "#ff1744",
  A700: "#d50000"
}, _f = {
  50: "#fce4ec",
  100: "#f8bbd0",
  200: "#f48fb1",
  300: "#f06292",
  400: "#ec407a",
  500: "#e91e63",
  600: "#d81b60",
  700: "#c2185b",
  800: "#ad1457",
  900: "#880e4f",
  A100: "#ff80ab",
  A200: "#ff4081",
  A400: "#f50057",
  A700: "#c51162"
}, cn = {
  50: "#f3e5f5",
  100: "#e1bee7",
  200: "#ce93d8",
  300: "#ba68c8",
  400: "#ab47bc",
  500: "#9c27b0",
  600: "#8e24aa",
  700: "#7b1fa2",
  800: "#6a1b9a",
  900: "#4a148c",
  A100: "#ea80fc",
  A200: "#e040fb",
  A400: "#d500f9",
  A700: "#aa00ff"
}, Wf = {
  50: "#ede7f6",
  100: "#d1c4e9",
  200: "#b39ddb",
  300: "#9575cd",
  400: "#7e57c2",
  500: "#673ab7",
  600: "#5e35b1",
  700: "#512da8",
  800: "#4527a0",
  900: "#311b92",
  A100: "#b388ff",
  A200: "#7c4dff",
  A400: "#651fff",
  A700: "#6200ea"
}, Uf = {
  50: "#e8eaf6",
  100: "#c5cae9",
  200: "#9fa8da",
  300: "#7986cb",
  400: "#5c6bc0",
  500: "#3f51b5",
  600: "#3949ab",
  700: "#303f9f",
  800: "#283593",
  900: "#1a237e",
  A100: "#8c9eff",
  A200: "#536dfe",
  A400: "#3d5afe",
  A700: "#304ffe"
}, pn = {
  50: "#e3f2fd",
  100: "#bbdefb",
  200: "#90caf9",
  300: "#64b5f6",
  400: "#42a5f5",
  500: "#2196f3",
  600: "#1e88e5",
  700: "#1976d2",
  800: "#1565c0",
  900: "#0d47a1",
  A100: "#82b1ff",
  A200: "#448aff",
  A400: "#2979ff",
  A700: "#2962ff"
}, un = {
  50: "#e1f5fe",
  100: "#b3e5fc",
  200: "#81d4fa",
  300: "#4fc3f7",
  400: "#29b6f6",
  500: "#03a9f4",
  600: "#039be5",
  700: "#0288d1",
  800: "#0277bd",
  900: "#01579b",
  A100: "#80d8ff",
  A200: "#40c4ff",
  A400: "#00b0ff",
  A700: "#0091ea"
}, Hf = {
  50: "#e0f7fa",
  100: "#b2ebf2",
  200: "#80deea",
  300: "#4dd0e1",
  400: "#26c6da",
  500: "#00bcd4",
  600: "#00acc1",
  700: "#0097a7",
  800: "#00838f",
  900: "#006064",
  A100: "#84ffff",
  A200: "#18ffff",
  A400: "#00e5ff",
  A700: "#00b8d4"
}, Gf = {
  50: "#e0f2f1",
  100: "#b2dfdb",
  200: "#80cbc4",
  300: "#4db6ac",
  400: "#26a69a",
  500: "#009688",
  600: "#00897b",
  700: "#00796b",
  800: "#00695c",
  900: "#004d40",
  A100: "#a7ffeb",
  A200: "#64ffda",
  A400: "#1de9b6",
  A700: "#00bfa5"
}, dn = {
  50: "#e8f5e9",
  100: "#c8e6c9",
  200: "#a5d6a7",
  300: "#81c784",
  400: "#66bb6a",
  500: "#4caf50",
  600: "#43a047",
  700: "#388e3c",
  800: "#2e7d32",
  900: "#1b5e20",
  A100: "#b9f6ca",
  A200: "#69f0ae",
  A400: "#00e676",
  A700: "#00c853"
}, qf = {
  50: "#f1f8e9",
  100: "#dcedc8",
  200: "#c5e1a5",
  300: "#aed581",
  400: "#9ccc65",
  500: "#8bc34a",
  600: "#7cb342",
  700: "#689f38",
  800: "#558b2f",
  900: "#33691e",
  A100: "#ccff90",
  A200: "#b2ff59",
  A400: "#76ff03",
  A700: "#64dd17"
}, Yf = {
  50: "#f9fbe7",
  100: "#f0f4c3",
  200: "#e6ee9c",
  300: "#dce775",
  400: "#d4e157",
  500: "#cddc39",
  600: "#c0ca33",
  700: "#afb42b",
  800: "#9e9d24",
  900: "#827717",
  A100: "#f4ff81",
  A200: "#eeff41",
  A400: "#c6ff00",
  A700: "#aeea00"
}, Kf = {
  50: "#fffde7",
  100: "#fff9c4",
  200: "#fff59d",
  300: "#fff176",
  400: "#ffee58",
  500: "#ffeb3b",
  600: "#fdd835",
  700: "#fbc02d",
  800: "#f9a825",
  900: "#f57f17",
  A100: "#ffff8d",
  A200: "#ffff00",
  A400: "#ffea00",
  A700: "#ffd600"
}, Xf = {
  50: "#fff8e1",
  100: "#ffecb3",
  200: "#ffe082",
  300: "#ffd54f",
  400: "#ffca28",
  500: "#ffc107",
  600: "#ffb300",
  700: "#ffa000",
  800: "#ff8f00",
  900: "#ff6f00",
  A100: "#ffe57f",
  A200: "#ffd740",
  A400: "#ffc400",
  A700: "#ffab00"
}, $n = {
  50: "#fff3e0",
  100: "#ffe0b2",
  200: "#ffcc80",
  300: "#ffb74d",
  400: "#ffa726",
  500: "#ff9800",
  600: "#fb8c00",
  700: "#f57c00",
  800: "#ef6c00",
  900: "#e65100",
  A100: "#ffd180",
  A200: "#ffab40",
  A400: "#ff9100",
  A700: "#ff6d00"
}, Jf = {
  50: "#fbe9e7",
  100: "#ffccbc",
  200: "#ffab91",
  300: "#ff8a65",
  400: "#ff7043",
  500: "#ff5722",
  600: "#f4511e",
  700: "#e64a19",
  800: "#d84315",
  900: "#bf360c",
  A100: "#ff9e80",
  A200: "#ff6e40",
  A400: "#ff3d00",
  A700: "#dd2c00"
}, Zf = {
  50: "#efebe9",
  100: "#d7ccc8",
  200: "#bcaaa4",
  300: "#a1887f",
  400: "#8d6e63",
  500: "#795548",
  600: "#6d4c41",
  700: "#5d4037",
  800: "#4e342e",
  900: "#3e2723",
  A100: "#d7ccc8",
  A200: "#bcaaa4",
  A400: "#8d6e63",
  A700: "#5d4037"
}, su = {
  50: "#fafafa",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121",
  A100: "#f5f5f5",
  A200: "#eeeeee",
  A400: "#bdbdbd",
  A700: "#616161"
}, Qf = {
  50: "#eceff1",
  100: "#cfd8dc",
  200: "#b0bec5",
  300: "#90a4ae",
  400: "#78909c",
  500: "#607d8b",
  600: "#546e7a",
  700: "#455a64",
  800: "#37474f",
  900: "#263238",
  A100: "#cfd8dc",
  A200: "#b0bec5",
  A400: "#78909c",
  A700: "#455a64"
}, sP = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  amber: Xf,
  blue: pn,
  blueGrey: Qf,
  brown: Zf,
  common: Bn,
  cyan: Hf,
  deepOrange: Jf,
  deepPurple: Wf,
  green: dn,
  grey: su,
  indigo: Uf,
  lightBlue: un,
  lightGreen: qf,
  lime: Yf,
  orange: $n,
  pink: _f,
  purple: cn,
  red: ln,
  teal: Gf,
  yellow: Kf
}, Symbol.toStringTag, { value: "Module" }));
function zt(e, ...o) {
  const n = new URL(`https://mui.com/production-error/?code=${e}`);
  return o.forEach((r) => n.searchParams.append("args[]", r)), `Minified MUI error #${e}; visit ${n} for the full message.`;
}
const so = "$$material";
function As() {
  return As = Object.assign ? Object.assign.bind() : function(e) {
    for (var o = 1; o < arguments.length; o++) {
      var n = arguments[o];
      for (var r in n) ({}).hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  }, As.apply(null, arguments);
}
function em(e) {
  if (e.sheet)
    return e.sheet;
  for (var o = 0; o < document.styleSheets.length; o++)
    if (document.styleSheets[o].ownerNode === e)
      return document.styleSheets[o];
}
function tm(e) {
  var o = document.createElement("style");
  return o.setAttribute("data-emotion", e.key), e.nonce !== void 0 && o.setAttribute("nonce", e.nonce), o.appendChild(document.createTextNode("")), o.setAttribute("data-s", ""), o;
}
var au = /* @__PURE__ */ function() {
  function e(n) {
    var r = this;
    this._insertTag = function(s) {
      var a;
      r.tags.length === 0 ? r.insertionPoint ? a = r.insertionPoint.nextSibling : r.prepend ? a = r.container.firstChild : a = r.before : a = r.tags[r.tags.length - 1].nextSibling, r.container.insertBefore(s, a), r.tags.push(s);
    }, this.isSpeedy = n.speedy === void 0 ? !0 : n.speedy, this.tags = [], this.ctr = 0, this.nonce = n.nonce, this.key = n.key, this.container = n.container, this.prepend = n.prepend, this.insertionPoint = n.insertionPoint, this.before = null;
  }
  var o = e.prototype;
  return o.hydrate = function(r) {
    r.forEach(this._insertTag);
  }, o.insert = function(r) {
    this.ctr % (this.isSpeedy ? 65e3 : 1) === 0 && this._insertTag(tm(this));
    var s = this.tags[this.tags.length - 1];
    if (this.isSpeedy) {
      var a = em(s);
      try {
        a.insertRule(r, a.cssRules.length);
      } catch {
      }
    } else
      s.appendChild(document.createTextNode(r));
    this.ctr++;
  }, o.flush = function() {
    this.tags.forEach(function(r) {
      var s;
      return (s = r.parentNode) == null ? void 0 : s.removeChild(r);
    }), this.tags = [], this.ctr = 0;
  }, e;
}(), Mt = "-ms-", Bs = "-moz-", Je = "-webkit-", iu = "comm", zi = "rule", Fi = "decl", om = "@import", lu = "@keyframes", nm = "@layer", rm = Math.abs, na = String.fromCharCode, sm = Object.assign;
function am(e, o) {
  return $t(e, 0) ^ 45 ? (((o << 2 ^ $t(e, 0)) << 2 ^ $t(e, 1)) << 2 ^ $t(e, 2)) << 2 ^ $t(e, 3) : 0;
}
function cu(e) {
  return e.trim();
}
function im(e, o) {
  return (e = o.exec(e)) ? e[0] : e;
}
function Ze(e, o, n) {
  return e.replace(o, n);
}
function di(e, o) {
  return e.indexOf(o);
}
function $t(e, o) {
  return e.charCodeAt(o) | 0;
}
function Er(e, o, n) {
  return e.slice(o, n);
}
function xo(e) {
  return e.length;
}
function Vi(e) {
  return e.length;
}
function es(e, o) {
  return o.push(e), e;
}
function lm(e, o) {
  return e.map(o).join("");
}
var ra = 1, Ln = 1, pu = 0, Wt = 0, vt = 0, Hn = "";
function sa(e, o, n, r, s, a, i) {
  return { value: e, root: o, parent: n, type: r, props: s, children: a, line: ra, column: Ln, length: i, return: "" };
}
function or(e, o) {
  return sm(sa("", null, null, "", null, null, 0), e, { length: -e.length }, o);
}
function cm() {
  return vt;
}
function pm() {
  return vt = Wt > 0 ? $t(Hn, --Wt) : 0, Ln--, vt === 10 && (Ln = 1, ra--), vt;
}
function Yt() {
  return vt = Wt < pu ? $t(Hn, Wt++) : 0, Ln++, vt === 10 && (Ln = 1, ra++), vt;
}
function wo() {
  return $t(Hn, Wt);
}
function Rs() {
  return Wt;
}
function Br(e, o) {
  return Er(Hn, e, o);
}
function Rr(e) {
  switch (e) {
    // \0 \t \n \r \s whitespace token
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    // ! + , / > @ ~ isolate token
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    // ; { } breakpoint token
    case 59:
    case 123:
    case 125:
      return 4;
    // : accompanied token
    case 58:
      return 3;
    // " ' ( [ opening delimit token
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    // ) ] closing delimit token
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function uu(e) {
  return ra = Ln = 1, pu = xo(Hn = e), Wt = 0, [];
}
function du(e) {
  return Hn = "", e;
}
function $s(e) {
  return cu(Br(Wt - 1, fi(e === 91 ? e + 2 : e === 40 ? e + 1 : e)));
}
function um(e) {
  for (; (vt = wo()) && vt < 33; )
    Yt();
  return Rr(e) > 2 || Rr(vt) > 3 ? "" : " ";
}
function dm(e, o) {
  for (; --o && Yt() && !(vt < 48 || vt > 102 || vt > 57 && vt < 65 || vt > 70 && vt < 97); )
    ;
  return Br(e, Rs() + (o < 6 && wo() == 32 && Yt() == 32));
}
function fi(e) {
  for (; Yt(); )
    switch (vt) {
      // ] ) " '
      case e:
        return Wt;
      // " '
      case 34:
      case 39:
        e !== 34 && e !== 39 && fi(vt);
        break;
      // (
      case 40:
        e === 41 && fi(e);
        break;
      // \
      case 92:
        Yt();
        break;
    }
  return Wt;
}
function fm(e, o) {
  for (; Yt() && e + vt !== 57; )
    if (e + vt === 84 && wo() === 47)
      break;
  return "/*" + Br(o, Wt - 1) + "*" + na(e === 47 ? e : Yt());
}
function mm(e) {
  for (; !Rr(wo()); )
    Yt();
  return Br(e, Wt);
}
function gm(e) {
  return du(ks("", null, null, null, [""], e = uu(e), 0, [0], e));
}
function ks(e, o, n, r, s, a, i, l, c) {
  for (var p = 0, u = 0, f = i, g = 0, b = 0, h = 0, d = 1, y = 1, S = 1, O = 0, C = "", T = s, w = a, E = r, $ = C; y; )
    switch (h = O, O = Yt()) {
      // (
      case 40:
        if (h != 108 && $t($, f - 1) == 58) {
          di($ += Ze($s(O), "&", "&\f"), "&\f") != -1 && (S = -1);
          break;
        }
      // " ' [
      case 34:
      case 39:
      case 91:
        $ += $s(O);
        break;
      // \t \n \r \s
      case 9:
      case 10:
      case 13:
      case 32:
        $ += um(h);
        break;
      // \
      case 92:
        $ += dm(Rs() - 1, 7);
        continue;
      // /
      case 47:
        switch (wo()) {
          case 42:
          case 47:
            es(bm(fm(Yt(), Rs()), o, n), c);
            break;
          default:
            $ += "/";
        }
        break;
      // {
      case 123 * d:
        l[p++] = xo($) * S;
      // } ; \0
      case 125 * d:
      case 59:
      case 0:
        switch (O) {
          // \0 }
          case 0:
          case 125:
            y = 0;
          // ;
          case 59 + u:
            S == -1 && ($ = Ze($, /\f/g, "")), b > 0 && xo($) - f && es(b > 32 ? Vl($ + ";", r, n, f - 1) : Vl(Ze($, " ", "") + ";", r, n, f - 2), c);
            break;
          // @ ;
          case 59:
            $ += ";";
          // { rule/at-rule
          default:
            if (es(E = Fl($, o, n, p, u, s, l, C, T = [], w = [], f), a), O === 123)
              if (u === 0)
                ks($, o, E, E, T, a, f, l, w);
              else
                switch (g === 99 && $t($, 3) === 110 ? 100 : g) {
                  // d l m s
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    ks(e, E, E, r && es(Fl(e, E, E, 0, 0, s, l, C, s, T = [], f), w), s, w, f, l, r ? T : w);
                    break;
                  default:
                    ks($, E, E, E, [""], w, 0, l, w);
                }
        }
        p = u = b = 0, d = S = 1, C = $ = "", f = i;
        break;
      // :
      case 58:
        f = 1 + xo($), b = h;
      default:
        if (d < 1) {
          if (O == 123)
            --d;
          else if (O == 125 && d++ == 0 && pm() == 125)
            continue;
        }
        switch ($ += na(O), O * d) {
          // &
          case 38:
            S = u > 0 ? 1 : ($ += "\f", -1);
            break;
          // ,
          case 44:
            l[p++] = (xo($) - 1) * S, S = 1;
            break;
          // @
          case 64:
            wo() === 45 && ($ += $s(Yt())), g = wo(), u = f = xo(C = $ += mm(Rs())), O++;
            break;
          // -
          case 45:
            h === 45 && xo($) == 2 && (d = 0);
        }
    }
  return a;
}
function Fl(e, o, n, r, s, a, i, l, c, p, u) {
  for (var f = s - 1, g = s === 0 ? a : [""], b = Vi(g), h = 0, d = 0, y = 0; h < r; ++h)
    for (var S = 0, O = Er(e, f + 1, f = rm(d = i[h])), C = e; S < b; ++S)
      (C = cu(d > 0 ? g[S] + " " + O : Ze(O, /&\f/g, g[S]))) && (c[y++] = C);
  return sa(e, o, n, s === 0 ? zi : l, c, p, u);
}
function bm(e, o, n) {
  return sa(e, o, n, iu, na(cm()), Er(e, 2, -2), 0);
}
function Vl(e, o, n, r) {
  return sa(e, o, n, Fi, Er(e, 0, r), Er(e, r + 1, -1), r);
}
function jn(e, o) {
  for (var n = "", r = Vi(e), s = 0; s < r; s++)
    n += o(e[s], s, e, o) || "";
  return n;
}
function hm(e, o, n, r) {
  switch (e.type) {
    case nm:
      if (e.children.length) break;
    case om:
    case Fi:
      return e.return = e.return || e.value;
    case iu:
      return "";
    case lu:
      return e.return = e.value + "{" + jn(e.children, r) + "}";
    case zi:
      e.value = e.props.join(",");
  }
  return xo(n = jn(e.children, r)) ? e.return = e.value + "{" + n + "}" : "";
}
function ym(e) {
  var o = Vi(e);
  return function(n, r, s, a) {
    for (var i = "", l = 0; l < o; l++)
      i += e[l](n, r, s, a) || "";
    return i;
  };
}
function vm(e) {
  return function(o) {
    o.root || (o = o.return) && e(o);
  };
}
function fu(e) {
  var o = /* @__PURE__ */ Object.create(null);
  return function(n) {
    return o[n] === void 0 && (o[n] = e(n)), o[n];
  };
}
var xm = function(o, n, r) {
  for (var s = 0, a = 0; s = a, a = wo(), s === 38 && a === 12 && (n[r] = 1), !Rr(a); )
    Yt();
  return Br(o, Wt);
}, Sm = function(o, n) {
  var r = -1, s = 44;
  do
    switch (Rr(s)) {
      case 0:
        s === 38 && wo() === 12 && (n[r] = 1), o[r] += xm(Wt - 1, n, r);
        break;
      case 2:
        o[r] += $s(s);
        break;
      case 4:
        if (s === 44) {
          o[++r] = wo() === 58 ? "&\f" : "", n[r] = o[r].length;
          break;
        }
      // fallthrough
      default:
        o[r] += na(s);
    }
  while (s = Yt());
  return o;
}, Tm = function(o, n) {
  return du(Sm(uu(o), n));
}, _l = /* @__PURE__ */ new WeakMap(), Cm = function(o) {
  if (!(o.type !== "rule" || !o.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  o.length < 1)) {
    for (var n = o.value, r = o.parent, s = o.column === r.column && o.line === r.line; r.type !== "rule"; )
      if (r = r.parent, !r) return;
    if (!(o.props.length === 1 && n.charCodeAt(0) !== 58 && !_l.get(r)) && !s) {
      _l.set(o, !0);
      for (var a = [], i = Tm(n, a), l = r.props, c = 0, p = 0; c < i.length; c++)
        for (var u = 0; u < l.length; u++, p++)
          o.props[p] = a[c] ? i[c].replace(/&\f/g, l[u]) : l[u] + " " + i[c];
    }
  }
}, wm = function(o) {
  if (o.type === "decl") {
    var n = o.value;
    // charcode for l
    n.charCodeAt(0) === 108 && // charcode for b
    n.charCodeAt(2) === 98 && (o.return = "", o.value = "");
  }
};
function mu(e, o) {
  switch (am(e, o)) {
    // color-adjust
    case 5103:
      return Je + "print-" + e + e;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return Je + e + e;
    // appearance, user-select, transform, hyphens, text-size-adjust
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return Je + e + Bs + e + Mt + e + e;
    // flex, flex-direction
    case 6828:
    case 4268:
      return Je + e + Mt + e + e;
    // order
    case 6165:
      return Je + e + Mt + "flex-" + e + e;
    // align-items
    case 5187:
      return Je + e + Ze(e, /(\w+).+(:[^]+)/, Je + "box-$1$2" + Mt + "flex-$1$2") + e;
    // align-self
    case 5443:
      return Je + e + Mt + "flex-item-" + Ze(e, /flex-|-self/, "") + e;
    // align-content
    case 4675:
      return Je + e + Mt + "flex-line-pack" + Ze(e, /align-content|flex-|-self/, "") + e;
    // flex-shrink
    case 5548:
      return Je + e + Mt + Ze(e, "shrink", "negative") + e;
    // flex-basis
    case 5292:
      return Je + e + Mt + Ze(e, "basis", "preferred-size") + e;
    // flex-grow
    case 6060:
      return Je + "box-" + Ze(e, "-grow", "") + Je + e + Mt + Ze(e, "grow", "positive") + e;
    // transition
    case 4554:
      return Je + Ze(e, /([^-])(transform)/g, "$1" + Je + "$2") + e;
    // cursor
    case 6187:
      return Ze(Ze(Ze(e, /(zoom-|grab)/, Je + "$1"), /(image-set)/, Je + "$1"), e, "") + e;
    // background, background-image
    case 5495:
    case 3959:
      return Ze(e, /(image-set\([^]*)/, Je + "$1$`$1");
    // justify-content
    case 4968:
      return Ze(Ze(e, /(.+:)(flex-)?(.*)/, Je + "box-pack:$3" + Mt + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + Je + e + e;
    // (margin|padding)-inline-(start|end)
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return Ze(e, /(.+)-inline(.+)/, Je + "$1$2") + e;
    // (min|max)?(width|height|inline-size|block-size)
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (xo(e) - 1 - o > 6) switch ($t(e, o + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          if ($t(e, o + 4) !== 45) break;
        // (f)ill-available, (f)it-content
        case 102:
          return Ze(e, /(.+:)(.+)-([^]+)/, "$1" + Je + "$2-$3$1" + Bs + ($t(e, o + 3) == 108 ? "$3" : "$2-$3")) + e;
        // (s)tretch
        case 115:
          return ~di(e, "stretch") ? mu(Ze(e, "stretch", "fill-available"), o) + e : e;
      }
      break;
    // position: sticky
    case 4949:
      if ($t(e, o + 1) !== 115) break;
    // display: (flex|inline-flex)
    case 6444:
      switch ($t(e, xo(e) - 3 - (~di(e, "!important") && 10))) {
        // stic(k)y
        case 107:
          return Ze(e, ":", ":" + Je) + e;
        // (inline-)?fl(e)x
        case 101:
          return Ze(e, /(.+:)([^;!]+)(;|!.+)?/, "$1" + Je + ($t(e, 14) === 45 ? "inline-" : "") + "box$3$1" + Je + "$2$3$1" + Mt + "$2box$3") + e;
      }
      break;
    // writing-mode
    case 5936:
      switch ($t(e, o + 11)) {
        // vertical-l(r)
        case 114:
          return Je + e + Mt + Ze(e, /[svh]\w+-[tblr]{2}/, "tb") + e;
        // vertical-r(l)
        case 108:
          return Je + e + Mt + Ze(e, /[svh]\w+-[tblr]{2}/, "tb-rl") + e;
        // horizontal(-)tb
        case 45:
          return Je + e + Mt + Ze(e, /[svh]\w+-[tblr]{2}/, "lr") + e;
      }
      return Je + e + Mt + e + e;
  }
  return e;
}
var Om = function(o, n, r, s) {
  if (o.length > -1 && !o.return) switch (o.type) {
    case Fi:
      o.return = mu(o.value, o.length);
      break;
    case lu:
      return jn([or(o, {
        value: Ze(o.value, "@", "@" + Je)
      })], s);
    case zi:
      if (o.length) return lm(o.props, function(a) {
        switch (im(a, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ":read-only":
          case ":read-write":
            return jn([or(o, {
              props: [Ze(a, /:(read-\w+)/, ":" + Bs + "$1")]
            })], s);
          // :placeholder
          case "::placeholder":
            return jn([or(o, {
              props: [Ze(a, /:(plac\w+)/, ":" + Je + "input-$1")]
            }), or(o, {
              props: [Ze(a, /:(plac\w+)/, ":" + Bs + "$1")]
            }), or(o, {
              props: [Ze(a, /:(plac\w+)/, Mt + "input-$1")]
            })], s);
        }
        return "";
      });
  }
}, Em = [Om], gu = function(o) {
  var n = o.key;
  if (n === "css") {
    var r = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(r, function(d) {
      var y = d.getAttribute("data-emotion");
      y.indexOf(" ") !== -1 && (document.head.appendChild(d), d.setAttribute("data-s", ""));
    });
  }
  var s = o.stylisPlugins || Em, a = {}, i, l = [];
  i = o.container || document.head, Array.prototype.forEach.call(
    // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll('style[data-emotion^="' + n + ' "]'),
    function(d) {
      for (var y = d.getAttribute("data-emotion").split(" "), S = 1; S < y.length; S++)
        a[y[S]] = !0;
      l.push(d);
    }
  );
  var c, p = [Cm, wm];
  {
    var u, f = [hm, vm(function(d) {
      u.insert(d);
    })], g = ym(p.concat(s, f)), b = function(y) {
      return jn(gm(y), g);
    };
    c = function(y, S, O, C) {
      u = O, b(y ? y + "{" + S.styles + "}" : S.styles), C && (h.inserted[S.name] = !0);
    };
  }
  var h = {
    key: n,
    sheet: new au({
      key: n,
      container: i,
      nonce: o.nonce,
      speedy: o.speedy,
      prepend: o.prepend,
      insertionPoint: o.insertionPoint
    }),
    nonce: o.nonce,
    inserted: a,
    registered: {},
    insert: c
  };
  return h.sheet.hydrate(l), h;
};
function Rm(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var ts = { exports: {} }, Qe = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Wl;
function $m() {
  if (Wl) return Qe;
  Wl = 1;
  var e = typeof Symbol == "function" && Symbol.for, o = e ? Symbol.for("react.element") : 60103, n = e ? Symbol.for("react.portal") : 60106, r = e ? Symbol.for("react.fragment") : 60107, s = e ? Symbol.for("react.strict_mode") : 60108, a = e ? Symbol.for("react.profiler") : 60114, i = e ? Symbol.for("react.provider") : 60109, l = e ? Symbol.for("react.context") : 60110, c = e ? Symbol.for("react.async_mode") : 60111, p = e ? Symbol.for("react.concurrent_mode") : 60111, u = e ? Symbol.for("react.forward_ref") : 60112, f = e ? Symbol.for("react.suspense") : 60113, g = e ? Symbol.for("react.suspense_list") : 60120, b = e ? Symbol.for("react.memo") : 60115, h = e ? Symbol.for("react.lazy") : 60116, d = e ? Symbol.for("react.block") : 60121, y = e ? Symbol.for("react.fundamental") : 60117, S = e ? Symbol.for("react.responder") : 60118, O = e ? Symbol.for("react.scope") : 60119;
  function C(w) {
    if (typeof w == "object" && w !== null) {
      var E = w.$$typeof;
      switch (E) {
        case o:
          switch (w = w.type, w) {
            case c:
            case p:
            case r:
            case a:
            case s:
            case f:
              return w;
            default:
              switch (w = w && w.$$typeof, w) {
                case l:
                case u:
                case h:
                case b:
                case i:
                  return w;
                default:
                  return E;
              }
          }
        case n:
          return E;
      }
    }
  }
  function T(w) {
    return C(w) === p;
  }
  return Qe.AsyncMode = c, Qe.ConcurrentMode = p, Qe.ContextConsumer = l, Qe.ContextProvider = i, Qe.Element = o, Qe.ForwardRef = u, Qe.Fragment = r, Qe.Lazy = h, Qe.Memo = b, Qe.Portal = n, Qe.Profiler = a, Qe.StrictMode = s, Qe.Suspense = f, Qe.isAsyncMode = function(w) {
    return T(w) || C(w) === c;
  }, Qe.isConcurrentMode = T, Qe.isContextConsumer = function(w) {
    return C(w) === l;
  }, Qe.isContextProvider = function(w) {
    return C(w) === i;
  }, Qe.isElement = function(w) {
    return typeof w == "object" && w !== null && w.$$typeof === o;
  }, Qe.isForwardRef = function(w) {
    return C(w) === u;
  }, Qe.isFragment = function(w) {
    return C(w) === r;
  }, Qe.isLazy = function(w) {
    return C(w) === h;
  }, Qe.isMemo = function(w) {
    return C(w) === b;
  }, Qe.isPortal = function(w) {
    return C(w) === n;
  }, Qe.isProfiler = function(w) {
    return C(w) === a;
  }, Qe.isStrictMode = function(w) {
    return C(w) === s;
  }, Qe.isSuspense = function(w) {
    return C(w) === f;
  }, Qe.isValidElementType = function(w) {
    return typeof w == "string" || typeof w == "function" || w === r || w === p || w === a || w === s || w === f || w === g || typeof w == "object" && w !== null && (w.$$typeof === h || w.$$typeof === b || w.$$typeof === i || w.$$typeof === l || w.$$typeof === u || w.$$typeof === y || w.$$typeof === S || w.$$typeof === O || w.$$typeof === d);
  }, Qe.typeOf = C, Qe;
}
var et = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ul;
function km() {
  return Ul || (Ul = 1, process.env.NODE_ENV !== "production" && function() {
    var e = typeof Symbol == "function" && Symbol.for, o = e ? Symbol.for("react.element") : 60103, n = e ? Symbol.for("react.portal") : 60106, r = e ? Symbol.for("react.fragment") : 60107, s = e ? Symbol.for("react.strict_mode") : 60108, a = e ? Symbol.for("react.profiler") : 60114, i = e ? Symbol.for("react.provider") : 60109, l = e ? Symbol.for("react.context") : 60110, c = e ? Symbol.for("react.async_mode") : 60111, p = e ? Symbol.for("react.concurrent_mode") : 60111, u = e ? Symbol.for("react.forward_ref") : 60112, f = e ? Symbol.for("react.suspense") : 60113, g = e ? Symbol.for("react.suspense_list") : 60120, b = e ? Symbol.for("react.memo") : 60115, h = e ? Symbol.for("react.lazy") : 60116, d = e ? Symbol.for("react.block") : 60121, y = e ? Symbol.for("react.fundamental") : 60117, S = e ? Symbol.for("react.responder") : 60118, O = e ? Symbol.for("react.scope") : 60119;
    function C(z) {
      return typeof z == "string" || typeof z == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      z === r || z === p || z === a || z === s || z === f || z === g || typeof z == "object" && z !== null && (z.$$typeof === h || z.$$typeof === b || z.$$typeof === i || z.$$typeof === l || z.$$typeof === u || z.$$typeof === y || z.$$typeof === S || z.$$typeof === O || z.$$typeof === d);
    }
    function T(z) {
      if (typeof z == "object" && z !== null) {
        var be = z.$$typeof;
        switch (be) {
          case o:
            var ye = z.type;
            switch (ye) {
              case c:
              case p:
              case r:
              case a:
              case s:
              case f:
                return ye;
              default:
                var Pe = ye && ye.$$typeof;
                switch (Pe) {
                  case l:
                  case u:
                  case h:
                  case b:
                  case i:
                    return Pe;
                  default:
                    return be;
                }
            }
          case n:
            return be;
        }
      }
    }
    var w = c, E = p, $ = l, P = i, N = o, v = u, R = r, A = h, j = b, k = n, D = a, B = s, _ = f, H = !1;
    function U(z) {
      return H || (H = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), F(z) || T(z) === c;
    }
    function F(z) {
      return T(z) === p;
    }
    function V(z) {
      return T(z) === l;
    }
    function me(z) {
      return T(z) === i;
    }
    function G(z) {
      return typeof z == "object" && z !== null && z.$$typeof === o;
    }
    function X(z) {
      return T(z) === u;
    }
    function Y(z) {
      return T(z) === r;
    }
    function q(z) {
      return T(z) === h;
    }
    function ie(z) {
      return T(z) === b;
    }
    function K(z) {
      return T(z) === n;
    }
    function de(z) {
      return T(z) === a;
    }
    function oe(z) {
      return T(z) === s;
    }
    function he(z) {
      return T(z) === f;
    }
    et.AsyncMode = w, et.ConcurrentMode = E, et.ContextConsumer = $, et.ContextProvider = P, et.Element = N, et.ForwardRef = v, et.Fragment = R, et.Lazy = A, et.Memo = j, et.Portal = k, et.Profiler = D, et.StrictMode = B, et.Suspense = _, et.isAsyncMode = U, et.isConcurrentMode = F, et.isContextConsumer = V, et.isContextProvider = me, et.isElement = G, et.isForwardRef = X, et.isFragment = Y, et.isLazy = q, et.isMemo = ie, et.isPortal = K, et.isProfiler = de, et.isStrictMode = oe, et.isSuspense = he, et.isValidElementType = C, et.typeOf = T;
  }()), et;
}
var Hl;
function _i() {
  return Hl || (Hl = 1, process.env.NODE_ENV === "production" ? ts.exports = $m() : ts.exports = km()), ts.exports;
}
var La, Gl;
function Pm() {
  if (Gl) return La;
  Gl = 1;
  var e = _i(), o = {
    childContextTypes: !0,
    contextType: !0,
    contextTypes: !0,
    defaultProps: !0,
    displayName: !0,
    getDefaultProps: !0,
    getDerivedStateFromError: !0,
    getDerivedStateFromProps: !0,
    mixins: !0,
    propTypes: !0,
    type: !0
  }, n = {
    name: !0,
    length: !0,
    prototype: !0,
    caller: !0,
    callee: !0,
    arguments: !0,
    arity: !0
  }, r = {
    $$typeof: !0,
    render: !0,
    defaultProps: !0,
    displayName: !0,
    propTypes: !0
  }, s = {
    $$typeof: !0,
    compare: !0,
    defaultProps: !0,
    displayName: !0,
    propTypes: !0,
    type: !0
  }, a = {};
  a[e.ForwardRef] = r, a[e.Memo] = s;
  function i(h) {
    return e.isMemo(h) ? s : a[h.$$typeof] || o;
  }
  var l = Object.defineProperty, c = Object.getOwnPropertyNames, p = Object.getOwnPropertySymbols, u = Object.getOwnPropertyDescriptor, f = Object.getPrototypeOf, g = Object.prototype;
  function b(h, d, y) {
    if (typeof d != "string") {
      if (g) {
        var S = f(d);
        S && S !== g && b(h, S, y);
      }
      var O = c(d);
      p && (O = O.concat(p(d)));
      for (var C = i(h), T = i(d), w = 0; w < O.length; ++w) {
        var E = O[w];
        if (!n[E] && !(y && y[E]) && !(T && T[E]) && !(C && C[E])) {
          var $ = u(d, E);
          try {
            l(h, E, $);
          } catch {
          }
        }
      }
    }
    return h;
  }
  return La = b, La;
}
Pm();
var Nm = !0;
function bu(e, o, n) {
  var r = "";
  return n.split(" ").forEach(function(s) {
    e[s] !== void 0 ? o.push(e[s] + ";") : s && (r += s + " ");
  }), r;
}
var Wi = function(o, n, r) {
  var s = o.key + "-" + n.name;
  // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (r === !1 || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  Nm === !1) && o.registered[s] === void 0 && (o.registered[s] = n.styles);
}, Ui = function(o, n, r) {
  Wi(o, n, r);
  var s = o.key + "-" + n.name;
  if (o.inserted[n.name] === void 0) {
    var a = n;
    do
      o.insert(n === a ? "." + s : "", a, o.sheet, !0), a = a.next;
    while (a !== void 0);
  }
};
function Im(e) {
  for (var o = 0, n, r = 0, s = e.length; s >= 4; ++r, s -= 4)
    n = e.charCodeAt(r) & 255 | (e.charCodeAt(++r) & 255) << 8 | (e.charCodeAt(++r) & 255) << 16 | (e.charCodeAt(++r) & 255) << 24, n = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16), n ^= /* k >>> r: */
    n >>> 24, o = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (o & 65535) * 1540483477 + ((o >>> 16) * 59797 << 16);
  switch (s) {
    case 3:
      o ^= (e.charCodeAt(r + 2) & 255) << 16;
    case 2:
      o ^= (e.charCodeAt(r + 1) & 255) << 8;
    case 1:
      o ^= e.charCodeAt(r) & 255, o = /* Math.imul(h, m): */
      (o & 65535) * 1540483477 + ((o >>> 16) * 59797 << 16);
  }
  return o ^= o >>> 13, o = /* Math.imul(h, m): */
  (o & 65535) * 1540483477 + ((o >>> 16) * 59797 << 16), ((o ^ o >>> 15) >>> 0).toString(36);
}
var jm = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
}, Mm = /[A-Z]|^ms/g, Am = /_EMO_([^_]+?)_([^]*?)_EMO_/g, hu = function(o) {
  return o.charCodeAt(1) === 45;
}, ql = function(o) {
  return o != null && typeof o != "boolean";
}, Da = /* @__PURE__ */ fu(function(e) {
  return hu(e) ? e : e.replace(Mm, "-$&").toLowerCase();
}), Yl = function(o, n) {
  switch (o) {
    case "animation":
    case "animationName":
      if (typeof n == "string")
        return n.replace(Am, function(r, s, a) {
          return So = {
            name: s,
            styles: a,
            next: So
          }, s;
        });
  }
  return jm[o] !== 1 && !hu(o) && typeof n == "number" && n !== 0 ? n + "px" : n;
};
function $r(e, o, n) {
  if (n == null)
    return "";
  var r = n;
  if (r.__emotion_styles !== void 0)
    return r;
  switch (typeof n) {
    case "boolean":
      return "";
    case "object": {
      var s = n;
      if (s.anim === 1)
        return So = {
          name: s.name,
          styles: s.styles,
          next: So
        }, s.name;
      var a = n;
      if (a.styles !== void 0) {
        var i = a.next;
        if (i !== void 0)
          for (; i !== void 0; )
            So = {
              name: i.name,
              styles: i.styles,
              next: So
            }, i = i.next;
        var l = a.styles + ";";
        return l;
      }
      return Bm(e, o, n);
    }
    case "function": {
      if (e !== void 0) {
        var c = So, p = n(e);
        return So = c, $r(e, o, p);
      }
      break;
    }
  }
  var u = n;
  if (o == null)
    return u;
  var f = o[u];
  return f !== void 0 ? f : u;
}
function Bm(e, o, n) {
  var r = "";
  if (Array.isArray(n))
    for (var s = 0; s < n.length; s++)
      r += $r(e, o, n[s]) + ";";
  else
    for (var a in n) {
      var i = n[a];
      if (typeof i != "object") {
        var l = i;
        o != null && o[l] !== void 0 ? r += a + "{" + o[l] + "}" : ql(l) && (r += Da(a) + ":" + Yl(a, l) + ";");
      } else if (Array.isArray(i) && typeof i[0] == "string" && (o == null || o[i[0]] === void 0))
        for (var c = 0; c < i.length; c++)
          ql(i[c]) && (r += Da(a) + ":" + Yl(a, i[c]) + ";");
      else {
        var p = $r(e, o, i);
        switch (a) {
          case "animation":
          case "animationName": {
            r += Da(a) + ":" + p + ";";
            break;
          }
          default:
            r += a + "{" + p + "}";
        }
      }
    }
  return r;
}
var Kl = /label:\s*([^\s;{]+)\s*(;|$)/g, So;
function Lr(e, o, n) {
  if (e.length === 1 && typeof e[0] == "object" && e[0] !== null && e[0].styles !== void 0)
    return e[0];
  var r = !0, s = "";
  So = void 0;
  var a = e[0];
  if (a == null || a.raw === void 0)
    r = !1, s += $r(n, o, a);
  else {
    var i = a;
    s += i[0];
  }
  for (var l = 1; l < e.length; l++)
    if (s += $r(n, o, e[l]), r) {
      var c = a;
      s += c[l];
    }
  Kl.lastIndex = 0;
  for (var p = "", u; (u = Kl.exec(s)) !== null; )
    p += "-" + u[1];
  var f = Im(s) + p;
  return {
    name: f,
    styles: s,
    next: So
  };
}
var Lm = function(o) {
  return o();
}, yu = m.useInsertionEffect ? m.useInsertionEffect : !1, vu = yu || Lm, Xl = yu || m.useLayoutEffect, xu = /* @__PURE__ */ m.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement < "u" ? /* @__PURE__ */ gu({
    key: "css"
  }) : null
), Dm = xu.Provider, Hi = function(o) {
  return /* @__PURE__ */ Df(function(n, r) {
    var s = zf(xu);
    return o(n, s, r);
  });
}, Dr = /* @__PURE__ */ m.createContext({}), Gi = {}.hasOwnProperty, mi = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__", zm = function(o, n) {
  var r = {};
  for (var s in n)
    Gi.call(n, s) && (r[s] = n[s]);
  return r[mi] = o, r;
}, Fm = function(o) {
  var n = o.cache, r = o.serialized, s = o.isStringTag;
  return Wi(n, r, s), vu(function() {
    return Ui(n, r, s);
  }), null;
}, Vm = /* @__PURE__ */ Hi(function(e, o, n) {
  var r = e.css;
  typeof r == "string" && o.registered[r] !== void 0 && (r = o.registered[r]);
  var s = e[mi], a = [r], i = "";
  typeof e.className == "string" ? i = bu(o.registered, a, e.className) : e.className != null && (i = e.className + " ");
  var l = Lr(a, void 0, m.useContext(Dr));
  i += o.key + "-" + l.name;
  var c = {};
  for (var p in e)
    Gi.call(e, p) && p !== "css" && p !== mi && (c[p] = e[p]);
  return c.className = i, n && (c.ref = n), /* @__PURE__ */ m.createElement(m.Fragment, null, /* @__PURE__ */ m.createElement(Fm, {
    cache: o,
    serialized: l,
    isStringTag: typeof s == "string"
  }), /* @__PURE__ */ m.createElement(s, c));
}), _m = Vm, Jl = function(o, n) {
  var r = arguments;
  if (n == null || !Gi.call(n, "css"))
    return m.createElement.apply(void 0, r);
  var s = r.length, a = new Array(s);
  a[0] = _m, a[1] = zm(o, n);
  for (var i = 2; i < s; i++)
    a[i] = r[i];
  return m.createElement.apply(null, a);
};
(function(e) {
  var o;
  o || (o = e.JSX || (e.JSX = {}));
})(Jl || (Jl = {}));
var Wm = /* @__PURE__ */ Hi(function(e, o) {
  var n = e.styles, r = Lr([n], void 0, m.useContext(Dr)), s = m.useRef();
  return Xl(function() {
    var a = o.key + "-global", i = new o.sheet.constructor({
      key: a,
      nonce: o.sheet.nonce,
      container: o.sheet.container,
      speedy: o.sheet.isSpeedy
    }), l = !1, c = document.querySelector('style[data-emotion="' + a + " " + r.name + '"]');
    return o.sheet.tags.length && (i.before = o.sheet.tags[0]), c !== null && (l = !0, c.setAttribute("data-emotion", a), i.hydrate([c])), s.current = [i, l], function() {
      i.flush();
    };
  }, [o]), Xl(function() {
    var a = s.current, i = a[0], l = a[1];
    if (l) {
      a[1] = !1;
      return;
    }
    if (r.next !== void 0 && Ui(o, r.next, !0), i.tags.length) {
      var c = i.tags[i.tags.length - 1].nextElementSibling;
      i.before = c, i.flush();
    }
    o.insert("", r, i, !1);
  }, [o, r.name]), null;
});
function tn() {
  for (var e = arguments.length, o = new Array(e), n = 0; n < e; n++)
    o[n] = arguments[n];
  return Lr(o);
}
function No() {
  var e = tn.apply(void 0, arguments), o = "animation-" + e.name;
  return {
    name: o,
    styles: "@keyframes " + o + "{" + e.styles + "}",
    anim: 1,
    toString: function() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
}
var Um = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/, Hm = /* @__PURE__ */ fu(
  function(e) {
    return Um.test(e) || e.charCodeAt(0) === 111 && e.charCodeAt(1) === 110 && e.charCodeAt(2) < 91;
  }
  /* Z+1 */
), Gm = Hm, qm = function(o) {
  return o !== "theme";
}, Zl = function(o) {
  return typeof o == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  o.charCodeAt(0) > 96 ? Gm : qm;
}, Ql = function(o, n, r) {
  var s;
  if (n) {
    var a = n.shouldForwardProp;
    s = o.__emotion_forwardProp && a ? function(i) {
      return o.__emotion_forwardProp(i) && a(i);
    } : a;
  }
  return typeof s != "function" && r && (s = o.__emotion_forwardProp), s;
}, Ym = function(o) {
  var n = o.cache, r = o.serialized, s = o.isStringTag;
  return Wi(n, r, s), vu(function() {
    return Ui(n, r, s);
  }), null;
}, Km = function e(o, n) {
  var r = o.__emotion_real === o, s = r && o.__emotion_base || o, a, i;
  n !== void 0 && (a = n.label, i = n.target);
  var l = Ql(o, n, r), c = l || Zl(s), p = !c("as");
  return function() {
    var u = arguments, f = r && o.__emotion_styles !== void 0 ? o.__emotion_styles.slice(0) : [];
    if (a !== void 0 && f.push("label:" + a + ";"), u[0] == null || u[0].raw === void 0)
      f.push.apply(f, u);
    else {
      var g = u[0];
      f.push(g[0]);
      for (var b = u.length, h = 1; h < b; h++)
        f.push(u[h], g[h]);
    }
    var d = Hi(function(y, S, O) {
      var C = p && y.as || s, T = "", w = [], E = y;
      if (y.theme == null) {
        E = {};
        for (var $ in y)
          E[$] = y[$];
        E.theme = m.useContext(Dr);
      }
      typeof y.className == "string" ? T = bu(S.registered, w, y.className) : y.className != null && (T = y.className + " ");
      var P = Lr(f.concat(w), S.registered, E);
      T += S.key + "-" + P.name, i !== void 0 && (T += " " + i);
      var N = p && l === void 0 ? Zl(C) : c, v = {};
      for (var R in y)
        p && R === "as" || N(R) && (v[R] = y[R]);
      return v.className = T, O && (v.ref = O), /* @__PURE__ */ m.createElement(m.Fragment, null, /* @__PURE__ */ m.createElement(Ym, {
        cache: S,
        serialized: P,
        isStringTag: typeof C == "string"
      }), /* @__PURE__ */ m.createElement(C, v));
    });
    return d.displayName = a !== void 0 ? a : "Styled(" + (typeof s == "string" ? s : s.displayName || s.name || "Component") + ")", d.defaultProps = o.defaultProps, d.__emotion_real = d, d.__emotion_base = s, d.__emotion_styles = f, d.__emotion_forwardProp = l, Object.defineProperty(d, "toString", {
      value: function() {
        return "." + i;
      }
    }), d.withComponent = function(y, S) {
      var O = e(y, As({}, n, S, {
        shouldForwardProp: Ql(d, S, !0)
      }));
      return O.apply(void 0, f);
    }, d;
  };
}, Xm = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
], gi = Km.bind(null);
Xm.forEach(function(e) {
  gi[e] = gi(e);
});
var os = { exports: {} };
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var za, ec;
function Jm() {
  if (ec) return za;
  ec = 1;
  var e = Object.getOwnPropertySymbols, o = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable;
  function r(a) {
    if (a == null)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(a);
  }
  function s() {
    try {
      if (!Object.assign)
        return !1;
      var a = new String("abc");
      if (a[5] = "de", Object.getOwnPropertyNames(a)[0] === "5")
        return !1;
      for (var i = {}, l = 0; l < 10; l++)
        i["_" + String.fromCharCode(l)] = l;
      var c = Object.getOwnPropertyNames(i).map(function(u) {
        return i[u];
      });
      if (c.join("") !== "0123456789")
        return !1;
      var p = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(u) {
        p[u] = u;
      }), Object.keys(Object.assign({}, p)).join("") === "abcdefghijklmnopqrst";
    } catch {
      return !1;
    }
  }
  return za = s() ? Object.assign : function(a, i) {
    for (var l, c = r(a), p, u = 1; u < arguments.length; u++) {
      l = Object(arguments[u]);
      for (var f in l)
        o.call(l, f) && (c[f] = l[f]);
      if (e) {
        p = e(l);
        for (var g = 0; g < p.length; g++)
          n.call(l, p[g]) && (c[p[g]] = l[p[g]]);
      }
    }
    return c;
  }, za;
}
var Fa, tc;
function qi() {
  if (tc) return Fa;
  tc = 1;
  var e = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  return Fa = e, Fa;
}
var Va, oc;
function Su() {
  return oc || (oc = 1, Va = Function.call.bind(Object.prototype.hasOwnProperty)), Va;
}
var _a, nc;
function Zm() {
  if (nc) return _a;
  nc = 1;
  var e = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    var o = /* @__PURE__ */ qi(), n = {}, r = /* @__PURE__ */ Su();
    e = function(a) {
      var i = "Warning: " + a;
      typeof console < "u" && console.error(i);
      try {
        throw new Error(i);
      } catch {
      }
    };
  }
  function s(a, i, l, c, p) {
    if (process.env.NODE_ENV !== "production") {
      for (var u in a)
        if (r(a, u)) {
          var f;
          try {
            if (typeof a[u] != "function") {
              var g = Error(
                (c || "React class") + ": " + l + " type `" + u + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof a[u] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              throw g.name = "Invariant Violation", g;
            }
            f = a[u](i, u, c, l, null, o);
          } catch (h) {
            f = h;
          }
          if (f && !(f instanceof Error) && e(
            (c || "React class") + ": type specification of " + l + " `" + u + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof f + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
          ), f instanceof Error && !(f.message in n)) {
            n[f.message] = !0;
            var b = p ? p() : "";
            e(
              "Failed " + l + " type: " + f.message + (b ?? "")
            );
          }
        }
    }
  }
  return s.resetWarningCache = function() {
    process.env.NODE_ENV !== "production" && (n = {});
  }, _a = s, _a;
}
var Wa, rc;
function Qm() {
  if (rc) return Wa;
  rc = 1;
  var e = _i(), o = Jm(), n = /* @__PURE__ */ qi(), r = /* @__PURE__ */ Su(), s = /* @__PURE__ */ Zm(), a = function() {
  };
  process.env.NODE_ENV !== "production" && (a = function(l) {
    var c = "Warning: " + l;
    typeof console < "u" && console.error(c);
    try {
      throw new Error(c);
    } catch {
    }
  });
  function i() {
    return null;
  }
  return Wa = function(l, c) {
    var p = typeof Symbol == "function" && Symbol.iterator, u = "@@iterator";
    function f(F) {
      var V = F && (p && F[p] || F[u]);
      if (typeof V == "function")
        return V;
    }
    var g = "<<anonymous>>", b = {
      array: S("array"),
      bigint: S("bigint"),
      bool: S("boolean"),
      func: S("function"),
      number: S("number"),
      object: S("object"),
      string: S("string"),
      symbol: S("symbol"),
      any: O(),
      arrayOf: C,
      element: T(),
      elementType: w(),
      instanceOf: E,
      node: v(),
      objectOf: P,
      oneOf: $,
      oneOfType: N,
      shape: A,
      exact: j
    };
    function h(F, V) {
      return F === V ? F !== 0 || 1 / F === 1 / V : F !== F && V !== V;
    }
    function d(F, V) {
      this.message = F, this.data = V && typeof V == "object" ? V : {}, this.stack = "";
    }
    d.prototype = Error.prototype;
    function y(F) {
      if (process.env.NODE_ENV !== "production")
        var V = {}, me = 0;
      function G(Y, q, ie, K, de, oe, he) {
        if (K = K || g, oe = oe || ie, he !== n) {
          if (c) {
            var z = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            throw z.name = "Invariant Violation", z;
          } else if (process.env.NODE_ENV !== "production" && typeof console < "u") {
            var be = K + ":" + ie;
            !V[be] && // Avoid spamming the console because they are often not actionable except for lib authors
            me < 3 && (a(
              "You are manually calling a React.PropTypes validation function for the `" + oe + "` prop on `" + K + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
            ), V[be] = !0, me++);
          }
        }
        return q[ie] == null ? Y ? q[ie] === null ? new d("The " + de + " `" + oe + "` is marked as required " + ("in `" + K + "`, but its value is `null`.")) : new d("The " + de + " `" + oe + "` is marked as required in " + ("`" + K + "`, but its value is `undefined`.")) : null : F(q, ie, K, de, oe);
      }
      var X = G.bind(null, !1);
      return X.isRequired = G.bind(null, !0), X;
    }
    function S(F) {
      function V(me, G, X, Y, q, ie) {
        var K = me[G], de = B(K);
        if (de !== F) {
          var oe = _(K);
          return new d(
            "Invalid " + Y + " `" + q + "` of type " + ("`" + oe + "` supplied to `" + X + "`, expected ") + ("`" + F + "`."),
            { expectedType: F }
          );
        }
        return null;
      }
      return y(V);
    }
    function O() {
      return y(i);
    }
    function C(F) {
      function V(me, G, X, Y, q) {
        if (typeof F != "function")
          return new d("Property `" + q + "` of component `" + X + "` has invalid PropType notation inside arrayOf.");
        var ie = me[G];
        if (!Array.isArray(ie)) {
          var K = B(ie);
          return new d("Invalid " + Y + " `" + q + "` of type " + ("`" + K + "` supplied to `" + X + "`, expected an array."));
        }
        for (var de = 0; de < ie.length; de++) {
          var oe = F(ie, de, X, Y, q + "[" + de + "]", n);
          if (oe instanceof Error)
            return oe;
        }
        return null;
      }
      return y(V);
    }
    function T() {
      function F(V, me, G, X, Y) {
        var q = V[me];
        if (!l(q)) {
          var ie = B(q);
          return new d("Invalid " + X + " `" + Y + "` of type " + ("`" + ie + "` supplied to `" + G + "`, expected a single ReactElement."));
        }
        return null;
      }
      return y(F);
    }
    function w() {
      function F(V, me, G, X, Y) {
        var q = V[me];
        if (!e.isValidElementType(q)) {
          var ie = B(q);
          return new d("Invalid " + X + " `" + Y + "` of type " + ("`" + ie + "` supplied to `" + G + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return y(F);
    }
    function E(F) {
      function V(me, G, X, Y, q) {
        if (!(me[G] instanceof F)) {
          var ie = F.name || g, K = U(me[G]);
          return new d("Invalid " + Y + " `" + q + "` of type " + ("`" + K + "` supplied to `" + X + "`, expected ") + ("instance of `" + ie + "`."));
        }
        return null;
      }
      return y(V);
    }
    function $(F) {
      if (!Array.isArray(F))
        return process.env.NODE_ENV !== "production" && (arguments.length > 1 ? a(
          "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
        ) : a("Invalid argument supplied to oneOf, expected an array.")), i;
      function V(me, G, X, Y, q) {
        for (var ie = me[G], K = 0; K < F.length; K++)
          if (h(ie, F[K]))
            return null;
        var de = JSON.stringify(F, function(he, z) {
          var be = _(z);
          return be === "symbol" ? String(z) : z;
        });
        return new d("Invalid " + Y + " `" + q + "` of value `" + String(ie) + "` " + ("supplied to `" + X + "`, expected one of " + de + "."));
      }
      return y(V);
    }
    function P(F) {
      function V(me, G, X, Y, q) {
        if (typeof F != "function")
          return new d("Property `" + q + "` of component `" + X + "` has invalid PropType notation inside objectOf.");
        var ie = me[G], K = B(ie);
        if (K !== "object")
          return new d("Invalid " + Y + " `" + q + "` of type " + ("`" + K + "` supplied to `" + X + "`, expected an object."));
        for (var de in ie)
          if (r(ie, de)) {
            var oe = F(ie, de, X, Y, q + "." + de, n);
            if (oe instanceof Error)
              return oe;
          }
        return null;
      }
      return y(V);
    }
    function N(F) {
      if (!Array.isArray(F))
        return process.env.NODE_ENV !== "production" && a("Invalid argument supplied to oneOfType, expected an instance of array."), i;
      for (var V = 0; V < F.length; V++) {
        var me = F[V];
        if (typeof me != "function")
          return a(
            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + H(me) + " at index " + V + "."
          ), i;
      }
      function G(X, Y, q, ie, K) {
        for (var de = [], oe = 0; oe < F.length; oe++) {
          var he = F[oe], z = he(X, Y, q, ie, K, n);
          if (z == null)
            return null;
          z.data && r(z.data, "expectedType") && de.push(z.data.expectedType);
        }
        var be = de.length > 0 ? ", expected one of type [" + de.join(", ") + "]" : "";
        return new d("Invalid " + ie + " `" + K + "` supplied to " + ("`" + q + "`" + be + "."));
      }
      return y(G);
    }
    function v() {
      function F(V, me, G, X, Y) {
        return k(V[me]) ? null : new d("Invalid " + X + " `" + Y + "` supplied to " + ("`" + G + "`, expected a ReactNode."));
      }
      return y(F);
    }
    function R(F, V, me, G, X) {
      return new d(
        (F || "React class") + ": " + V + " type `" + me + "." + G + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + X + "`."
      );
    }
    function A(F) {
      function V(me, G, X, Y, q) {
        var ie = me[G], K = B(ie);
        if (K !== "object")
          return new d("Invalid " + Y + " `" + q + "` of type `" + K + "` " + ("supplied to `" + X + "`, expected `object`."));
        for (var de in F) {
          var oe = F[de];
          if (typeof oe != "function")
            return R(X, Y, q, de, _(oe));
          var he = oe(ie, de, X, Y, q + "." + de, n);
          if (he)
            return he;
        }
        return null;
      }
      return y(V);
    }
    function j(F) {
      function V(me, G, X, Y, q) {
        var ie = me[G], K = B(ie);
        if (K !== "object")
          return new d("Invalid " + Y + " `" + q + "` of type `" + K + "` " + ("supplied to `" + X + "`, expected `object`."));
        var de = o({}, me[G], F);
        for (var oe in de) {
          var he = F[oe];
          if (r(F, oe) && typeof he != "function")
            return R(X, Y, q, oe, _(he));
          if (!he)
            return new d(
              "Invalid " + Y + " `" + q + "` key `" + oe + "` supplied to `" + X + "`.\nBad object: " + JSON.stringify(me[G], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(F), null, "  ")
            );
          var z = he(ie, oe, X, Y, q + "." + oe, n);
          if (z)
            return z;
        }
        return null;
      }
      return y(V);
    }
    function k(F) {
      switch (typeof F) {
        case "number":
        case "string":
        case "undefined":
          return !0;
        case "boolean":
          return !F;
        case "object":
          if (Array.isArray(F))
            return F.every(k);
          if (F === null || l(F))
            return !0;
          var V = f(F);
          if (V) {
            var me = V.call(F), G;
            if (V !== F.entries) {
              for (; !(G = me.next()).done; )
                if (!k(G.value))
                  return !1;
            } else
              for (; !(G = me.next()).done; ) {
                var X = G.value;
                if (X && !k(X[1]))
                  return !1;
              }
          } else
            return !1;
          return !0;
        default:
          return !1;
      }
    }
    function D(F, V) {
      return F === "symbol" ? !0 : V ? V["@@toStringTag"] === "Symbol" || typeof Symbol == "function" && V instanceof Symbol : !1;
    }
    function B(F) {
      var V = typeof F;
      return Array.isArray(F) ? "array" : F instanceof RegExp ? "object" : D(V, F) ? "symbol" : V;
    }
    function _(F) {
      if (typeof F > "u" || F === null)
        return "" + F;
      var V = B(F);
      if (V === "object") {
        if (F instanceof Date)
          return "date";
        if (F instanceof RegExp)
          return "regexp";
      }
      return V;
    }
    function H(F) {
      var V = _(F);
      switch (V) {
        case "array":
        case "object":
          return "an " + V;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + V;
        default:
          return V;
      }
    }
    function U(F) {
      return !F.constructor || !F.constructor.name ? g : F.constructor.name;
    }
    return b.checkPropTypes = s, b.resetWarningCache = s.resetWarningCache, b.PropTypes = b, b;
  }, Wa;
}
var Ua, sc;
function eg() {
  if (sc) return Ua;
  sc = 1;
  var e = /* @__PURE__ */ qi();
  function o() {
  }
  function n() {
  }
  return n.resetWarningCache = o, Ua = function() {
    function r(i, l, c, p, u, f) {
      if (f !== e) {
        var g = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        throw g.name = "Invariant Violation", g;
      }
    }
    r.isRequired = r;
    function s() {
      return r;
    }
    var a = {
      array: r,
      bigint: r,
      bool: r,
      func: r,
      number: r,
      object: r,
      string: r,
      symbol: r,
      any: r,
      arrayOf: s,
      element: r,
      elementType: r,
      instanceOf: s,
      node: r,
      objectOf: s,
      oneOf: s,
      oneOfType: s,
      shape: s,
      exact: s,
      checkPropTypes: n,
      resetWarningCache: o
    };
    return a.PropTypes = a, a;
  }, Ua;
}
var ac;
function tg() {
  if (ac) return os.exports;
  if (ac = 1, process.env.NODE_ENV !== "production") {
    var e = _i(), o = !0;
    os.exports = /* @__PURE__ */ Qm()(e.isElement, o);
  } else
    os.exports = /* @__PURE__ */ eg()();
  return os.exports;
}
var og = /* @__PURE__ */ tg();
const t = /* @__PURE__ */ Rm(og);
var ns = { exports: {} }, nr = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ic;
function ng() {
  if (ic) return nr;
  ic = 1;
  var e = Symbol.for("react.transitional.element"), o = Symbol.for("react.fragment");
  function n(r, s, a) {
    var i = null;
    if (a !== void 0 && (i = "" + a), s.key !== void 0 && (i = "" + s.key), "key" in s) {
      a = {};
      for (var l in s)
        l !== "key" && (a[l] = s[l]);
    } else a = s;
    return s = a.ref, {
      $$typeof: e,
      type: r,
      key: i,
      ref: s !== void 0 ? s : null,
      props: a
    };
  }
  return nr.Fragment = o, nr.jsx = n, nr.jsxs = n, nr;
}
var rr = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var lc;
function rg() {
  return lc || (lc = 1, process.env.NODE_ENV !== "production" && function() {
    function e(I) {
      if (I == null) return null;
      if (typeof I == "function")
        return I.$$typeof === H ? null : I.displayName || I.name || null;
      if (typeof I == "string") return I;
      switch (I) {
        case E:
          return "Fragment";
        case w:
          return "Portal";
        case P:
          return "Profiler";
        case $:
          return "StrictMode";
        case A:
          return "Suspense";
        case j:
          return "SuspenseList";
      }
      if (typeof I == "object")
        switch (typeof I.tag == "number" && console.error(
          "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
        ), I.$$typeof) {
          case v:
            return (I.displayName || "Context") + ".Provider";
          case N:
            return (I._context.displayName || "Context") + ".Consumer";
          case R:
            var J = I.render;
            return I = I.displayName, I || (I = J.displayName || J.name || "", I = I !== "" ? "ForwardRef(" + I + ")" : "ForwardRef"), I;
          case k:
            return J = I.displayName || null, J !== null ? J : e(I.type) || "Memo";
          case D:
            J = I._payload, I = I._init;
            try {
              return e(I(J));
            } catch {
            }
        }
      return null;
    }
    function o(I) {
      return "" + I;
    }
    function n(I) {
      try {
        o(I);
        var J = !1;
      } catch {
        J = !0;
      }
      if (J) {
        J = console;
        var xe = J.error, ke = typeof Symbol == "function" && Symbol.toStringTag && I[Symbol.toStringTag] || I.constructor.name || "Object";
        return xe.call(
          J,
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          ke
        ), o(I);
      }
    }
    function r() {
    }
    function s() {
      if (X === 0) {
        Y = console.log, q = console.info, ie = console.warn, K = console.error, de = console.group, oe = console.groupCollapsed, he = console.groupEnd;
        var I = {
          configurable: !0,
          enumerable: !0,
          value: r,
          writable: !0
        };
        Object.defineProperties(console, {
          info: I,
          log: I,
          warn: I,
          error: I,
          group: I,
          groupCollapsed: I,
          groupEnd: I
        });
      }
      X++;
    }
    function a() {
      if (X--, X === 0) {
        var I = { configurable: !0, enumerable: !0, writable: !0 };
        Object.defineProperties(console, {
          log: V({}, I, { value: Y }),
          info: V({}, I, { value: q }),
          warn: V({}, I, { value: ie }),
          error: V({}, I, { value: K }),
          group: V({}, I, { value: de }),
          groupCollapsed: V({}, I, { value: oe }),
          groupEnd: V({}, I, { value: he })
        });
      }
      0 > X && console.error(
        "disabledDepth fell below zero. This is a bug in React. Please file an issue."
      );
    }
    function i(I) {
      if (z === void 0)
        try {
          throw Error();
        } catch (xe) {
          var J = xe.stack.trim().match(/\n( *(at )?)/);
          z = J && J[1] || "", be = -1 < xe.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < xe.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
      return `
` + z + I + be;
    }
    function l(I, J) {
      if (!I || ye) return "";
      var xe = Pe.get(I);
      if (xe !== void 0) return xe;
      ye = !0, xe = Error.prepareStackTrace, Error.prepareStackTrace = void 0;
      var ke = null;
      ke = U.H, U.H = null, s();
      try {
        var ee = {
          DetermineComponentFrameRoot: function() {
            try {
              if (J) {
                var Ae = function() {
                  throw Error();
                };
                if (Object.defineProperty(Ae.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                }), typeof Reflect == "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Ae, []);
                  } catch (Se) {
                    var Fe = Se;
                  }
                  Reflect.construct(I, [], Ae);
                } else {
                  try {
                    Ae.call();
                  } catch (Se) {
                    Fe = Se;
                  }
                  I.call(Ae.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (Se) {
                  Fe = Se;
                }
                (Ae = I()) && typeof Ae.catch == "function" && Ae.catch(function() {
                });
              }
            } catch (Se) {
              if (Se && Fe && typeof Se.stack == "string")
                return [Se.stack, Fe.stack];
            }
            return [null, null];
          }
        };
        ee.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var ue = Object.getOwnPropertyDescriptor(
          ee.DetermineComponentFrameRoot,
          "name"
        );
        ue && ue.configurable && Object.defineProperty(
          ee.DetermineComponentFrameRoot,
          "name",
          { value: "DetermineComponentFrameRoot" }
        );
        var te = ee.DetermineComponentFrameRoot(), we = te[0], Ce = te[1];
        if (we && Ce) {
          var ge = we.split(`
`), ve = Ce.split(`
`);
          for (te = ue = 0; ue < ge.length && !ge[ue].includes(
            "DetermineComponentFrameRoot"
          ); )
            ue++;
          for (; te < ve.length && !ve[te].includes(
            "DetermineComponentFrameRoot"
          ); )
            te++;
          if (ue === ge.length || te === ve.length)
            for (ue = ge.length - 1, te = ve.length - 1; 1 <= ue && 0 <= te && ge[ue] !== ve[te]; )
              te--;
          for (; 1 <= ue && 0 <= te; ue--, te--)
            if (ge[ue] !== ve[te]) {
              if (ue !== 1 || te !== 1)
                do
                  if (ue--, te--, 0 > te || ge[ue] !== ve[te]) {
                    var Be = `
` + ge[ue].replace(
                      " at new ",
                      " at "
                    );
                    return I.displayName && Be.includes("<anonymous>") && (Be = Be.replace("<anonymous>", I.displayName)), typeof I == "function" && Pe.set(I, Be), Be;
                  }
                while (1 <= ue && 0 <= te);
              break;
            }
        }
      } finally {
        ye = !1, U.H = ke, a(), Error.prepareStackTrace = xe;
      }
      return ge = (ge = I ? I.displayName || I.name : "") ? i(ge) : "", typeof I == "function" && Pe.set(I, ge), ge;
    }
    function c(I) {
      if (I == null) return "";
      if (typeof I == "function") {
        var J = I.prototype;
        return l(
          I,
          !(!J || !J.isReactComponent)
        );
      }
      if (typeof I == "string") return i(I);
      switch (I) {
        case A:
          return i("Suspense");
        case j:
          return i("SuspenseList");
      }
      if (typeof I == "object")
        switch (I.$$typeof) {
          case R:
            return I = l(I.render, !1), I;
          case k:
            return c(I.type);
          case D:
            J = I._payload, I = I._init;
            try {
              return c(I(J));
            } catch {
            }
        }
      return "";
    }
    function p() {
      var I = U.A;
      return I === null ? null : I.getOwner();
    }
    function u(I) {
      if (F.call(I, "key")) {
        var J = Object.getOwnPropertyDescriptor(I, "key").get;
        if (J && J.isReactWarning) return !1;
      }
      return I.key !== void 0;
    }
    function f(I, J) {
      function xe() {
        Z || (Z = !0, console.error(
          "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
          J
        ));
      }
      xe.isReactWarning = !0, Object.defineProperty(I, "key", {
        get: xe,
        configurable: !0
      });
    }
    function g() {
      var I = e(this.type);
      return $e[I] || ($e[I] = !0, console.error(
        "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
      )), I = this.props.ref, I !== void 0 ? I : null;
    }
    function b(I, J, xe, ke, ee, ue) {
      return xe = ue.ref, I = {
        $$typeof: T,
        type: I,
        key: J,
        props: ue,
        _owner: ee
      }, (xe !== void 0 ? xe : null) !== null ? Object.defineProperty(I, "ref", {
        enumerable: !1,
        get: g
      }) : Object.defineProperty(I, "ref", { enumerable: !1, value: null }), I._store = {}, Object.defineProperty(I._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: 0
      }), Object.defineProperty(I, "_debugInfo", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: null
      }), Object.freeze && (Object.freeze(I.props), Object.freeze(I)), I;
    }
    function h(I, J, xe, ke, ee, ue) {
      if (typeof I == "string" || typeof I == "function" || I === E || I === P || I === $ || I === A || I === j || I === B || typeof I == "object" && I !== null && (I.$$typeof === D || I.$$typeof === k || I.$$typeof === v || I.$$typeof === N || I.$$typeof === R || I.$$typeof === me || I.getModuleId !== void 0)) {
        var te = J.children;
        if (te !== void 0)
          if (ke)
            if (G(te)) {
              for (ke = 0; ke < te.length; ke++)
                d(te[ke], I);
              Object.freeze && Object.freeze(te);
            } else
              console.error(
                "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
              );
          else d(te, I);
      } else
        te = "", (I === void 0 || typeof I == "object" && I !== null && Object.keys(I).length === 0) && (te += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), I === null ? ke = "null" : G(I) ? ke = "array" : I !== void 0 && I.$$typeof === T ? (ke = "<" + (e(I.type) || "Unknown") + " />", te = " Did you accidentally export a JSX literal instead of a component?") : ke = typeof I, console.error(
          "React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
          ke,
          te
        );
      if (F.call(J, "key")) {
        te = e(I);
        var we = Object.keys(J).filter(function(ge) {
          return ge !== "key";
        });
        ke = 0 < we.length ? "{key: someKey, " + we.join(": ..., ") + ": ...}" : "{key: someKey}", Oe[te + ke] || (we = 0 < we.length ? "{" + we.join(": ..., ") + ": ...}" : "{}", console.error(
          `A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`,
          ke,
          te,
          we,
          te
        ), Oe[te + ke] = !0);
      }
      if (te = null, xe !== void 0 && (n(xe), te = "" + xe), u(J) && (n(J.key), te = "" + J.key), "key" in J) {
        xe = {};
        for (var Ce in J)
          Ce !== "key" && (xe[Ce] = J[Ce]);
      } else xe = J;
      return te && f(
        xe,
        typeof I == "function" ? I.displayName || I.name || "Unknown" : I
      ), b(I, te, ue, ee, p(), xe);
    }
    function d(I, J) {
      if (typeof I == "object" && I && I.$$typeof !== Te) {
        if (G(I))
          for (var xe = 0; xe < I.length; xe++) {
            var ke = I[xe];
            y(ke) && S(ke, J);
          }
        else if (y(I))
          I._store && (I._store.validated = 1);
        else if (I === null || typeof I != "object" ? xe = null : (xe = _ && I[_] || I["@@iterator"], xe = typeof xe == "function" ? xe : null), typeof xe == "function" && xe !== I.entries && (xe = xe.call(I), xe !== I))
          for (; !(I = xe.next()).done; )
            y(I.value) && S(I.value, J);
      }
    }
    function y(I) {
      return typeof I == "object" && I !== null && I.$$typeof === T;
    }
    function S(I, J) {
      if (I._store && !I._store.validated && I.key == null && (I._store.validated = 1, J = O(J), !Me[J])) {
        Me[J] = !0;
        var xe = "";
        I && I._owner != null && I._owner !== p() && (xe = null, typeof I._owner.tag == "number" ? xe = e(I._owner.type) : typeof I._owner.name == "string" && (xe = I._owner.name), xe = " It was passed a child from " + xe + ".");
        var ke = U.getCurrentStack;
        U.getCurrentStack = function() {
          var ee = c(I.type);
          return ke && (ee += ke() || ""), ee;
        }, console.error(
          'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
          J,
          xe
        ), U.getCurrentStack = ke;
      }
    }
    function O(I) {
      var J = "", xe = p();
      return xe && (xe = e(xe.type)) && (J = `

Check the render method of \`` + xe + "`."), J || (I = e(I)) && (J = `

Check the top-level render call using <` + I + ">."), J;
    }
    var C = Co, T = Symbol.for("react.transitional.element"), w = Symbol.for("react.portal"), E = Symbol.for("react.fragment"), $ = Symbol.for("react.strict_mode"), P = Symbol.for("react.profiler"), N = Symbol.for("react.consumer"), v = Symbol.for("react.context"), R = Symbol.for("react.forward_ref"), A = Symbol.for("react.suspense"), j = Symbol.for("react.suspense_list"), k = Symbol.for("react.memo"), D = Symbol.for("react.lazy"), B = Symbol.for("react.offscreen"), _ = Symbol.iterator, H = Symbol.for("react.client.reference"), U = C.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, F = Object.prototype.hasOwnProperty, V = Object.assign, me = Symbol.for("react.client.reference"), G = Array.isArray, X = 0, Y, q, ie, K, de, oe, he;
    r.__reactDisabledLog = !0;
    var z, be, ye = !1, Pe = new (typeof WeakMap == "function" ? WeakMap : Map)(), Te = Symbol.for("react.client.reference"), Z, $e = {}, Oe = {}, Me = {};
    rr.Fragment = E, rr.jsx = function(I, J, xe, ke, ee) {
      return h(I, J, xe, !1, ke, ee);
    }, rr.jsxs = function(I, J, xe, ke, ee) {
      return h(I, J, xe, !0, ke, ee);
    };
  }()), rr;
}
var cc;
function sg() {
  return cc || (cc = 1, process.env.NODE_ENV === "production" ? ns.exports = ng() : ns.exports = rg()), ns.exports;
}
var x = sg();
const ag = (e, o) => {
  const n = gu(e);
  return n.sheet = new o({
    key: n.key,
    nonce: n.sheet.nonce,
    container: n.sheet.container,
    speedy: n.sheet.isSpeedy,
    prepend: n.sheet.prepend,
    insertionPoint: n.sheet.insertionPoint
  }), n;
};
let bi;
if (typeof document == "object") {
  let e = document.querySelector('[name="emotion-insertion-point"]');
  if (!e) {
    e = document.createElement("meta"), e.setAttribute("name", "emotion-insertion-point"), e.setAttribute("content", "");
    const n = document.querySelector("head");
    n && n.prepend(e);
  }
  class o extends au {
    insert(r, s) {
      return this.key && this.key.endsWith("global") && (this.before = e), super.insert(r, s);
    }
  }
  bi = ag({
    key: "css",
    insertionPoint: e
  }, o);
}
function ig(e) {
  const {
    injectFirst: o,
    children: n
  } = e;
  return o && bi ? /* @__PURE__ */ x.jsx(Dm, {
    value: bi,
    children: n
  }) : n;
}
process.env.NODE_ENV !== "production" && (ig.propTypes = {
  /**
   * Your component tree.
   */
  children: t.node,
  /**
   * By default, the styles are injected last in the <head> element of the page.
   * As a result, they gain more specificity than any other style sheet.
   * If you want to override MUI's styles, set this prop.
   */
  injectFirst: t.bool
});
function lg(e) {
  return e == null || Object.keys(e).length === 0;
}
function Yi(e) {
  const {
    styles: o,
    defaultTheme: n = {}
  } = e, r = typeof o == "function" ? (s) => o(lg(s) ? n : s) : o;
  return /* @__PURE__ */ x.jsx(Wm, {
    styles: r
  });
}
process.env.NODE_ENV !== "production" && (Yi.propTypes = {
  defaultTheme: t.object,
  styles: t.oneOfType([t.array, t.string, t.object, t.func])
});
/**
 * @mui/styled-engine v6.4.3
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function Tu(e, o) {
  const n = gi(e, o);
  return process.env.NODE_ENV !== "production" ? (...r) => {
    const s = typeof e == "string" ? `"${e}"` : "component";
    return r.length === 0 ? console.error([`MUI: Seems like you called \`styled(${s})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join(`
`)) : r.some((a) => a === void 0) && console.error(`MUI: the styled(${s})(...args) API requires all its args to be defined.`), n(...r);
  } : n;
}
function cg(e, o) {
  Array.isArray(e.__emotion_styles) && (e.__emotion_styles = o(e.__emotion_styles));
}
const pc = [];
function uc(e) {
  return pc[0] = e, Lr(pc);
}
var rs = { exports: {} }, ot = {};
/**
 * @license React
 * react-is.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var dc;
function pg() {
  if (dc) return ot;
  dc = 1;
  var e = Symbol.for("react.transitional.element"), o = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), s = Symbol.for("react.profiler"), a = Symbol.for("react.consumer"), i = Symbol.for("react.context"), l = Symbol.for("react.forward_ref"), c = Symbol.for("react.suspense"), p = Symbol.for("react.suspense_list"), u = Symbol.for("react.memo"), f = Symbol.for("react.lazy"), g = Symbol.for("react.offscreen"), b = Symbol.for("react.client.reference");
  function h(d) {
    if (typeof d == "object" && d !== null) {
      var y = d.$$typeof;
      switch (y) {
        case e:
          switch (d = d.type, d) {
            case n:
            case s:
            case r:
            case c:
            case p:
              return d;
            default:
              switch (d = d && d.$$typeof, d) {
                case i:
                case l:
                case f:
                case u:
                  return d;
                case a:
                  return d;
                default:
                  return y;
              }
          }
        case o:
          return y;
      }
    }
  }
  return ot.ContextConsumer = a, ot.ContextProvider = i, ot.Element = e, ot.ForwardRef = l, ot.Fragment = n, ot.Lazy = f, ot.Memo = u, ot.Portal = o, ot.Profiler = s, ot.StrictMode = r, ot.Suspense = c, ot.SuspenseList = p, ot.isContextConsumer = function(d) {
    return h(d) === a;
  }, ot.isContextProvider = function(d) {
    return h(d) === i;
  }, ot.isElement = function(d) {
    return typeof d == "object" && d !== null && d.$$typeof === e;
  }, ot.isForwardRef = function(d) {
    return h(d) === l;
  }, ot.isFragment = function(d) {
    return h(d) === n;
  }, ot.isLazy = function(d) {
    return h(d) === f;
  }, ot.isMemo = function(d) {
    return h(d) === u;
  }, ot.isPortal = function(d) {
    return h(d) === o;
  }, ot.isProfiler = function(d) {
    return h(d) === s;
  }, ot.isStrictMode = function(d) {
    return h(d) === r;
  }, ot.isSuspense = function(d) {
    return h(d) === c;
  }, ot.isSuspenseList = function(d) {
    return h(d) === p;
  }, ot.isValidElementType = function(d) {
    return typeof d == "string" || typeof d == "function" || d === n || d === s || d === r || d === c || d === p || d === g || typeof d == "object" && d !== null && (d.$$typeof === f || d.$$typeof === u || d.$$typeof === i || d.$$typeof === a || d.$$typeof === l || d.$$typeof === b || d.getModuleId !== void 0);
  }, ot.typeOf = h, ot;
}
var nt = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var fc;
function ug() {
  return fc || (fc = 1, process.env.NODE_ENV !== "production" && function() {
    function e(d) {
      if (typeof d == "object" && d !== null) {
        var y = d.$$typeof;
        switch (y) {
          case o:
            switch (d = d.type, d) {
              case r:
              case a:
              case s:
              case p:
              case u:
                return d;
              default:
                switch (d = d && d.$$typeof, d) {
                  case l:
                  case c:
                  case g:
                  case f:
                    return d;
                  case i:
                    return d;
                  default:
                    return y;
                }
            }
          case n:
            return y;
        }
      }
    }
    var o = Symbol.for("react.transitional.element"), n = Symbol.for("react.portal"), r = Symbol.for("react.fragment"), s = Symbol.for("react.strict_mode"), a = Symbol.for("react.profiler"), i = Symbol.for("react.consumer"), l = Symbol.for("react.context"), c = Symbol.for("react.forward_ref"), p = Symbol.for("react.suspense"), u = Symbol.for("react.suspense_list"), f = Symbol.for("react.memo"), g = Symbol.for("react.lazy"), b = Symbol.for("react.offscreen"), h = Symbol.for("react.client.reference");
    nt.ContextConsumer = i, nt.ContextProvider = l, nt.Element = o, nt.ForwardRef = c, nt.Fragment = r, nt.Lazy = g, nt.Memo = f, nt.Portal = n, nt.Profiler = a, nt.StrictMode = s, nt.Suspense = p, nt.SuspenseList = u, nt.isContextConsumer = function(d) {
      return e(d) === i;
    }, nt.isContextProvider = function(d) {
      return e(d) === l;
    }, nt.isElement = function(d) {
      return typeof d == "object" && d !== null && d.$$typeof === o;
    }, nt.isForwardRef = function(d) {
      return e(d) === c;
    }, nt.isFragment = function(d) {
      return e(d) === r;
    }, nt.isLazy = function(d) {
      return e(d) === g;
    }, nt.isMemo = function(d) {
      return e(d) === f;
    }, nt.isPortal = function(d) {
      return e(d) === n;
    }, nt.isProfiler = function(d) {
      return e(d) === a;
    }, nt.isStrictMode = function(d) {
      return e(d) === s;
    }, nt.isSuspense = function(d) {
      return e(d) === p;
    }, nt.isSuspenseList = function(d) {
      return e(d) === u;
    }, nt.isValidElementType = function(d) {
      return typeof d == "string" || typeof d == "function" || d === r || d === a || d === s || d === p || d === u || d === b || typeof d == "object" && d !== null && (d.$$typeof === g || d.$$typeof === f || d.$$typeof === l || d.$$typeof === i || d.$$typeof === c || d.$$typeof === h || d.getModuleId !== void 0);
    }, nt.typeOf = e;
  }()), nt;
}
var mc;
function dg() {
  return mc || (mc = 1, process.env.NODE_ENV === "production" ? rs.exports = /* @__PURE__ */ pg() : rs.exports = /* @__PURE__ */ ug()), rs.exports;
}
var Ft = /* @__PURE__ */ dg();
function To(e) {
  if (typeof e != "object" || e === null)
    return !1;
  const o = Object.getPrototypeOf(e);
  return (o === null || o === Object.prototype || Object.getPrototypeOf(o) === null) && !(Symbol.toStringTag in e) && !(Symbol.iterator in e);
}
function Cu(e) {
  if (/* @__PURE__ */ m.isValidElement(e) || Ft.isValidElementType(e) || !To(e))
    return e;
  const o = {};
  return Object.keys(e).forEach((n) => {
    o[n] = Cu(e[n]);
  }), o;
}
function Ct(e, o, n = {
  clone: !0
}) {
  const r = n.clone ? {
    ...e
  } : e;
  return To(e) && To(o) && Object.keys(o).forEach((s) => {
    /* @__PURE__ */ m.isValidElement(o[s]) || Ft.isValidElementType(o[s]) ? r[s] = o[s] : To(o[s]) && // Avoid prototype pollution
    Object.prototype.hasOwnProperty.call(e, s) && To(e[s]) ? r[s] = Ct(e[s], o[s], n) : n.clone ? r[s] = To(o[s]) ? Cu(o[s]) : o[s] : r[s] = o[s];
  }), r;
}
const fg = (e) => {
  const o = Object.keys(e).map((n) => ({
    key: n,
    val: e[n]
  })) || [];
  return o.sort((n, r) => n.val - r.val), o.reduce((n, r) => ({
    ...n,
    [r.key]: r.val
  }), {});
};
function wu(e) {
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values: o = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    },
    unit: n = "px",
    step: r = 5,
    ...s
  } = e, a = fg(o), i = Object.keys(a);
  function l(g) {
    return `@media (min-width:${typeof o[g] == "number" ? o[g] : g}${n})`;
  }
  function c(g) {
    return `@media (max-width:${(typeof o[g] == "number" ? o[g] : g) - r / 100}${n})`;
  }
  function p(g, b) {
    const h = i.indexOf(b);
    return `@media (min-width:${typeof o[g] == "number" ? o[g] : g}${n}) and (max-width:${(h !== -1 && typeof o[i[h]] == "number" ? o[i[h]] : b) - r / 100}${n})`;
  }
  function u(g) {
    return i.indexOf(g) + 1 < i.length ? p(g, i[i.indexOf(g) + 1]) : l(g);
  }
  function f(g) {
    const b = i.indexOf(g);
    return b === 0 ? l(i[1]) : b === i.length - 1 ? c(i[b]) : p(g, i[i.indexOf(g) + 1]).replace("@media", "@media not all and");
  }
  return {
    keys: i,
    values: a,
    up: l,
    down: c,
    between: p,
    only: u,
    not: f,
    unit: n,
    ...s
  };
}
function mg(e, o) {
  if (!e.containerQueries)
    return o;
  const n = Object.keys(o).filter((r) => r.startsWith("@container")).sort((r, s) => {
    var i, l;
    const a = /min-width:\s*([0-9.]+)/;
    return +(((i = r.match(a)) == null ? void 0 : i[1]) || 0) - +(((l = s.match(a)) == null ? void 0 : l[1]) || 0);
  });
  return n.length ? n.reduce((r, s) => {
    const a = o[s];
    return delete r[s], r[s] = a, r;
  }, {
    ...o
  }) : o;
}
function gg(e, o) {
  return o === "@" || o.startsWith("@") && (e.some((n) => o.startsWith(`@${n}`)) || !!o.match(/^@\d/));
}
function bg(e, o) {
  const n = o.match(/^@([^/]+)?\/?(.+)?$/);
  if (!n) {
    if (process.env.NODE_ENV !== "production")
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${o})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : zt(18, `(${o})`));
    return null;
  }
  const [, r, s] = n, a = Number.isNaN(+r) ? r || 0 : +r;
  return e.containerQueries(s).up(a);
}
function hg(e) {
  const o = (a, i) => a.replace("@media", i ? `@container ${i}` : "@container");
  function n(a, i) {
    a.up = (...l) => o(e.breakpoints.up(...l), i), a.down = (...l) => o(e.breakpoints.down(...l), i), a.between = (...l) => o(e.breakpoints.between(...l), i), a.only = (...l) => o(e.breakpoints.only(...l), i), a.not = (...l) => {
      const c = o(e.breakpoints.not(...l), i);
      return c.includes("not all and") ? c.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or") : c;
    };
  }
  const r = {}, s = (a) => (n(r, a), r);
  return n(s), {
    ...e,
    containerQueries: s
  };
}
const yg = {
  borderRadius: 4
}, on = process.env.NODE_ENV !== "production" ? t.oneOfType([t.number, t.string, t.object, t.array]) : {};
function xr(e, o) {
  return o ? Ct(e, o, {
    clone: !1
    // No need to clone deep, it's way faster.
  }) : e;
}
const aa = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536
  // large screen
}, gc = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ["xs", "sm", "md", "lg", "xl"],
  up: (e) => `@media (min-width:${aa[e]}px)`
}, vg = {
  containerQueries: (e) => ({
    up: (o) => {
      let n = typeof o == "number" ? o : aa[o] || o;
      return typeof n == "number" && (n = `${n}px`), e ? `@container ${e} (min-width:${n})` : `@container (min-width:${n})`;
    }
  })
};
function Ut(e, o, n) {
  const r = e.theme || {};
  if (Array.isArray(o)) {
    const a = r.breakpoints || gc;
    return o.reduce((i, l, c) => (i[a.up(a.keys[c])] = n(o[c]), i), {});
  }
  if (typeof o == "object") {
    const a = r.breakpoints || gc;
    return Object.keys(o).reduce((i, l) => {
      if (gg(a.keys, l)) {
        const c = bg(r.containerQueries ? r : vg, l);
        c && (i[c] = n(o[l], l));
      } else if (Object.keys(a.values || aa).includes(l)) {
        const c = a.up(l);
        i[c] = n(o[l], l);
      } else {
        const c = l;
        i[c] = o[c];
      }
      return i;
    }, {});
  }
  return n(o);
}
function Ou(e = {}) {
  var n;
  return ((n = e.keys) == null ? void 0 : n.reduce((r, s) => {
    const a = e.up(s);
    return r[a] = {}, r;
  }, {})) || {};
}
function Eu(e, o) {
  return e.reduce((n, r) => {
    const s = n[r];
    return (!s || Object.keys(s).length === 0) && delete n[r], n;
  }, o);
}
function xg(e, ...o) {
  const n = Ou(e), r = [n, ...o].reduce((s, a) => Ct(s, a), {});
  return Eu(Object.keys(n), r);
}
function Sg(e, o) {
  if (typeof e != "object")
    return {};
  const n = {}, r = Object.keys(o);
  return Array.isArray(e) ? r.forEach((s, a) => {
    a < e.length && (n[s] = !0);
  }) : r.forEach((s) => {
    e[s] != null && (n[s] = !0);
  }), n;
}
function yn({
  values: e,
  breakpoints: o,
  base: n
}) {
  const r = n || Sg(e, o), s = Object.keys(r);
  if (s.length === 0)
    return e;
  let a;
  return s.reduce((i, l, c) => (Array.isArray(e) ? (i[l] = e[c] != null ? e[c] : e[a], a = c) : typeof e == "object" ? (i[l] = e[l] != null ? e[l] : e[a], a = l) : i[l] = e, i), {});
}
function L(e) {
  if (typeof e != "string")
    throw new Error(process.env.NODE_ENV !== "production" ? "MUI: `capitalize(string)` expects a string argument." : zt(7));
  return e.charAt(0).toUpperCase() + e.slice(1);
}
function Ko(e, o, n = !0) {
  if (!o || typeof o != "string")
    return null;
  if (e && e.vars && n) {
    const r = `vars.${o}`.split(".").reduce((s, a) => s && s[a] ? s[a] : null, e);
    if (r != null)
      return r;
  }
  return o.split(".").reduce((r, s) => r && r[s] != null ? r[s] : null, e);
}
function Ls(e, o, n, r = n) {
  let s;
  return typeof e == "function" ? s = e(n) : Array.isArray(e) ? s = e[n] || r : s = Ko(e, n) || r, o && (s = o(s, r, e)), s;
}
function gt(e) {
  const {
    prop: o,
    cssProperty: n = e.prop,
    themeKey: r,
    transform: s
  } = e, a = (i) => {
    if (i[o] == null)
      return null;
    const l = i[o], c = i.theme, p = Ko(c, r) || {};
    return Ut(i, l, (f) => {
      let g = Ls(p, s, f);
      return f === g && typeof f == "string" && (g = Ls(p, s, `${o}${f === "default" ? "" : L(f)}`, f)), n === !1 ? g : {
        [n]: g
      };
    });
  };
  return a.propTypes = process.env.NODE_ENV !== "production" ? {
    [o]: on
  } : {}, a.filterProps = [o], a;
}
function Tg(e) {
  const o = {};
  return (n) => (o[n] === void 0 && (o[n] = e(n)), o[n]);
}
const Cg = {
  m: "margin",
  p: "padding"
}, wg = {
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
}, bc = {
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
}, Og = Tg((e) => {
  if (e.length > 2)
    if (bc[e])
      e = bc[e];
    else
      return [e];
  const [o, n] = e.split(""), r = Cg[o], s = wg[n] || "";
  return Array.isArray(s) ? s.map((a) => r + a) : [r + s];
}), ia = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"], la = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"], Eg = [...ia, ...la];
function zr(e, o, n, r) {
  const s = Ko(e, o, !0) ?? n;
  return typeof s == "number" || typeof s == "string" ? (a) => typeof a == "string" ? a : (process.env.NODE_ENV !== "production" && typeof a != "number" && console.error(`MUI: Expected ${r} argument to be a number or a string, got ${a}.`), typeof s == "string" ? `calc(${a} * ${s})` : s * a) : Array.isArray(s) ? (a) => {
    if (typeof a == "string")
      return a;
    const i = Math.abs(a);
    process.env.NODE_ENV !== "production" && (Number.isInteger(i) ? i > s.length - 1 && console.error([`MUI: The value provided (${i}) overflows.`, `The supported values are: ${JSON.stringify(s)}.`, `${i} > ${s.length - 1}, you need to add the missing values.`].join(`
`)) : console.error([`MUI: The \`theme.${o}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${o}\` as a number.`].join(`
`)));
    const l = s[i];
    return a >= 0 ? l : typeof l == "number" ? -l : `-${l}`;
  } : typeof s == "function" ? s : (process.env.NODE_ENV !== "production" && console.error([`MUI: The \`theme.${o}\` value (${s}) is invalid.`, "It should be a number, an array or a function."].join(`
`)), () => {
  });
}
function ca(e) {
  return zr(e, "spacing", 8, "spacing");
}
function Sn(e, o) {
  return typeof o == "string" || o == null ? o : e(o);
}
function Rg(e, o) {
  return (n) => e.reduce((r, s) => (r[s] = Sn(o, n), r), {});
}
function $g(e, o, n, r) {
  if (!o.includes(n))
    return null;
  const s = Og(n), a = Rg(s, r), i = e[n];
  return Ut(e, i, a);
}
function Ru(e, o) {
  const n = ca(e.theme);
  return Object.keys(e).map((r) => $g(e, o, r, n)).reduce(xr, {});
}
function ut(e) {
  return Ru(e, ia);
}
ut.propTypes = process.env.NODE_ENV !== "production" ? ia.reduce((e, o) => (e[o] = on, e), {}) : {};
ut.filterProps = ia;
function dt(e) {
  return Ru(e, la);
}
dt.propTypes = process.env.NODE_ENV !== "production" ? la.reduce((e, o) => (e[o] = on, e), {}) : {};
dt.filterProps = la;
process.env.NODE_ENV !== "production" && Eg.reduce((e, o) => (e[o] = on, e), {});
function Ki(e = 8, o = ca({
  spacing: e
})) {
  if (e.mui)
    return e;
  const n = (...r) => (process.env.NODE_ENV !== "production" && (r.length <= 4 || console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${r.length}`)), (r.length === 0 ? [1] : r).map((a) => {
    const i = o(a);
    return typeof i == "number" ? `${i}px` : i;
  }).join(" "));
  return n.mui = !0, n;
}
function pa(...e) {
  const o = e.reduce((r, s) => (s.filterProps.forEach((a) => {
    r[a] = s;
  }), r), {}), n = (r) => Object.keys(r).reduce((s, a) => o[a] ? xr(s, o[a](r)) : s, {});
  return n.propTypes = process.env.NODE_ENV !== "production" ? e.reduce((r, s) => Object.assign(r, s.propTypes), {}) : {}, n.filterProps = e.reduce((r, s) => r.concat(s.filterProps), []), n;
}
function no(e) {
  return typeof e != "number" ? e : `${e}px solid`;
}
function po(e, o) {
  return gt({
    prop: e,
    themeKey: "borders",
    transform: o
  });
}
const kg = po("border", no), Pg = po("borderTop", no), Ng = po("borderRight", no), Ig = po("borderBottom", no), jg = po("borderLeft", no), Mg = po("borderColor"), Ag = po("borderTopColor"), Bg = po("borderRightColor"), Lg = po("borderBottomColor"), Dg = po("borderLeftColor"), zg = po("outline", no), Fg = po("outlineColor"), ua = (e) => {
  if (e.borderRadius !== void 0 && e.borderRadius !== null) {
    const o = zr(e.theme, "shape.borderRadius", 4, "borderRadius"), n = (r) => ({
      borderRadius: Sn(o, r)
    });
    return Ut(e, e.borderRadius, n);
  }
  return null;
};
ua.propTypes = process.env.NODE_ENV !== "production" ? {
  borderRadius: on
} : {};
ua.filterProps = ["borderRadius"];
pa(kg, Pg, Ng, Ig, jg, Mg, Ag, Bg, Lg, Dg, ua, zg, Fg);
const da = (e) => {
  if (e.gap !== void 0 && e.gap !== null) {
    const o = zr(e.theme, "spacing", 8, "gap"), n = (r) => ({
      gap: Sn(o, r)
    });
    return Ut(e, e.gap, n);
  }
  return null;
};
da.propTypes = process.env.NODE_ENV !== "production" ? {
  gap: on
} : {};
da.filterProps = ["gap"];
const fa = (e) => {
  if (e.columnGap !== void 0 && e.columnGap !== null) {
    const o = zr(e.theme, "spacing", 8, "columnGap"), n = (r) => ({
      columnGap: Sn(o, r)
    });
    return Ut(e, e.columnGap, n);
  }
  return null;
};
fa.propTypes = process.env.NODE_ENV !== "production" ? {
  columnGap: on
} : {};
fa.filterProps = ["columnGap"];
const ma = (e) => {
  if (e.rowGap !== void 0 && e.rowGap !== null) {
    const o = zr(e.theme, "spacing", 8, "rowGap"), n = (r) => ({
      rowGap: Sn(o, r)
    });
    return Ut(e, e.rowGap, n);
  }
  return null;
};
ma.propTypes = process.env.NODE_ENV !== "production" ? {
  rowGap: on
} : {};
ma.filterProps = ["rowGap"];
const Vg = gt({
  prop: "gridColumn"
}), _g = gt({
  prop: "gridRow"
}), Wg = gt({
  prop: "gridAutoFlow"
}), Ug = gt({
  prop: "gridAutoColumns"
}), Hg = gt({
  prop: "gridAutoRows"
}), Gg = gt({
  prop: "gridTemplateColumns"
}), qg = gt({
  prop: "gridTemplateRows"
}), Yg = gt({
  prop: "gridTemplateAreas"
}), Kg = gt({
  prop: "gridArea"
});
pa(da, fa, ma, Vg, _g, Wg, Ug, Hg, Gg, qg, Yg, Kg);
function Mn(e, o) {
  return o === "grey" ? o : e;
}
const Xg = gt({
  prop: "color",
  themeKey: "palette",
  transform: Mn
}), Jg = gt({
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  transform: Mn
}), Zg = gt({
  prop: "backgroundColor",
  themeKey: "palette",
  transform: Mn
});
pa(Xg, Jg, Zg);
function qt(e) {
  return e <= 1 && e !== 0 ? `${e * 100}%` : e;
}
const Qg = gt({
  prop: "width",
  transform: qt
}), Xi = (e) => {
  if (e.maxWidth !== void 0 && e.maxWidth !== null) {
    const o = (n) => {
      var s, a, i, l, c;
      const r = ((i = (a = (s = e.theme) == null ? void 0 : s.breakpoints) == null ? void 0 : a.values) == null ? void 0 : i[n]) || aa[n];
      return r ? ((c = (l = e.theme) == null ? void 0 : l.breakpoints) == null ? void 0 : c.unit) !== "px" ? {
        maxWidth: `${r}${e.theme.breakpoints.unit}`
      } : {
        maxWidth: r
      } : {
        maxWidth: qt(n)
      };
    };
    return Ut(e, e.maxWidth, o);
  }
  return null;
};
Xi.filterProps = ["maxWidth"];
const eb = gt({
  prop: "minWidth",
  transform: qt
}), tb = gt({
  prop: "height",
  transform: qt
}), ob = gt({
  prop: "maxHeight",
  transform: qt
}), nb = gt({
  prop: "minHeight",
  transform: qt
});
gt({
  prop: "size",
  cssProperty: "width",
  transform: qt
});
gt({
  prop: "size",
  cssProperty: "height",
  transform: qt
});
const rb = gt({
  prop: "boxSizing"
});
pa(Qg, Xi, eb, tb, ob, nb, rb);
const Fr = {
  // borders
  border: {
    themeKey: "borders",
    transform: no
  },
  borderTop: {
    themeKey: "borders",
    transform: no
  },
  borderRight: {
    themeKey: "borders",
    transform: no
  },
  borderBottom: {
    themeKey: "borders",
    transform: no
  },
  borderLeft: {
    themeKey: "borders",
    transform: no
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  outline: {
    themeKey: "borders",
    transform: no
  },
  outlineColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
    style: ua
  },
  // palette
  color: {
    themeKey: "palette",
    transform: Mn
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
    transform: Mn
  },
  backgroundColor: {
    themeKey: "palette",
    transform: Mn
  },
  // spacing
  p: {
    style: dt
  },
  pt: {
    style: dt
  },
  pr: {
    style: dt
  },
  pb: {
    style: dt
  },
  pl: {
    style: dt
  },
  px: {
    style: dt
  },
  py: {
    style: dt
  },
  padding: {
    style: dt
  },
  paddingTop: {
    style: dt
  },
  paddingRight: {
    style: dt
  },
  paddingBottom: {
    style: dt
  },
  paddingLeft: {
    style: dt
  },
  paddingX: {
    style: dt
  },
  paddingY: {
    style: dt
  },
  paddingInline: {
    style: dt
  },
  paddingInlineStart: {
    style: dt
  },
  paddingInlineEnd: {
    style: dt
  },
  paddingBlock: {
    style: dt
  },
  paddingBlockStart: {
    style: dt
  },
  paddingBlockEnd: {
    style: dt
  },
  m: {
    style: ut
  },
  mt: {
    style: ut
  },
  mr: {
    style: ut
  },
  mb: {
    style: ut
  },
  ml: {
    style: ut
  },
  mx: {
    style: ut
  },
  my: {
    style: ut
  },
  margin: {
    style: ut
  },
  marginTop: {
    style: ut
  },
  marginRight: {
    style: ut
  },
  marginBottom: {
    style: ut
  },
  marginLeft: {
    style: ut
  },
  marginX: {
    style: ut
  },
  marginY: {
    style: ut
  },
  marginInline: {
    style: ut
  },
  marginInlineStart: {
    style: ut
  },
  marginInlineEnd: {
    style: ut
  },
  marginBlock: {
    style: ut
  },
  marginBlockStart: {
    style: ut
  },
  marginBlockEnd: {
    style: ut
  },
  // display
  displayPrint: {
    cssProperty: !1,
    transform: (e) => ({
      "@media print": {
        display: e
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: da
  },
  rowGap: {
    style: ma
  },
  columnGap: {
    style: fa
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: "shadows"
  },
  // sizing
  width: {
    transform: qt
  },
  maxWidth: {
    style: Xi
  },
  minWidth: {
    transform: qt
  },
  height: {
    transform: qt
  },
  maxHeight: {
    transform: qt
  },
  minHeight: {
    transform: qt
  },
  boxSizing: {},
  // typography
  font: {
    themeKey: "font"
  },
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: !1,
    themeKey: "typography"
  }
};
function sb(...e) {
  const o = e.reduce((r, s) => r.concat(Object.keys(s)), []), n = new Set(o);
  return e.every((r) => n.size === Object.keys(r).length);
}
function ab(e, o) {
  return typeof e == "function" ? e(o) : e;
}
function ib() {
  function e(n, r, s, a) {
    const i = {
      [n]: r,
      theme: s
    }, l = a[n];
    if (!l)
      return {
        [n]: r
      };
    const {
      cssProperty: c = n,
      themeKey: p,
      transform: u,
      style: f
    } = l;
    if (r == null)
      return null;
    if (p === "typography" && r === "inherit")
      return {
        [n]: r
      };
    const g = Ko(s, p) || {};
    return f ? f(i) : Ut(i, r, (h) => {
      let d = Ls(g, u, h);
      return h === d && typeof h == "string" && (d = Ls(g, u, `${n}${h === "default" ? "" : L(h)}`, h)), c === !1 ? d : {
        [c]: d
      };
    });
  }
  function o(n) {
    const {
      sx: r,
      theme: s = {}
    } = n || {};
    if (!r)
      return null;
    const a = s.unstable_sxConfig ?? Fr;
    function i(l) {
      let c = l;
      if (typeof l == "function")
        c = l(s);
      else if (typeof l != "object")
        return l;
      if (!c)
        return null;
      const p = Ou(s.breakpoints), u = Object.keys(p);
      let f = p;
      return Object.keys(c).forEach((g) => {
        const b = ab(c[g], s);
        if (b != null)
          if (typeof b == "object")
            if (a[g])
              f = xr(f, e(g, b, s, a));
            else {
              const h = Ut({
                theme: s
              }, b, (d) => ({
                [g]: d
              }));
              sb(h, b) ? f[g] = o({
                sx: b,
                theme: s
              }) : f = xr(f, h);
            }
          else
            f = xr(f, e(g, b, s, a));
      }), mg(s, Eu(u, f));
    }
    return Array.isArray(r) ? r.map(i) : i(r);
  }
  return o;
}
const Qo = ib();
Qo.filterProps = ["sx"];
function lb(e, o) {
  var r;
  const n = this;
  if (n.vars) {
    if (!((r = n.colorSchemes) != null && r[e]) || typeof n.getColorSchemeSelector != "function")
      return {};
    let s = n.getColorSchemeSelector(e);
    return s === "&" ? o : ((s.includes("data-") || s.includes(".")) && (s = `*:where(${s.replace(/\s*&$/, "")}) &`), {
      [s]: o
    });
  }
  return n.palette.mode === e ? o : {};
}
function Gn(e = {}, ...o) {
  const {
    breakpoints: n = {},
    palette: r = {},
    spacing: s,
    shape: a = {},
    ...i
  } = e, l = wu(n), c = Ki(s);
  let p = Ct({
    breakpoints: l,
    direction: "ltr",
    components: {},
    // Inject component definitions.
    palette: {
      mode: "light",
      ...r
    },
    spacing: c,
    shape: {
      ...yg,
      ...a
    }
  }, i);
  return p = hg(p), p.applyStyles = lb, p = o.reduce((u, f) => Ct(u, f), p), p.unstable_sxConfig = {
    ...Fr,
    ...i == null ? void 0 : i.unstable_sxConfig
  }, p.unstable_sx = function(f) {
    return Qo({
      sx: f,
      theme: this
    });
  }, p;
}
function cb(e) {
  return Object.keys(e).length === 0;
}
function Ji(e = null) {
  const o = m.useContext(Dr);
  return !o || cb(o) ? e : o;
}
const pb = Gn();
function Vr(e = pb) {
  return Ji(e);
}
function $u({
  styles: e,
  themeId: o,
  defaultTheme: n = {}
}) {
  const r = Vr(n), s = typeof e == "function" ? e(o && r[o] || r) : e;
  return /* @__PURE__ */ x.jsx(Yi, {
    styles: s
  });
}
process.env.NODE_ENV !== "production" && ($u.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  defaultTheme: t.object,
  /**
   * @ignore
   */
  styles: t.oneOfType([t.array, t.func, t.number, t.object, t.string, t.bool]),
  /**
   * @ignore
   */
  themeId: t.string
});
const ub = (e) => {
  var r;
  const o = {
    systemProps: {},
    otherProps: {}
  }, n = ((r = e == null ? void 0 : e.theme) == null ? void 0 : r.unstable_sxConfig) ?? Fr;
  return Object.keys(e).forEach((s) => {
    n[s] ? o.systemProps[s] = e[s] : o.otherProps[s] = e[s];
  }), o;
};
function _r(e) {
  const {
    sx: o,
    ...n
  } = e, {
    systemProps: r,
    otherProps: s
  } = ub(n);
  let a;
  return Array.isArray(o) ? a = [r, ...o] : typeof o == "function" ? a = (...i) => {
    const l = o(...i);
    return To(l) ? {
      ...r,
      ...l
    } : r;
  } : a = {
    ...r,
    ...o
  }, {
    ...s,
    sx: a
  };
}
const hc = (e) => e, db = () => {
  let e = hc;
  return {
    configure(o) {
      e = o;
    },
    generate(o) {
      return e(o);
    },
    reset() {
      e = hc;
    }
  };
}, Zi = db();
function ku(e) {
  var o, n, r = "";
  if (typeof e == "string" || typeof e == "number") r += e;
  else if (typeof e == "object") if (Array.isArray(e)) {
    var s = e.length;
    for (o = 0; o < s; o++) e[o] && (n = ku(e[o])) && (r && (r += " "), r += n);
  } else for (n in e) e[n] && (r && (r += " "), r += n);
  return r;
}
function W() {
  for (var e, o, n = 0, r = "", s = arguments.length; n < s; n++) (e = arguments[n]) && (o = ku(e)) && (r && (r += " "), r += o);
  return r;
}
function fb(e = {}) {
  const {
    themeId: o,
    defaultTheme: n,
    defaultClassName: r = "MuiBox-root",
    generateClassName: s
  } = e, a = Tu("div", {
    shouldForwardProp: (l) => l !== "theme" && l !== "sx" && l !== "as"
  })(Qo);
  return /* @__PURE__ */ m.forwardRef(function(c, p) {
    const u = Vr(n), {
      className: f,
      component: g = "div",
      ...b
    } = _r(c);
    return /* @__PURE__ */ x.jsx(a, {
      as: g,
      ref: p,
      className: W(f, s ? s(r) : r),
      theme: o && u[o] || u,
      ...b
    });
  });
}
const mb = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};
function ae(e, o, n = "Mui") {
  const r = mb[o];
  return r ? `${n}-${r}` : `${Zi.generate(e)}-${o}`;
}
function le(e, o, n = "Mui") {
  const r = {};
  return o.forEach((s) => {
    r[s] = ae(e, s, n);
  }), r;
}
function Pu(e, o = "") {
  return e.displayName || e.name || o;
}
function yc(e, o, n) {
  const r = Pu(o);
  return e.displayName || (r !== "" ? `${n}(${r})` : n);
}
function Nu(e) {
  if (e != null) {
    if (typeof e == "string")
      return e;
    if (typeof e == "function")
      return Pu(e, "Component");
    if (typeof e == "object")
      switch (e.$$typeof) {
        case Ft.ForwardRef:
          return yc(e, e.render, "ForwardRef");
        case Ft.Memo:
          return yc(e, e.type, "memo");
        default:
          return;
      }
  }
}
function Iu(e) {
  const {
    variants: o,
    ...n
  } = e, r = {
    variants: o,
    style: uc(n),
    isProcessed: !0
  };
  return r.style === n || o && o.forEach((s) => {
    typeof s.style != "function" && (s.style = uc(s.style));
  }), r;
}
const gb = Gn();
function Ha(e) {
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
function bb(e) {
  return e ? (o, n) => n[e] : null;
}
function hb(e, o, n) {
  e.theme = xb(e.theme) ? n : e.theme[o] || e.theme;
}
function Ps(e, o) {
  const n = typeof o == "function" ? o(e) : o;
  if (Array.isArray(n))
    return n.flatMap((r) => Ps(e, r));
  if (Array.isArray(n == null ? void 0 : n.variants)) {
    let r;
    if (n.isProcessed)
      r = n.style;
    else {
      const {
        variants: s,
        ...a
      } = n;
      r = a;
    }
    return ju(e, n.variants, [r]);
  }
  return n != null && n.isProcessed ? n.style : n;
}
function ju(e, o, n = []) {
  var s;
  let r;
  e: for (let a = 0; a < o.length; a += 1) {
    const i = o[a];
    if (typeof i.props == "function") {
      if (r ?? (r = {
        ...e,
        ...e.ownerState,
        ownerState: e.ownerState
      }), !i.props(r))
        continue;
    } else
      for (const l in i.props)
        if (e[l] !== i.props[l] && ((s = e.ownerState) == null ? void 0 : s[l]) !== i.props[l])
          continue e;
    typeof i.style == "function" ? (r ?? (r = {
      ...e,
      ...e.ownerState,
      ownerState: e.ownerState
    }), n.push(i.style(r))) : n.push(i.style);
  }
  return n;
}
function Mu(e = {}) {
  const {
    themeId: o,
    defaultTheme: n = gb,
    rootShouldForwardProp: r = Ha,
    slotShouldForwardProp: s = Ha
  } = e;
  function a(l) {
    hb(l, o, n);
  }
  return (l, c = {}) => {
    cg(l, (w) => w.filter((E) => E !== Qo));
    const {
      name: p,
      slot: u,
      skipVariantsResolver: f,
      skipSx: g,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      overridesResolver: b = bb(Au(u)),
      ...h
    } = c, d = f !== void 0 ? f : (
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      u && u !== "Root" && u !== "root" || !1
    ), y = g || !1;
    let S = Ha;
    u === "Root" || u === "root" ? S = r : u ? S = s : Sb(l) && (S = void 0);
    const O = Tu(l, {
      shouldForwardProp: S,
      label: vb(p, u),
      ...h
    }), C = (w) => {
      if (typeof w == "function" && w.__emotion_real !== w)
        return function($) {
          return Ps($, w);
        };
      if (To(w)) {
        const E = Iu(w);
        return E.variants ? function(P) {
          return Ps(P, E);
        } : E.style;
      }
      return w;
    }, T = (...w) => {
      const E = [], $ = w.map(C), P = [];
      if (E.push(a), p && b && P.push(function(A) {
        var B, _;
        const k = (_ = (B = A.theme.components) == null ? void 0 : B[p]) == null ? void 0 : _.styleOverrides;
        if (!k)
          return null;
        const D = {};
        for (const H in k)
          D[H] = Ps(A, k[H]);
        return b(A, D);
      }), p && !d && P.push(function(A) {
        var D, B;
        const j = A.theme, k = (B = (D = j == null ? void 0 : j.components) == null ? void 0 : D[p]) == null ? void 0 : B.variants;
        return k ? ju(A, k) : null;
      }), y || P.push(Qo), Array.isArray($[0])) {
        const R = $.shift(), A = new Array(E.length).fill(""), j = new Array(P.length).fill("");
        let k;
        k = [...A, ...R, ...j], k.raw = [...A, ...R.raw, ...j], E.unshift(k);
      }
      const N = [...E, ...$, ...P], v = O(...N);
      return l.muiName && (v.muiName = l.muiName), process.env.NODE_ENV !== "production" && (v.displayName = yb(p, u, l)), v;
    };
    return O.withConfig && (T.withConfig = O.withConfig), T;
  };
}
function yb(e, o, n) {
  return e ? `${e}${L(o || "")}` : `Styled(${Nu(n)})`;
}
function vb(e, o) {
  let n;
  return process.env.NODE_ENV !== "production" && e && (n = `${e}-${Au(o || "Root")}`), n;
}
function xb(e) {
  for (const o in e)
    return !1;
  return !0;
}
function Sb(e) {
  return typeof e == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  e.charCodeAt(0) > 96;
}
function Au(e) {
  return e && e.charAt(0).toLowerCase() + e.slice(1);
}
const Qi = Mu();
function Dn(e, o) {
  const n = {
    ...o
  };
  for (const r in e)
    if (Object.prototype.hasOwnProperty.call(e, r)) {
      const s = r;
      if (s === "components" || s === "slots")
        n[s] = {
          ...e[s],
          ...n[s]
        };
      else if (s === "componentsProps" || s === "slotProps") {
        const a = e[s], i = o[s];
        if (!i)
          n[s] = a || {};
        else if (!a)
          n[s] = i;
        else {
          n[s] = {
            ...i
          };
          for (const l in a)
            if (Object.prototype.hasOwnProperty.call(a, l)) {
              const c = l;
              n[s][c] = Dn(a[c], i[c]);
            }
        }
      } else n[s] === void 0 && (n[s] = e[s]);
    }
  return n;
}
function el(e) {
  const {
    theme: o,
    name: n,
    props: r
  } = e;
  return !o || !o.components || !o.components[n] || !o.components[n].defaultProps ? r : Dn(o.components[n].defaultProps, r);
}
function ga({
  props: e,
  name: o,
  defaultTheme: n,
  themeId: r
}) {
  let s = Vr(n);
  return r && (s = s[r] || s), el({
    theme: s,
    name: o,
    props: e
  });
}
const Rt = typeof window < "u" ? m.useLayoutEffect : m.useEffect;
function Tb(e, o, n, r, s) {
  const [a, i] = m.useState(() => s && n ? n(e).matches : r ? r(e).matches : o);
  return Rt(() => {
    if (!n)
      return;
    const l = n(e), c = () => {
      i(l.matches);
    };
    return c(), l.addEventListener("change", c), () => {
      l.removeEventListener("change", c);
    };
  }, [e, n]), a;
}
const Cb = {
  ...m
}, Bu = Cb.useSyncExternalStore;
function wb(e, o, n, r, s) {
  const a = m.useCallback(() => o, [o]), i = m.useMemo(() => {
    if (s && n)
      return () => n(e).matches;
    if (r !== null) {
      const {
        matches: u
      } = r(e);
      return () => u;
    }
    return a;
  }, [a, e, r, s, n]), [l, c] = m.useMemo(() => {
    if (n === null)
      return [a, () => () => {
      }];
    const u = n(e);
    return [() => u.matches, (f) => (u.addEventListener("change", f), () => {
      u.removeEventListener("change", f);
    })];
  }, [a, n, e]);
  return Bu(c, l, i);
}
function Lu(e = {}) {
  const {
    themeId: o
  } = e;
  return function(r, s = {}) {
    let a = Ji();
    a && o && (a = a[o] || a);
    const i = typeof window < "u" && typeof window.matchMedia < "u", {
      defaultMatches: l = !1,
      matchMedia: c = i ? window.matchMedia : null,
      ssrMatchMedia: p = null,
      noSsr: u = !1
    } = el({
      name: "MuiUseMediaQuery",
      props: s,
      theme: a
    });
    process.env.NODE_ENV !== "production" && typeof r == "function" && a === null && console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join(`
`));
    let f = typeof r == "function" ? r(a) : r;
    f = f.replace(/^@media( ?)/m, "");
    const b = (Bu !== void 0 ? wb : Tb)(f, l, c, p, u);
    return process.env.NODE_ENV !== "production" && m.useDebugValue({
      query: f,
      match: b
    }), b;
  };
}
Lu();
function qo(e, o = Number.MIN_SAFE_INTEGER, n = Number.MAX_SAFE_INTEGER) {
  return Math.max(o, Math.min(e, n));
}
function tl(e, o = 0, n = 1) {
  return process.env.NODE_ENV !== "production" && (e < o || e > n) && console.error(`MUI: The value provided ${e} is out of range [${o}, ${n}].`), qo(e, o, n);
}
function Ob(e) {
  e = e.slice(1);
  const o = new RegExp(`.{1,${e.length >= 6 ? 2 : 1}}`, "g");
  let n = e.match(o);
  return n && n[0].length === 1 && (n = n.map((r) => r + r)), process.env.NODE_ENV !== "production" && e.length !== e.trim().length && console.error(`MUI: The color: "${e}" is invalid. Make sure the color input doesn't contain leading/trailing space.`), n ? `rgb${n.length === 4 ? "a" : ""}(${n.map((r, s) => s < 3 ? parseInt(r, 16) : Math.round(parseInt(r, 16) / 255 * 1e3) / 1e3).join(", ")})` : "";
}
function Eb(e) {
  const o = e.toString(16);
  return o.length === 1 ? `0${o}` : o;
}
function Do(e) {
  if (e.type)
    return e;
  if (e.charAt(0) === "#")
    return Do(Ob(e));
  const o = e.indexOf("("), n = e.substring(0, o);
  if (!["rgb", "rgba", "hsl", "hsla", "color"].includes(n))
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${e}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : zt(9, e));
  let r = e.substring(o + 1, e.length - 1), s;
  if (n === "color") {
    if (r = r.split(" "), s = r.shift(), r.length === 4 && r[3].charAt(0) === "/" && (r[3] = r[3].slice(1)), !["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].includes(s))
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${s}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : zt(10, s));
  } else
    r = r.split(",");
  return r = r.map((a) => parseFloat(a)), {
    type: n,
    values: r,
    colorSpace: s
  };
}
const Rb = (e) => {
  const o = Do(e);
  return o.values.slice(0, 3).map((n, r) => o.type.includes("hsl") && r !== 0 ? `${n}%` : n).join(" ");
}, gr = (e, o) => {
  try {
    return Rb(e);
  } catch {
    return o && process.env.NODE_ENV !== "production" && console.warn(o), e;
  }
};
function ba(e) {
  const {
    type: o,
    colorSpace: n
  } = e;
  let {
    values: r
  } = e;
  return o.includes("rgb") ? r = r.map((s, a) => a < 3 ? parseInt(s, 10) : s) : o.includes("hsl") && (r[1] = `${r[1]}%`, r[2] = `${r[2]}%`), o.includes("color") ? r = `${n} ${r.join(" ")}` : r = `${r.join(", ")}`, `${o}(${r})`;
}
function aP(e) {
  if (e.startsWith("#"))
    return e;
  const {
    values: o
  } = Do(e);
  return `#${o.map((n, r) => Eb(r === 3 ? Math.round(255 * n) : n)).join("")}`;
}
function Du(e) {
  e = Do(e);
  const {
    values: o
  } = e, n = o[0], r = o[1] / 100, s = o[2] / 100, a = r * Math.min(s, 1 - s), i = (p, u = (p + n / 30) % 12) => s - a * Math.max(Math.min(u - 3, 9 - u, 1), -1);
  let l = "rgb";
  const c = [Math.round(i(0) * 255), Math.round(i(8) * 255), Math.round(i(4) * 255)];
  return e.type === "hsla" && (l += "a", c.push(o[3])), ba({
    type: l,
    values: c
  });
}
function hi(e) {
  e = Do(e);
  let o = e.type === "hsl" || e.type === "hsla" ? Do(Du(e)).values : e.values;
  return o = o.map((n) => (e.type !== "color" && (n /= 255), n <= 0.03928 ? n / 12.92 : ((n + 0.055) / 1.055) ** 2.4)), Number((0.2126 * o[0] + 0.7152 * o[1] + 0.0722 * o[2]).toFixed(3));
}
function vc(e, o) {
  const n = hi(e), r = hi(o);
  return (Math.max(n, r) + 0.05) / (Math.min(n, r) + 0.05);
}
function Ne(e, o) {
  return e = Do(e), o = tl(o), (e.type === "rgb" || e.type === "hsl") && (e.type += "a"), e.type === "color" ? e.values[3] = `/${o}` : e.values[3] = o, ba(e);
}
function ss(e, o, n) {
  try {
    return Ne(e, o);
  } catch {
    return e;
  }
}
function Eo(e, o) {
  if (e = Do(e), o = tl(o), e.type.includes("hsl"))
    e.values[2] *= 1 - o;
  else if (e.type.includes("rgb") || e.type.includes("color"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] *= 1 - o;
  return ba(e);
}
function rt(e, o, n) {
  try {
    return Eo(e, o);
  } catch {
    return e;
  }
}
function Ro(e, o) {
  if (e = Do(e), o = tl(o), e.type.includes("hsl"))
    e.values[2] += (100 - e.values[2]) * o;
  else if (e.type.includes("rgb"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] += (255 - e.values[n]) * o;
  else if (e.type.includes("color"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] += (1 - e.values[n]) * o;
  return ba(e);
}
function st(e, o, n) {
  try {
    return Ro(e, o);
  } catch {
    return e;
  }
}
function kr(e, o = 0.15) {
  return hi(e) > 0.5 ? Eo(e, o) : Ro(e, o);
}
function as(e, o, n) {
  try {
    return kr(e, o);
  } catch {
    return e;
  }
}
function xt(e, o) {
  return process.env.NODE_ENV === "production" ? () => null : function(...r) {
    return e(...r) || o(...r);
  };
}
function $b(e) {
  const {
    prototype: o = {}
  } = e;
  return !!o.isReactComponent;
}
function zu(e, o, n, r, s) {
  const a = e[o], i = s || o;
  if (a == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for Emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let l;
  const c = a.type;
  return typeof c == "function" && !$b(c) && (l = "Did you accidentally use a plain function component for an element instead?"), l !== void 0 ? new Error(`Invalid ${r} \`${i}\` supplied to \`${n}\`. Expected an element that can hold a ref. ${l} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
const Fo = xt(t.element, zu);
Fo.isRequired = xt(t.element.isRequired, zu);
function kb(e) {
  const {
    prototype: o = {}
  } = e;
  return !!o.isReactComponent;
}
function Pb(e, o, n, r, s) {
  const a = e[o], i = s || o;
  if (a == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let l;
  return typeof a == "function" && !kb(a) && (l = "Did you accidentally provide a plain function component instead?"), l !== void 0 ? new Error(`Invalid ${r} \`${i}\` supplied to \`${n}\`. Expected an element type that can hold a ref. ${l} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
const en = xt(t.elementType, Pb), Nb = "exact-prop: ​";
function Cn(e) {
  return process.env.NODE_ENV === "production" ? e : {
    ...e,
    [Nb]: (o) => {
      const n = Object.keys(o).filter((r) => !e.hasOwnProperty(r));
      return n.length > 0 ? new Error(`The following props are not supported: ${n.map((r) => `\`${r}\``).join(", ")}. Please remove them.`) : null;
    }
  };
}
function $o(e, o, n, r, s) {
  if (process.env.NODE_ENV === "production")
    return null;
  const a = e[o], i = s || o;
  return a == null ? null : a && a.nodeType !== 1 ? new Error(`Invalid ${r} \`${i}\` supplied to \`${n}\`. Expected an HTMLElement.`) : null;
}
const Nt = t.oneOfType([t.func, t.object]);
function yi(...e) {
  return e.reduce((o, n) => n == null ? o : function(...s) {
    o.apply(this, s), n.apply(this, s);
  }, () => {
  });
}
function Wr(e, o = 166) {
  let n;
  function r(...s) {
    const a = () => {
      e.apply(this, s);
    };
    clearTimeout(n), n = setTimeout(a, o);
  }
  return r.clear = () => {
    clearTimeout(n);
  }, r;
}
function iP(e, o) {
  return process.env.NODE_ENV === "production" ? () => null : (n, r, s, a, i) => {
    const l = s || "<<anonymous>>", c = i || r;
    return typeof n[r] < "u" ? new Error(`The ${a} \`${c}\` of \`${l}\` is deprecated. ${o}`) : null;
  };
}
function Bo(e, o) {
  var n, r, s;
  return /* @__PURE__ */ m.isValidElement(e) && o.indexOf(
    // For server components `muiName` is avaialble in element.type._payload.value.muiName
    // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
    // eslint-disable-next-line no-underscore-dangle
    e.type.muiName ?? ((s = (r = (n = e.type) == null ? void 0 : n._payload) == null ? void 0 : r.value) == null ? void 0 : s.muiName)
  ) !== -1;
}
function lt(e) {
  return e && e.ownerDocument || document;
}
function Pt(e) {
  return lt(e).defaultView || window;
}
function Fu(e, o) {
  if (process.env.NODE_ENV === "production")
    return () => null;
  const n = o ? {
    ...o.propTypes
  } : null;
  return (s) => (a, i, l, c, p, ...u) => {
    const f = p || i, g = n == null ? void 0 : n[f];
    if (g) {
      const b = g(a, i, l, c, p, ...u);
      if (b)
        return b;
    }
    return typeof a[i] < "u" && !a[s] ? new Error(`The prop \`${f}\` of \`${e}\` can only be used together with the \`${s}\` prop.`) : null;
  };
}
function Ds(e, o) {
  typeof e == "function" ? e(o) : e && (e.current = o);
}
let xc = 0;
function Ib(e) {
  const [o, n] = m.useState(e), r = e || o;
  return m.useEffect(() => {
    o == null && (xc += 1, n(`mui-${xc}`));
  }, [o]), r;
}
const jb = {
  ...m
}, Sc = jb.useId;
function io(e) {
  if (Sc !== void 0) {
    const o = Sc();
    return e ?? o;
  }
  return Ib(e);
}
function ol(e, o, n, r, s) {
  if (process.env.NODE_ENV === "production")
    return null;
  const a = s || o;
  return typeof e[o] < "u" ? new Error(`The prop \`${a}\` is not supported. Please remove it.`) : null;
}
function Kt({
  controlled: e,
  default: o,
  name: n,
  state: r = "value"
}) {
  const {
    current: s
  } = m.useRef(e !== void 0), [a, i] = m.useState(o), l = s ? e : a;
  if (process.env.NODE_ENV !== "production") {
    m.useEffect(() => {
      s !== (e !== void 0) && console.error([`MUI: A component is changing the ${s ? "" : "un"}controlled ${r} state of ${n} to be ${s ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${n} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
    }, [r, n, e]);
    const {
      current: p
    } = m.useRef(o);
    m.useEffect(() => {
      !s && !Object.is(p, o) && console.error([`MUI: A component is changing the default ${r} state of an uncontrolled ${n} after being initialized. To suppress this warning opt to use a controlled ${n}.`].join(`
`));
    }, [JSON.stringify(o)]);
  }
  const c = m.useCallback((p) => {
    s || i(p);
  }, []);
  return [l, c];
}
function pt(e) {
  const o = m.useRef(e);
  return Rt(() => {
    o.current = e;
  }), m.useRef((...n) => (
    // @ts-expect-error hide `this`
    (0, o.current)(...n)
  )).current;
}
function Ye(...e) {
  return m.useMemo(() => e.every((o) => o == null) ? null : (o) => {
    e.forEach((n) => {
      Ds(n, o);
    });
  }, e);
}
const Tc = {};
function Vu(e, o) {
  const n = m.useRef(Tc);
  return n.current === Tc && (n.current = e(o)), n;
}
const Mb = [];
function Ab(e) {
  m.useEffect(e, Mb);
}
class ha {
  constructor() {
    tr(this, "currentId", null);
    tr(this, "clear", () => {
      this.currentId !== null && (clearTimeout(this.currentId), this.currentId = null);
    });
    tr(this, "disposeEffect", () => this.clear);
  }
  static create() {
    return new ha();
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(o, n) {
    this.clear(), this.currentId = setTimeout(() => {
      this.currentId = null, n();
    }, o);
  }
}
function Ao() {
  const e = Vu(ha.create).current;
  return Ab(e.disposeEffect), e;
}
function ko(e) {
  try {
    return e.matches(":focus-visible");
  } catch {
    process.env.NODE_ENV !== "production" && !/jsdom/.test(window.navigator.userAgent) && console.warn(["MUI: The `:focus-visible` pseudo class is not supported in this browser.", "Some components rely on this feature to work properly."].join(`
`));
  }
  return !1;
}
function _u(e = window) {
  const o = e.document.documentElement.clientWidth;
  return e.innerWidth - o;
}
const nl = (e) => {
  const o = m.useRef({});
  return m.useEffect(() => {
    o.current = e;
  }), o.current;
};
function Wu(e) {
  return m.Children.toArray(e).filter((o) => /* @__PURE__ */ m.isValidElement(o));
}
const Uu = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  whiteSpace: "nowrap",
  width: "1px"
};
function Bb(e) {
  const o = typeof e;
  switch (o) {
    case "number":
      return Number.isNaN(e) ? "NaN" : Number.isFinite(e) ? e !== Math.floor(e) ? "float" : "number" : "Infinity";
    case "object":
      return e === null ? "null" : e.constructor.name;
    default:
      return o;
  }
}
function Hu(e, o, n, r) {
  const s = e[o];
  if (s == null || !Number.isInteger(s)) {
    const a = Bb(s);
    return new RangeError(`Invalid ${r} \`${o}\` of type \`${a}\` supplied to \`${n}\`, expected \`integer\`.`);
  }
  return null;
}
function Gu(e, o, ...n) {
  return e[o] === void 0 ? null : Hu(e, o, ...n);
}
function vi() {
  return null;
}
Gu.isRequired = Hu;
vi.isRequired = vi;
const mt = process.env.NODE_ENV === "production" ? vi : Gu;
function ce(e, o, n = void 0) {
  const r = {};
  for (const s in e) {
    const a = e[s];
    let i = "", l = !0;
    for (let c = 0; c < a.length; c += 1) {
      const p = a[c];
      p && (i += (l === !0 ? "" : " ") + o(p), l = !1, n && n[p] && (i += " " + n[p]));
    }
    r[s] = i;
  }
  return r;
}
function Lb(e) {
  return typeof e == "string";
}
function qu(e, o, n) {
  return e === void 0 || Lb(e) ? o : {
    ...o,
    ownerState: {
      ...o.ownerState,
      ...n
    }
  };
}
function vn(e, o = []) {
  if (e === void 0)
    return {};
  const n = {};
  return Object.keys(e).filter((r) => r.match(/^on[A-Z]/) && typeof e[r] == "function" && !o.includes(r)).forEach((r) => {
    n[r] = e[r];
  }), n;
}
function Cc(e) {
  if (e === void 0)
    return {};
  const o = {};
  return Object.keys(e).filter((n) => !(n.match(/^on[A-Z]/) && typeof e[n] == "function")).forEach((n) => {
    o[n] = e[n];
  }), o;
}
function Yu(e) {
  const {
    getSlotProps: o,
    additionalProps: n,
    externalSlotProps: r,
    externalForwardedProps: s,
    className: a
  } = e;
  if (!o) {
    const b = W(n == null ? void 0 : n.className, a, s == null ? void 0 : s.className, r == null ? void 0 : r.className), h = {
      ...n == null ? void 0 : n.style,
      ...s == null ? void 0 : s.style,
      ...r == null ? void 0 : r.style
    }, d = {
      ...n,
      ...s,
      ...r
    };
    return b.length > 0 && (d.className = b), Object.keys(h).length > 0 && (d.style = h), {
      props: d,
      internalRef: void 0
    };
  }
  const i = vn({
    ...s,
    ...r
  }), l = Cc(r), c = Cc(s), p = o(i), u = W(p == null ? void 0 : p.className, n == null ? void 0 : n.className, a, s == null ? void 0 : s.className, r == null ? void 0 : r.className), f = {
    ...p == null ? void 0 : p.style,
    ...n == null ? void 0 : n.style,
    ...s == null ? void 0 : s.style,
    ...r == null ? void 0 : r.style
  }, g = {
    ...p,
    ...n,
    ...c,
    ...l
  };
  return u.length > 0 && (g.className = u), Object.keys(f).length > 0 && (g.style = f), {
    props: g,
    internalRef: p.ref
  };
}
function Ku(e, o, n) {
  return typeof e == "function" ? e(o, n) : e;
}
function Tt(e) {
  var f;
  const {
    elementType: o,
    externalSlotProps: n,
    ownerState: r,
    skipResolvingSlotProps: s = !1,
    ...a
  } = e, i = s ? {} : Ku(n, r), {
    props: l,
    internalRef: c
  } = Yu({
    ...a,
    externalSlotProps: i
  }), p = Ye(c, i == null ? void 0 : i.ref, (f = e.additionalProps) == null ? void 0 : f.ref);
  return qu(o, {
    ...l,
    ref: p
  }, r);
}
function Vo(e) {
  var o;
  return parseInt(m.version, 10) >= 19 ? ((o = e == null ? void 0 : e.props) == null ? void 0 : o.ref) || null : (e == null ? void 0 : e.ref) || null;
}
const rl = /* @__PURE__ */ m.createContext(null);
process.env.NODE_ENV !== "production" && (rl.displayName = "ThemeContext");
function sl() {
  const e = m.useContext(rl);
  return process.env.NODE_ENV !== "production" && m.useDebugValue(e), e;
}
const Db = typeof Symbol == "function" && Symbol.for, zb = Db ? Symbol.for("mui.nested") : "__THEME_NESTED__";
function Fb(e, o) {
  if (typeof o == "function") {
    const n = o(e);
    return process.env.NODE_ENV !== "production" && (n || console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join(`
`))), n;
  }
  return {
    ...e,
    ...o
  };
}
function zs(e) {
  const {
    children: o,
    theme: n
  } = e, r = sl();
  process.env.NODE_ENV !== "production" && r === null && typeof n == "function" && console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join(`
`));
  const s = m.useMemo(() => {
    const a = r === null ? {
      ...n
    } : Fb(r, n);
    return a != null && (a[zb] = r !== null), a;
  }, [n, r]);
  return /* @__PURE__ */ x.jsx(rl.Provider, {
    value: s,
    children: o
  });
}
process.env.NODE_ENV !== "production" && (zs.propTypes = {
  /**
   * Your component tree.
   */
  children: t.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: t.oneOfType([t.object, t.func]).isRequired
});
process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "production" && (zs.propTypes = Cn(zs.propTypes));
const Xu = /* @__PURE__ */ m.createContext();
function Ju({
  value: e,
  ...o
}) {
  return /* @__PURE__ */ x.jsx(Xu.Provider, {
    value: e ?? !0,
    ...o
  });
}
process.env.NODE_ENV !== "production" && (Ju.propTypes = {
  children: t.node,
  value: t.bool
});
const go = () => m.useContext(Xu) ?? !1, Zu = /* @__PURE__ */ m.createContext(void 0);
function Qu({
  value: e,
  children: o
}) {
  return /* @__PURE__ */ x.jsx(Zu.Provider, {
    value: e,
    children: o
  });
}
process.env.NODE_ENV !== "production" && (Qu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.node,
  /**
   * @ignore
   */
  value: t.object
});
function Vb(e) {
  const {
    theme: o,
    name: n,
    props: r
  } = e;
  if (!o || !o.components || !o.components[n])
    return r;
  const s = o.components[n];
  return s.defaultProps ? Dn(s.defaultProps, r) : !s.styleOverrides && !s.variants ? Dn(s, r) : r;
}
function _b({
  props: e,
  name: o
}) {
  const n = m.useContext(Zu);
  return Vb({
    props: e,
    name: o,
    theme: {
      components: n
    }
  });
}
const wc = {};
function Oc(e, o, n, r = !1) {
  return m.useMemo(() => {
    const s = e && o[e] || o;
    if (typeof n == "function") {
      const a = n(s), i = e ? {
        ...o,
        [e]: a
      } : a;
      return r ? () => i : i;
    }
    return e ? {
      ...o,
      [e]: n
    } : {
      ...o,
      ...n
    };
  }, [e, o, n, r]);
}
function Pr(e) {
  const {
    children: o,
    theme: n,
    themeId: r
  } = e, s = Ji(wc), a = sl() || wc;
  process.env.NODE_ENV !== "production" && (s === null && typeof n == "function" || r && s && !s[r] && typeof n == "function") && console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join(`
`));
  const i = Oc(r, s, n), l = Oc(r, a, n, !0), c = (r ? i[r] : i).direction === "rtl";
  return /* @__PURE__ */ x.jsx(zs, {
    theme: l,
    children: /* @__PURE__ */ x.jsx(Dr.Provider, {
      value: i,
      children: /* @__PURE__ */ x.jsx(Ju, {
        value: c,
        children: /* @__PURE__ */ x.jsx(Qu, {
          value: r ? i[r].components : i.components,
          children: o
        })
      })
    })
  });
}
process.env.NODE_ENV !== "production" && (Pr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Your component tree.
   */
  children: t.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: t.oneOfType([t.func, t.object]).isRequired,
  /**
   * The design system's unique id for getting the corresponded theme when there are multiple design systems.
   */
  themeId: t.string
});
process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "production" && (Pr.propTypes = Cn(Pr.propTypes));
const Ec = {
  theme: void 0
};
function Wb(e) {
  let o, n;
  return function(s) {
    let a = o;
    return (a === void 0 || s.theme !== n) && (Ec.theme = s.theme, a = Iu(e(Ec)), o = a, n = s.theme), a;
  };
}
const al = "mode", il = "color-scheme", Ub = "data-color-scheme";
function Hb(e) {
  const {
    defaultMode: o = "system",
    defaultLightColorScheme: n = "light",
    defaultDarkColorScheme: r = "dark",
    modeStorageKey: s = al,
    colorSchemeStorageKey: a = il,
    attribute: i = Ub,
    colorSchemeNode: l = "document.documentElement",
    nonce: c
  } = e || {};
  let p = "", u = i;
  if (i === "class" && (u = ".%s"), i === "data" && (u = "[data-%s]"), u.startsWith(".")) {
    const g = u.substring(1);
    p += `${l}.classList.remove('${g}'.replace('%s', light), '${g}'.replace('%s', dark));
      ${l}.classList.add('${g}'.replace('%s', colorScheme));`;
  }
  const f = u.match(/\[([^\]]+)\]/);
  if (f) {
    const [g, b] = f[1].split("=");
    b || (p += `${l}.removeAttribute('${g}'.replace('%s', light));
      ${l}.removeAttribute('${g}'.replace('%s', dark));`), p += `
      ${l}.setAttribute('${g}'.replace('%s', colorScheme), ${b ? `${b}.replace('%s', colorScheme)` : '""'});`;
  } else
    p += `${l}.setAttribute('${u}', colorScheme);`;
  return /* @__PURE__ */ x.jsx("script", {
    suppressHydrationWarning: !0,
    nonce: typeof window > "u" ? c : "",
    dangerouslySetInnerHTML: {
      __html: `(function() {
try {
  let colorScheme = '';
  const mode = localStorage.getItem('${s}') || '${o}';
  const dark = localStorage.getItem('${a}-dark') || '${r}';
  const light = localStorage.getItem('${a}-light') || '${n}';
  if (mode === 'system') {
    // handle system mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = dark
    } else {
      colorScheme = light
    }
  }
  if (mode === 'light') {
    colorScheme = light;
  }
  if (mode === 'dark') {
    colorScheme = dark;
  }
  if (colorScheme) {
    ${p}
  }
} catch(e){}})();`
    }
  }, "mui-color-scheme-init");
}
function Rc(e) {
  if (typeof window < "u" && typeof window.matchMedia == "function" && e === "system")
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
}
function ed(e, o) {
  if (e.mode === "light" || e.mode === "system" && e.systemMode === "light")
    return o("light");
  if (e.mode === "dark" || e.mode === "system" && e.systemMode === "dark")
    return o("dark");
}
function Gb(e) {
  return ed(e, (o) => {
    if (o === "light")
      return e.lightColorScheme;
    if (o === "dark")
      return e.darkColorScheme;
  });
}
function Ga(e, o) {
  if (typeof window > "u")
    return;
  let n;
  try {
    n = localStorage.getItem(e) || void 0, n || localStorage.setItem(e, o);
  } catch {
  }
  return n || o;
}
function qb(e) {
  const {
    defaultMode: o = "light",
    defaultLightColorScheme: n,
    defaultDarkColorScheme: r,
    supportedColorSchemes: s = [],
    modeStorageKey: a = al,
    colorSchemeStorageKey: i = il,
    storageWindow: l = typeof window > "u" ? void 0 : window,
    noSsr: c = !1
  } = e, p = s.join(","), u = s.length > 1, [f, g] = m.useState(() => {
    const T = Ga(a, o), w = Ga(`${i}-light`, n), E = Ga(`${i}-dark`, r);
    return {
      mode: T,
      systemMode: Rc(T),
      lightColorScheme: w,
      darkColorScheme: E
    };
  }), [b, h] = m.useState(c || !u);
  m.useEffect(() => {
    h(!0);
  }, []);
  const d = Gb(f), y = m.useCallback((T) => {
    g((w) => {
      if (T === w.mode)
        return w;
      const E = T ?? o;
      try {
        localStorage.setItem(a, E);
      } catch {
      }
      return {
        ...w,
        mode: E,
        systemMode: Rc(E)
      };
    });
  }, [a, o]), S = m.useCallback((T) => {
    T ? typeof T == "string" ? T && !p.includes(T) ? console.error(`\`${T}\` does not exist in \`theme.colorSchemes\`.`) : g((w) => {
      const E = {
        ...w
      };
      return ed(w, ($) => {
        try {
          localStorage.setItem(`${i}-${$}`, T);
        } catch {
        }
        $ === "light" && (E.lightColorScheme = T), $ === "dark" && (E.darkColorScheme = T);
      }), E;
    }) : g((w) => {
      const E = {
        ...w
      }, $ = T.light === null ? n : T.light, P = T.dark === null ? r : T.dark;
      if ($)
        if (!p.includes($))
          console.error(`\`${$}\` does not exist in \`theme.colorSchemes\`.`);
        else {
          E.lightColorScheme = $;
          try {
            localStorage.setItem(`${i}-light`, $);
          } catch {
          }
        }
      if (P)
        if (!p.includes(P))
          console.error(`\`${P}\` does not exist in \`theme.colorSchemes\`.`);
        else {
          E.darkColorScheme = P;
          try {
            localStorage.setItem(`${i}-dark`, P);
          } catch {
          }
        }
      return E;
    }) : g((w) => {
      try {
        localStorage.setItem(`${i}-light`, n), localStorage.setItem(`${i}-dark`, r);
      } catch {
      }
      return {
        ...w,
        lightColorScheme: n,
        darkColorScheme: r
      };
    });
  }, [p, i, n, r]), O = m.useCallback((T) => {
    f.mode === "system" && g((w) => {
      const E = T != null && T.matches ? "dark" : "light";
      return w.systemMode === E ? w : {
        ...w,
        systemMode: E
      };
    });
  }, [f.mode]), C = m.useRef(O);
  return C.current = O, m.useEffect(() => {
    if (typeof window.matchMedia != "function" || !u)
      return;
    const T = (...E) => C.current(...E), w = window.matchMedia("(prefers-color-scheme: dark)");
    return w.addListener(T), T(w), () => {
      w.removeListener(T);
    };
  }, [u]), m.useEffect(() => {
    if (l && u) {
      const T = (w) => {
        const E = w.newValue;
        typeof w.key == "string" && w.key.startsWith(i) && (!E || p.match(E)) && (w.key.endsWith("light") && S({
          light: E
        }), w.key.endsWith("dark") && S({
          dark: E
        })), w.key === a && (!E || ["light", "dark", "system"].includes(E)) && y(E || o);
      };
      return l.addEventListener("storage", T), () => {
        l.removeEventListener("storage", T);
      };
    }
  }, [S, y, a, i, p, o, l, u]), {
    ...f,
    mode: b ? f.mode : void 0,
    systemMode: b ? f.systemMode : void 0,
    colorScheme: b ? d : void 0,
    setMode: y,
    setColorScheme: S
  };
}
const Yb = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
function Kb(e) {
  const {
    themeId: o,
    /**
     * This `theme` object needs to follow a certain structure to
     * be used correctly by the finel `CssVarsProvider`. It should have a
     * `colorSchemes` key with the light and dark (and any other) palette.
     * It should also ideally have a vars object created using `prepareCssVars`.
     */
    theme: n = {},
    modeStorageKey: r = al,
    colorSchemeStorageKey: s = il,
    disableTransitionOnChange: a = !1,
    defaultColorScheme: i,
    resolveTheme: l
  } = e, c = {
    allColorSchemes: [],
    colorScheme: void 0,
    darkColorScheme: void 0,
    lightColorScheme: void 0,
    mode: void 0,
    setColorScheme: () => {
    },
    setMode: () => {
    },
    systemMode: void 0
  }, p = /* @__PURE__ */ m.createContext(void 0);
  process.env.NODE_ENV !== "production" && (p.displayName = "ColorSchemeContext");
  const u = () => m.useContext(p) || c, f = {}, g = {};
  function b(S) {
    var xe, ke, ee, ue;
    const {
      children: O,
      theme: C,
      modeStorageKey: T = r,
      colorSchemeStorageKey: w = s,
      disableTransitionOnChange: E = a,
      storageWindow: $ = typeof window > "u" ? void 0 : window,
      documentNode: P = typeof document > "u" ? void 0 : document,
      colorSchemeNode: N = typeof document > "u" ? void 0 : document.documentElement,
      disableNestedContext: v = !1,
      disableStyleSheetGeneration: R = !1,
      defaultMode: A = "system",
      noSsr: j
    } = S, k = m.useRef(!1), D = sl(), B = m.useContext(p), _ = !!B && !v, H = m.useMemo(() => C || (typeof n == "function" ? n() : n), [C]), U = H[o], F = U || H, {
      colorSchemes: V = f,
      components: me = g,
      cssVarPrefix: G
    } = F, X = Object.keys(V).filter((te) => !!V[te]).join(","), Y = m.useMemo(() => X.split(","), [X]), q = typeof i == "string" ? i : i.light, ie = typeof i == "string" ? i : i.dark, K = V[q] && V[ie] ? A : ((ke = (xe = V[F.defaultColorScheme]) == null ? void 0 : xe.palette) == null ? void 0 : ke.mode) || ((ee = F.palette) == null ? void 0 : ee.mode), {
      mode: de,
      setMode: oe,
      systemMode: he,
      lightColorScheme: z,
      darkColorScheme: be,
      colorScheme: ye,
      setColorScheme: Pe
    } = qb({
      supportedColorSchemes: Y,
      defaultLightColorScheme: q,
      defaultDarkColorScheme: ie,
      modeStorageKey: T,
      colorSchemeStorageKey: w,
      defaultMode: K,
      storageWindow: $,
      noSsr: j
    });
    let Te = de, Z = ye;
    _ && (Te = B.mode, Z = B.colorScheme);
    const $e = m.useMemo(() => {
      var ge;
      const te = Z || F.defaultColorScheme, we = ((ge = F.generateThemeVars) == null ? void 0 : ge.call(F)) || F.vars, Ce = {
        ...F,
        components: me,
        colorSchemes: V,
        cssVarPrefix: G,
        vars: we
      };
      if (typeof Ce.generateSpacing == "function" && (Ce.spacing = Ce.generateSpacing()), te) {
        const ve = V[te];
        ve && typeof ve == "object" && Object.keys(ve).forEach((Be) => {
          ve[Be] && typeof ve[Be] == "object" ? Ce[Be] = {
            ...Ce[Be],
            ...ve[Be]
          } : Ce[Be] = ve[Be];
        });
      }
      return l ? l(Ce) : Ce;
    }, [F, Z, me, V, G]), Oe = F.colorSchemeSelector;
    Rt(() => {
      if (Z && N && Oe && Oe !== "media") {
        const te = Oe;
        let we = Oe;
        if (te === "class" && (we = ".%s"), te === "data" && (we = "[data-%s]"), te != null && te.startsWith("data-") && !te.includes("%s") && (we = `[${te}="%s"]`), we.startsWith("."))
          N.classList.remove(...Y.map((Ce) => we.substring(1).replace("%s", Ce))), N.classList.add(we.substring(1).replace("%s", Z));
        else {
          const Ce = we.replace("%s", Z).match(/\[([^\]]+)\]/);
          if (Ce) {
            const [ge, ve] = Ce[1].split("=");
            ve || Y.forEach((Be) => {
              N.removeAttribute(ge.replace(Z, Be));
            }), N.setAttribute(ge, ve ? ve.replace(/"|'/g, "") : "");
          } else
            N.setAttribute(we, Z);
        }
      }
    }, [Z, Oe, N, Y]), m.useEffect(() => {
      let te;
      if (E && k.current && P) {
        const we = P.createElement("style");
        we.appendChild(P.createTextNode(Yb)), P.head.appendChild(we), window.getComputedStyle(P.body), te = setTimeout(() => {
          P.head.removeChild(we);
        }, 1);
      }
      return () => {
        clearTimeout(te);
      };
    }, [Z, E, P]), m.useEffect(() => (k.current = !0, () => {
      k.current = !1;
    }), []);
    const Me = m.useMemo(() => ({
      allColorSchemes: Y,
      colorScheme: Z,
      darkColorScheme: be,
      lightColorScheme: z,
      mode: Te,
      setColorScheme: Pe,
      setMode: process.env.NODE_ENV === "production" ? oe : (te) => {
        $e.colorSchemeSelector === "media" && console.error(["MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).", "To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.", "To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually"].join(`
`)), oe(te);
      },
      systemMode: he
    }), [Y, Z, be, z, Te, Pe, oe, he, $e.colorSchemeSelector]);
    let I = !0;
    (R || F.cssVariables === !1 || _ && (D == null ? void 0 : D.cssVarPrefix) === G) && (I = !1);
    const J = /* @__PURE__ */ x.jsxs(m.Fragment, {
      children: [/* @__PURE__ */ x.jsx(Pr, {
        themeId: U ? o : void 0,
        theme: $e,
        children: O
      }), I && /* @__PURE__ */ x.jsx(Yi, {
        styles: ((ue = $e.generateStyleSheets) == null ? void 0 : ue.call($e)) || []
      })]
    });
    return _ ? J : /* @__PURE__ */ x.jsx(p.Provider, {
      value: Me,
      children: J
    });
  }
  process.env.NODE_ENV !== "production" && (b.propTypes = {
    /**
     * The component tree.
     */
    children: t.node,
    /**
     * The node used to attach the color-scheme attribute
     */
    colorSchemeNode: t.any,
    /**
     * localStorage key used to store `colorScheme`
     */
    colorSchemeStorageKey: t.string,
    /**
     * The default mode when the storage is empty,
     * require the theme to have `colorSchemes` with light and dark.
     */
    defaultMode: t.string,
    /**
     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
     */
    disableNestedContext: t.bool,
    /**
     * If `true`, the style sheet won't be generated.
     *
     * This is useful for controlling nested CssVarsProvider behavior.
     */
    disableStyleSheetGeneration: t.bool,
    /**
     * Disable CSS transitions when switching between modes or color schemes.
     */
    disableTransitionOnChange: t.bool,
    /**
     * The document to attach the attribute to.
     */
    documentNode: t.any,
    /**
     * The key in the local storage used to store current color scheme.
     */
    modeStorageKey: t.string,
    /**
     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.
     * You should use this option in conjuction with `InitColorSchemeScript` component.
     */
    noSsr: t.bool,
    /**
     * The window that attaches the 'storage' event listener.
     * @default window
     */
    storageWindow: t.any,
    /**
     * The calculated theme object that will be passed through context.
     */
    theme: t.object
  });
  const h = typeof i == "string" ? i : i.light, d = typeof i == "string" ? i : i.dark;
  return {
    CssVarsProvider: b,
    useColorScheme: u,
    getInitColorSchemeScript: (S) => Hb({
      colorSchemeStorageKey: s,
      defaultLightColorScheme: h,
      defaultDarkColorScheme: d,
      modeStorageKey: r,
      ...S
    })
  };
}
function Xb(e = "") {
  function o(...r) {
    if (!r.length)
      return "";
    const s = r[0];
    return typeof s == "string" && !s.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/) ? `, var(--${e ? `${e}-` : ""}${s}${o(...r.slice(1))})` : `, ${s}`;
  }
  return (r, ...s) => `var(--${e ? `${e}-` : ""}${r}${o(...s)})`;
}
const $c = (e, o, n, r = []) => {
  let s = e;
  o.forEach((a, i) => {
    i === o.length - 1 ? Array.isArray(s) ? s[Number(a)] = n : s && typeof s == "object" && (s[a] = n) : s && typeof s == "object" && (s[a] || (s[a] = r.includes(a) ? [] : {}), s = s[a]);
  });
}, Jb = (e, o, n) => {
  function r(s, a = [], i = []) {
    Object.entries(s).forEach(([l, c]) => {
      (!n || n && !n([...a, l])) && c != null && (typeof c == "object" && Object.keys(c).length > 0 ? r(c, [...a, l], Array.isArray(c) ? [...i, l] : i) : o([...a, l], c, i));
    });
  }
  r(e);
}, Zb = (e, o) => typeof o == "number" ? ["lineHeight", "fontWeight", "opacity", "zIndex"].some((r) => e.includes(r)) || e[e.length - 1].toLowerCase().includes("opacity") ? o : `${o}px` : o;
function qa(e, o) {
  const {
    prefix: n,
    shouldSkipGeneratingVar: r
  } = o || {}, s = {}, a = {}, i = {};
  return Jb(
    e,
    (l, c, p) => {
      if ((typeof c == "string" || typeof c == "number") && (!r || !r(l, c))) {
        const u = `--${n ? `${n}-` : ""}${l.join("-")}`, f = Zb(l, c);
        Object.assign(s, {
          [u]: f
        }), $c(a, l, `var(${u})`, p), $c(i, l, `var(${u}, ${f})`, p);
      }
    },
    (l) => l[0] === "vars"
    // skip 'vars/*' paths
  ), {
    css: s,
    vars: a,
    varsWithDefaults: i
  };
}
function Qb(e, o = {}) {
  const {
    getSelector: n = y,
    disableCssColorScheme: r,
    colorSchemeSelector: s
  } = o, {
    colorSchemes: a = {},
    components: i,
    defaultColorScheme: l = "light",
    ...c
  } = e, {
    vars: p,
    css: u,
    varsWithDefaults: f
  } = qa(c, o);
  let g = f;
  const b = {}, {
    [l]: h,
    ...d
  } = a;
  if (Object.entries(d || {}).forEach(([C, T]) => {
    const {
      vars: w,
      css: E,
      varsWithDefaults: $
    } = qa(T, o);
    g = Ct(g, $), b[C] = {
      css: E,
      vars: w
    };
  }), h) {
    const {
      css: C,
      vars: T,
      varsWithDefaults: w
    } = qa(h, o);
    g = Ct(g, w), b[l] = {
      css: C,
      vars: T
    };
  }
  function y(C, T) {
    var E, $;
    let w = s;
    if (s === "class" && (w = ".%s"), s === "data" && (w = "[data-%s]"), s != null && s.startsWith("data-") && !s.includes("%s") && (w = `[${s}="%s"]`), C) {
      if (w === "media")
        return e.defaultColorScheme === C ? ":root" : {
          [`@media (prefers-color-scheme: ${(($ = (E = a[C]) == null ? void 0 : E.palette) == null ? void 0 : $.mode) || C})`]: {
            ":root": T
          }
        };
      if (w)
        return e.defaultColorScheme === C ? `:root, ${w.replace("%s", String(C))}` : w.replace("%s", String(C));
    }
    return ":root";
  }
  return {
    vars: g,
    generateThemeVars: () => {
      let C = {
        ...p
      };
      return Object.entries(b).forEach(([, {
        vars: T
      }]) => {
        C = Ct(C, T);
      }), C;
    },
    generateStyleSheets: () => {
      var P, N;
      const C = [], T = e.defaultColorScheme || "light";
      function w(v, R) {
        Object.keys(R).length && C.push(typeof v == "string" ? {
          [v]: {
            ...R
          }
        } : v);
      }
      w(n(void 0, {
        ...u
      }), u);
      const {
        [T]: E,
        ...$
      } = b;
      if (E) {
        const {
          css: v
        } = E, R = (N = (P = a[T]) == null ? void 0 : P.palette) == null ? void 0 : N.mode, A = !r && R ? {
          colorScheme: R,
          ...v
        } : {
          ...v
        };
        w(n(T, {
          ...A
        }), A);
      }
      return Object.entries($).forEach(([v, {
        css: R
      }]) => {
        var k, D;
        const A = (D = (k = a[v]) == null ? void 0 : k.palette) == null ? void 0 : D.mode, j = !r && A ? {
          colorScheme: A,
          ...R
        } : {
          ...R
        };
        w(n(v, {
          ...j
        }), j);
      }), C;
    }
  };
}
function eh(e) {
  return function(n) {
    return e === "media" ? (process.env.NODE_ENV !== "production" && n !== "light" && n !== "dark" && console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${n}'.`), `@media (prefers-color-scheme: ${n})`) : e ? e.startsWith("data-") && !e.includes("%s") ? `[${e}="${n}"] &` : e === "class" ? `.${n} &` : e === "data" ? `[data-${n}] &` : `${e.replace("%s", n)} &` : "&";
  };
}
const th = Gn(), oh = Qi("div", {
  name: "MuiContainer",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`maxWidth${L(String(n.maxWidth))}`], n.fixed && o.fixed, n.disableGutters && o.disableGutters];
  }
}), nh = (e) => ga({
  props: e,
  name: "MuiContainer",
  defaultTheme: th
}), rh = (e, o) => {
  const n = (c) => ae(o, c), {
    classes: r,
    fixed: s,
    disableGutters: a,
    maxWidth: i
  } = e, l = {
    root: ["root", i && `maxWidth${L(String(i))}`, s && "fixed", a && "disableGutters"]
  };
  return ce(l, n, r);
};
function sh(e = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent: o = oh,
    useThemeProps: n = nh,
    componentName: r = "MuiContainer"
  } = e, s = o(({
    theme: i,
    ownerState: l
  }) => ({
    width: "100%",
    marginLeft: "auto",
    boxSizing: "border-box",
    marginRight: "auto",
    ...!l.disableGutters && {
      paddingLeft: i.spacing(2),
      paddingRight: i.spacing(2),
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [i.breakpoints.up("sm")]: {
        paddingLeft: i.spacing(3),
        paddingRight: i.spacing(3)
      }
    }
  }), ({
    theme: i,
    ownerState: l
  }) => l.fixed && Object.keys(i.breakpoints.values).reduce((c, p) => {
    const u = p, f = i.breakpoints.values[u];
    return f !== 0 && (c[i.breakpoints.up(u)] = {
      maxWidth: `${f}${i.breakpoints.unit}`
    }), c;
  }, {}), ({
    theme: i,
    ownerState: l
  }) => ({
    // @ts-ignore module augmentation fails if custom breakpoints are used
    ...l.maxWidth === "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [i.breakpoints.up("xs")]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: Math.max(i.breakpoints.values.xs, 444)
      }
    },
    ...l.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
    l.maxWidth !== "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [i.breakpoints.up(l.maxWidth)]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: `${i.breakpoints.values[l.maxWidth]}${i.breakpoints.unit}`
      }
    }
  })), a = /* @__PURE__ */ m.forwardRef(function(l, c) {
    const p = n(l), {
      className: u,
      component: f = "div",
      disableGutters: g = !1,
      fixed: b = !1,
      maxWidth: h = "lg",
      classes: d,
      ...y
    } = p, S = {
      ...p,
      component: f,
      disableGutters: g,
      fixed: b,
      maxWidth: h
    }, O = rh(S, r);
    return (
      // @ts-ignore theme is injected by the styled util
      /* @__PURE__ */ x.jsx(s, {
        as: f,
        ownerState: S,
        className: W(O.root, u),
        ref: c,
        ...y
      })
    );
  });
  return process.env.NODE_ENV !== "production" && (a.propTypes = {
    children: t.node,
    classes: t.object,
    className: t.string,
    component: t.elementType,
    disableGutters: t.bool,
    fixed: t.bool,
    maxWidth: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl", !1]), t.string]),
    sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
  }), a;
}
const ah = (e, o) => e.filter((n) => o.includes(n)), qn = (e, o, n) => {
  const r = e.keys[0];
  Array.isArray(o) ? o.forEach((s, a) => {
    n((i, l) => {
      a <= e.keys.length - 1 && (a === 0 ? Object.assign(i, l) : i[e.up(e.keys[a])] = l);
    }, s);
  }) : o && typeof o == "object" ? (Object.keys(o).length > e.keys.length ? e.keys : ah(e.keys, Object.keys(o))).forEach((a) => {
    if (e.keys.includes(a)) {
      const i = o[a];
      i !== void 0 && n((l, c) => {
        r === a ? Object.assign(l, c) : l[e.up(a)] = c;
      }, i);
    }
  }) : (typeof o == "number" || typeof o == "string") && n((s, a) => {
    Object.assign(s, a);
  }, o);
};
function Fs(e) {
  return `--Grid-${e}Spacing`;
}
function ya(e) {
  return `--Grid-parent-${e}Spacing`;
}
const kc = "--Grid-columns", An = "--Grid-parent-columns", ih = ({
  theme: e,
  ownerState: o
}) => {
  const n = {};
  return qn(e.breakpoints, o.size, (r, s) => {
    let a = {};
    s === "grow" && (a = {
      flexBasis: 0,
      flexGrow: 1,
      maxWidth: "100%"
    }), s === "auto" && (a = {
      flexBasis: "auto",
      flexGrow: 0,
      flexShrink: 0,
      maxWidth: "none",
      width: "auto"
    }), typeof s == "number" && (a = {
      flexGrow: 0,
      flexBasis: "auto",
      width: `calc(100% * ${s} / var(${An}) - (var(${An}) - ${s}) * (var(${ya("column")}) / var(${An})))`
    }), r(n, a);
  }), n;
}, lh = ({
  theme: e,
  ownerState: o
}) => {
  const n = {};
  return qn(e.breakpoints, o.offset, (r, s) => {
    let a = {};
    s === "auto" && (a = {
      marginLeft: "auto"
    }), typeof s == "number" && (a = {
      marginLeft: s === 0 ? "0px" : `calc(100% * ${s} / var(${An}) + var(${ya("column")}) * ${s} / var(${An}))`
    }), r(n, a);
  }), n;
}, ch = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = {
    [kc]: 12
  };
  return qn(e.breakpoints, o.columns, (r, s) => {
    const a = s ?? 12;
    r(n, {
      [kc]: a,
      "> *": {
        [An]: a
      }
    });
  }), n;
}, ph = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = {};
  return qn(e.breakpoints, o.rowSpacing, (r, s) => {
    var i;
    const a = typeof s == "string" ? s : (i = e.spacing) == null ? void 0 : i.call(e, s);
    r(n, {
      [Fs("row")]: a,
      "> *": {
        [ya("row")]: a
      }
    });
  }), n;
}, uh = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = {};
  return qn(e.breakpoints, o.columnSpacing, (r, s) => {
    var i;
    const a = typeof s == "string" ? s : (i = e.spacing) == null ? void 0 : i.call(e, s);
    r(n, {
      [Fs("column")]: a,
      "> *": {
        [ya("column")]: a
      }
    });
  }), n;
}, dh = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = {};
  return qn(e.breakpoints, o.direction, (r, s) => {
    r(n, {
      flexDirection: s
    });
  }), n;
}, fh = ({
  ownerState: e
}) => ({
  minWidth: 0,
  boxSizing: "border-box",
  ...e.container && {
    display: "flex",
    flexWrap: "wrap",
    ...e.wrap && e.wrap !== "wrap" && {
      flexWrap: e.wrap
    },
    gap: `var(${Fs("row")}) var(${Fs("column")})`
  }
}), mh = (e) => {
  const o = [];
  return Object.entries(e).forEach(([n, r]) => {
    r !== !1 && r !== void 0 && o.push(`grid-${n}-${String(r)}`);
  }), o;
}, gh = (e, o = "xs") => {
  function n(r) {
    return r === void 0 ? !1 : typeof r == "string" && !Number.isNaN(Number(r)) || typeof r == "number" && r > 0;
  }
  if (n(e))
    return [`spacing-${o}-${String(e)}`];
  if (typeof e == "object" && !Array.isArray(e)) {
    const r = [];
    return Object.entries(e).forEach(([s, a]) => {
      n(a) && r.push(`spacing-${s}-${String(a)}`);
    }), r;
  }
  return [];
}, bh = (e) => e === void 0 ? [] : typeof e == "object" ? Object.entries(e).map(([o, n]) => `direction-${o}-${n}`) : [`direction-xs-${String(e)}`], hh = Gn(), yh = Qi("div", {
  name: "MuiGrid",
  slot: "Root",
  overridesResolver: (e, o) => o.root
});
function vh(e) {
  return ga({
    props: e,
    name: "MuiGrid",
    defaultTheme: hh
  });
}
function xh(e = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent: o = yh,
    useThemeProps: n = vh,
    useTheme: r = Vr,
    componentName: s = "MuiGrid"
  } = e, a = (p, u) => {
    const {
      container: f,
      direction: g,
      spacing: b,
      wrap: h,
      size: d
    } = p, y = {
      root: ["root", f && "container", h !== "wrap" && `wrap-xs-${String(h)}`, ...bh(g), ...mh(d), ...f ? gh(b, u.breakpoints.keys[0]) : []]
    };
    return ce(y, (S) => ae(s, S), {});
  };
  function i(p, u, f = () => !0) {
    const g = {};
    return p === null || (Array.isArray(p) ? p.forEach((b, h) => {
      b !== null && f(b) && u.keys[h] && (g[u.keys[h]] = b);
    }) : typeof p == "object" ? Object.keys(p).forEach((b) => {
      const h = p[b];
      h != null && f(h) && (g[b] = h);
    }) : g[u.keys[0]] = p), g;
  }
  const l = o(ch, uh, ph, ih, dh, fh, lh), c = /* @__PURE__ */ m.forwardRef(function(u, f) {
    const g = r(), b = n(u), h = _r(b), {
      className: d,
      children: y,
      columns: S = 12,
      container: O = !1,
      component: C = "div",
      direction: T = "row",
      wrap: w = "wrap",
      size: E = {},
      offset: $ = {},
      spacing: P = 0,
      rowSpacing: N = P,
      columnSpacing: v = P,
      unstable_level: R = 0,
      ...A
    } = h, j = i(E, g.breakpoints, (V) => V !== !1), k = i($, g.breakpoints), D = u.columns ?? (R ? void 0 : S), B = u.spacing ?? (R ? void 0 : P), _ = u.rowSpacing ?? u.spacing ?? (R ? void 0 : N), H = u.columnSpacing ?? u.spacing ?? (R ? void 0 : v), U = {
      ...h,
      level: R,
      columns: D,
      container: O,
      direction: T,
      wrap: w,
      spacing: B,
      rowSpacing: _,
      columnSpacing: H,
      size: j,
      offset: k
    }, F = a(U, g);
    return /* @__PURE__ */ x.jsx(l, {
      ref: f,
      as: C,
      ownerState: U,
      className: W(F.root, d),
      ...A,
      children: m.Children.map(y, (V) => {
        var me;
        return /* @__PURE__ */ m.isValidElement(V) && Bo(V, ["Grid"]) && O && V.props.container ? /* @__PURE__ */ m.cloneElement(V, {
          unstable_level: ((me = V.props) == null ? void 0 : me.unstable_level) ?? R + 1
        }) : V;
      })
    });
  });
  return process.env.NODE_ENV !== "production" && (c.propTypes = {
    children: t.node,
    className: t.string,
    columns: t.oneOfType([t.arrayOf(t.number), t.number, t.object]),
    columnSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    component: t.elementType,
    container: t.bool,
    direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
    offset: t.oneOfType([t.string, t.number, t.arrayOf(t.oneOfType([t.string, t.number])), t.object]),
    rowSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    size: t.oneOfType([t.string, t.bool, t.number, t.arrayOf(t.oneOfType([t.string, t.bool, t.number])), t.object]),
    spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
    wrap: t.oneOf(["nowrap", "wrap-reverse", "wrap"])
  }), c.muiName = "Grid", c;
}
const Sh = Gn(), Th = Qi("div", {
  name: "MuiStack",
  slot: "Root",
  overridesResolver: (e, o) => o.root
});
function Ch(e) {
  return ga({
    props: e,
    name: "MuiStack",
    defaultTheme: Sh
  });
}
function wh(e, o) {
  const n = m.Children.toArray(e).filter(Boolean);
  return n.reduce((r, s, a) => (r.push(s), a < n.length - 1 && r.push(/* @__PURE__ */ m.cloneElement(o, {
    key: `separator-${a}`
  })), r), []);
}
const Oh = (e) => ({
  row: "Left",
  "row-reverse": "Right",
  column: "Top",
  "column-reverse": "Bottom"
})[e], Eh = ({
  ownerState: e,
  theme: o
}) => {
  let n = {
    display: "flex",
    flexDirection: "column",
    ...Ut({
      theme: o
    }, yn({
      values: e.direction,
      breakpoints: o.breakpoints.values
    }), (r) => ({
      flexDirection: r
    }))
  };
  if (e.spacing) {
    const r = ca(o), s = Object.keys(o.breakpoints.values).reduce((c, p) => ((typeof e.spacing == "object" && e.spacing[p] != null || typeof e.direction == "object" && e.direction[p] != null) && (c[p] = !0), c), {}), a = yn({
      values: e.direction,
      base: s
    }), i = yn({
      values: e.spacing,
      base: s
    });
    typeof a == "object" && Object.keys(a).forEach((c, p, u) => {
      if (!a[c]) {
        const g = p > 0 ? a[u[p - 1]] : "column";
        a[c] = g;
      }
    }), n = Ct(n, Ut({
      theme: o
    }, i, (c, p) => e.useFlexGap ? {
      gap: Sn(r, c)
    } : {
      // The useFlexGap={false} implement relies on each child to give up control of the margin.
      // We need to reset the margin to avoid double spacing.
      "& > :not(style):not(style)": {
        margin: 0
      },
      "& > :not(style) ~ :not(style)": {
        [`margin${Oh(p ? a[p] : e.direction)}`]: Sn(r, c)
      }
    }));
  }
  return n = xg(o.breakpoints, n), n;
};
function Rh(e = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent: o = Th,
    useThemeProps: n = Ch,
    componentName: r = "MuiStack"
  } = e, s = () => ce({
    root: ["root"]
  }, (c) => ae(r, c), {}), a = o(Eh), i = /* @__PURE__ */ m.forwardRef(function(c, p) {
    const u = n(c), f = _r(u), {
      component: g = "div",
      direction: b = "column",
      spacing: h = 0,
      divider: d,
      children: y,
      className: S,
      useFlexGap: O = !1,
      ...C
    } = f, T = {
      direction: b,
      spacing: h,
      useFlexGap: O
    }, w = s();
    return /* @__PURE__ */ x.jsx(a, {
      as: g,
      ownerState: T,
      ref: p,
      className: W(w.root, S),
      ...C,
      children: d ? wh(y, d) : y
    });
  });
  return process.env.NODE_ENV !== "production" && (i.propTypes = {
    children: t.node,
    direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
    divider: t.node,
    spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
  }), i;
}
function lP(e) {
  process.env.NODE_ENV !== "production" && console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join(`
`));
  const {
    defaultProps: o = {},
    mixins: n = {},
    overrides: r = {},
    palette: s = {},
    props: a = {},
    styleOverrides: i = {},
    ...l
  } = e, c = {
    ...l,
    components: {}
  };
  Object.keys(o).forEach((d) => {
    const y = c.components[d] || {};
    y.defaultProps = o[d], c.components[d] = y;
  }), Object.keys(a).forEach((d) => {
    const y = c.components[d] || {};
    y.defaultProps = a[d], c.components[d] = y;
  }), Object.keys(i).forEach((d) => {
    const y = c.components[d] || {};
    y.styleOverrides = i[d], c.components[d] = y;
  }), Object.keys(r).forEach((d) => {
    const y = c.components[d] || {};
    y.styleOverrides = r[d], c.components[d] = y;
  }), c.spacing = Ki(e.spacing);
  const p = wu(e.breakpoints || {}), u = c.spacing;
  c.mixins = {
    gutters: (d = {}) => ({
      paddingLeft: u(2),
      paddingRight: u(2),
      ...d,
      [p.up("sm")]: {
        paddingLeft: u(3),
        paddingRight: u(3),
        ...d[p.up("sm")]
      }
    }),
    ...n
  };
  const {
    type: f,
    mode: g,
    ...b
  } = s, h = g || f || "light";
  return c.palette = {
    // theme.palette.text.hint
    text: {
      hint: h === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)"
    },
    mode: h,
    type: h,
    ...b
  }, c;
}
function td() {
  return {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: Bn.white,
      default: Bn.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
}
const $h = td();
function od() {
  return {
    text: {
      primary: Bn.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: Bn.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
}
const Pc = od();
function Nc(e, o, n, r) {
  const s = r.light || r, a = r.dark || r * 1.5;
  e[o] || (e.hasOwnProperty(n) ? e[o] = e[n] : o === "light" ? e.light = Ro(e.main, s) : o === "dark" && (e.dark = Eo(e.main, a)));
}
function kh(e = "light") {
  return e === "dark" ? {
    main: pn[200],
    light: pn[50],
    dark: pn[400]
  } : {
    main: pn[700],
    light: pn[400],
    dark: pn[800]
  };
}
function Ph(e = "light") {
  return e === "dark" ? {
    main: cn[200],
    light: cn[50],
    dark: cn[400]
  } : {
    main: cn[500],
    light: cn[300],
    dark: cn[700]
  };
}
function Nh(e = "light") {
  return e === "dark" ? {
    main: ln[500],
    light: ln[300],
    dark: ln[700]
  } : {
    main: ln[700],
    light: ln[400],
    dark: ln[800]
  };
}
function Ih(e = "light") {
  return e === "dark" ? {
    main: un[400],
    light: un[300],
    dark: un[700]
  } : {
    main: un[700],
    light: un[500],
    dark: un[900]
  };
}
function jh(e = "light") {
  return e === "dark" ? {
    main: dn[400],
    light: dn[300],
    dark: dn[700]
  } : {
    main: dn[800],
    light: dn[500],
    dark: dn[900]
  };
}
function Mh(e = "light") {
  return e === "dark" ? {
    main: $n[400],
    light: $n[300],
    dark: $n[700]
  } : {
    main: "#ed6c02",
    // closest to orange[800] that pass 3:1.
    light: $n[500],
    dark: $n[900]
  };
}
function ll(e) {
  const {
    mode: o = "light",
    contrastThreshold: n = 3,
    tonalOffset: r = 0.2,
    ...s
  } = e, a = e.primary || kh(o), i = e.secondary || Ph(o), l = e.error || Nh(o), c = e.info || Ih(o), p = e.success || jh(o), u = e.warning || Mh(o);
  function f(d) {
    const y = vc(d, Pc.text.primary) >= n ? Pc.text.primary : $h.text.primary;
    if (process.env.NODE_ENV !== "production") {
      const S = vc(d, y);
      S < 3 && console.error([`MUI: The contrast ratio of ${S}:1 for ${y} on ${d}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join(`
`));
    }
    return y;
  }
  const g = ({
    color: d,
    name: y,
    mainShade: S = 500,
    lightShade: O = 300,
    darkShade: C = 700
  }) => {
    if (d = {
      ...d
    }, !d.main && d[S] && (d.main = d[S]), !d.hasOwnProperty("main"))
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${y ? ` (${y})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${S}\` property.` : zt(11, y ? ` (${y})` : "", S));
    if (typeof d.main != "string")
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${y ? ` (${y})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(d.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : zt(12, y ? ` (${y})` : "", JSON.stringify(d.main)));
    return Nc(d, "light", O, r), Nc(d, "dark", C, r), d.contrastText || (d.contrastText = f(d.main)), d;
  };
  let b;
  return o === "light" ? b = td() : o === "dark" && (b = od()), process.env.NODE_ENV !== "production" && (b || console.error(`MUI: The palette mode \`${o}\` is not supported.`)), Ct({
    // A collection of common colors.
    common: {
      ...Bn
    },
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode: o,
    // The colors used to represent primary interface elements for a user.
    primary: g({
      color: a,
      name: "primary"
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: g({
      color: i,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: g({
      color: l,
      name: "error"
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: g({
      color: u,
      name: "warning"
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: g({
      color: c,
      name: "info"
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: g({
      color: p,
      name: "success"
    }),
    // The grey colors.
    grey: su,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold: n,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText: f,
    // Generate a rich color object.
    augmentColor: g,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: r,
    // The light and dark mode object.
    ...b
  }, s);
}
function Ah(e) {
  const o = {};
  return Object.entries(e).forEach((r) => {
    const [s, a] = r;
    typeof a == "object" && (o[s] = `${a.fontStyle ? `${a.fontStyle} ` : ""}${a.fontVariant ? `${a.fontVariant} ` : ""}${a.fontWeight ? `${a.fontWeight} ` : ""}${a.fontStretch ? `${a.fontStretch} ` : ""}${a.fontSize || ""}${a.lineHeight ? `/${a.lineHeight} ` : ""}${a.fontFamily || ""}`);
  }), o;
}
function Bh(e, o) {
  return {
    toolbar: {
      minHeight: 56,
      [e.up("xs")]: {
        "@media (orientation: landscape)": {
          minHeight: 48
        }
      },
      [e.up("sm")]: {
        minHeight: 64
      }
    },
    ...o
  };
}
function Lh(e) {
  return Math.round(e * 1e5) / 1e5;
}
const Ic = {
  textTransform: "uppercase"
}, jc = '"Roboto", "Helvetica", "Arial", sans-serif';
function nd(e, o) {
  const {
    fontFamily: n = jc,
    // The default font size of the Material Specification.
    fontSize: r = 14,
    // px
    fontWeightLight: s = 300,
    fontWeightRegular: a = 400,
    fontWeightMedium: i = 500,
    fontWeightBold: l = 700,
    // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize: c = 16,
    // Apply the CSS properties to all the variants.
    allVariants: p,
    pxToRem: u,
    ...f
  } = typeof o == "function" ? o(e) : o;
  process.env.NODE_ENV !== "production" && (typeof r != "number" && console.error("MUI: `fontSize` is required to be a number."), typeof c != "number" && console.error("MUI: `htmlFontSize` is required to be a number."));
  const g = r / 14, b = u || ((y) => `${y / c * g}rem`), h = (y, S, O, C, T) => ({
    fontFamily: n,
    fontWeight: y,
    fontSize: b(S),
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight: O,
    // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
    // across font-families can cause issues with the kerning.
    ...n === jc ? {
      letterSpacing: `${Lh(C / S)}em`
    } : {},
    ...T,
    ...p
  }), d = {
    h1: h(s, 96, 1.167, -1.5),
    h2: h(s, 60, 1.2, -0.5),
    h3: h(a, 48, 1.167, 0),
    h4: h(a, 34, 1.235, 0.25),
    h5: h(a, 24, 1.334, 0),
    h6: h(i, 20, 1.6, 0.15),
    subtitle1: h(a, 16, 1.75, 0.15),
    subtitle2: h(i, 14, 1.57, 0.1),
    body1: h(a, 16, 1.5, 0.15),
    body2: h(a, 14, 1.43, 0.15),
    button: h(i, 14, 1.75, 0.4, Ic),
    caption: h(a, 12, 1.66, 0.4),
    overline: h(a, 12, 2.66, 1, Ic),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      lineHeight: "inherit",
      letterSpacing: "inherit"
    }
  };
  return Ct({
    htmlFontSize: c,
    pxToRem: b,
    fontFamily: n,
    fontSize: r,
    fontWeightLight: s,
    fontWeightRegular: a,
    fontWeightMedium: i,
    fontWeightBold: l,
    ...d
  }, f, {
    clone: !1
    // No need to clone deep
  });
}
const Dh = 0.2, zh = 0.14, Fh = 0.12;
function ct(...e) {
  return [`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,${Dh})`, `${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,${zh})`, `${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,${Fh})`].join(",");
}
const Vh = ["none", ct(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), ct(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), ct(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), ct(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), ct(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), ct(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), ct(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), ct(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), ct(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), ct(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), ct(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), ct(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), ct(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), ct(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), ct(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), ct(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), ct(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), ct(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), ct(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), ct(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), ct(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), ct(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), ct(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), ct(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)], _h = {
  // This is the most common easing curve.
  easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: "cubic-bezier(0.4, 0, 1, 1)",
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
}, rd = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
function Mc(e) {
  return `${Math.round(e)}ms`;
}
function Wh(e) {
  if (!e)
    return 0;
  const o = e / 36;
  return Math.min(Math.round((4 + 15 * o ** 0.25 + o / 5) * 10), 3e3);
}
function Uh(e) {
  const o = {
    ..._h,
    ...e.easing
  }, n = {
    ...rd,
    ...e.duration
  };
  return {
    getAutoHeightDuration: Wh,
    create: (s = ["all"], a = {}) => {
      const {
        duration: i = n.standard,
        easing: l = o.easeInOut,
        delay: c = 0,
        ...p
      } = a;
      if (process.env.NODE_ENV !== "production") {
        const u = (g) => typeof g == "string", f = (g) => !Number.isNaN(parseFloat(g));
        !u(s) && !Array.isArray(s) && console.error('MUI: Argument "props" must be a string or Array.'), !f(i) && !u(i) && console.error(`MUI: Argument "duration" must be a number or a string but found ${i}.`), u(l) || console.error('MUI: Argument "easing" must be a string.'), !f(c) && !u(c) && console.error('MUI: Argument "delay" must be a number or a string.'), typeof a != "object" && console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join(`
`)), Object.keys(p).length !== 0 && console.error(`MUI: Unrecognized argument(s) [${Object.keys(p).join(",")}].`);
      }
      return (Array.isArray(s) ? s : [s]).map((u) => `${u} ${typeof i == "string" ? i : Mc(i)} ${l} ${typeof c == "string" ? c : Mc(c)}`).join(",");
    },
    ...e,
    easing: o,
    duration: n
  };
}
const Hh = {
  mobileStepper: 1e3,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
function Gh(e) {
  return To(e) || typeof e > "u" || typeof e == "string" || typeof e == "boolean" || typeof e == "number" || Array.isArray(e);
}
function sd(e = {}) {
  const o = {
    ...e
  };
  function n(r) {
    const s = Object.entries(r);
    for (let a = 0; a < s.length; a++) {
      const [i, l] = s[a];
      !Gh(l) || i.startsWith("unstable_") ? delete r[i] : To(l) && (r[i] = {
        ...l
      }, n(r[i]));
    }
  }
  return n(o), `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(o, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
}
function Vs(e = {}, ...o) {
  const {
    breakpoints: n,
    mixins: r = {},
    spacing: s,
    palette: a = {},
    transitions: i = {},
    typography: l = {},
    shape: c,
    ...p
  } = e;
  if (e.vars)
    throw new Error(process.env.NODE_ENV !== "production" ? "MUI: `vars` is a private field used for CSS variables support.\nPlease use another name." : zt(20));
  const u = ll(a), f = Gn(e);
  let g = Ct(f, {
    mixins: Bh(f.breakpoints, r),
    palette: u,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    shadows: Vh.slice(),
    typography: nd(u, l),
    transitions: Uh(i),
    zIndex: {
      ...Hh
    }
  });
  if (g = Ct(g, p), g = o.reduce((b, h) => Ct(b, h), g), process.env.NODE_ENV !== "production") {
    const b = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"], h = (d, y) => {
      let S;
      for (S in d) {
        const O = d[S];
        if (b.includes(S) && Object.keys(O).length > 0) {
          if (process.env.NODE_ENV !== "production") {
            const C = ae("", S);
            console.error([`MUI: The \`${y}\` component increases the CSS specificity of the \`${S}\` internal state.`, "You can not override it like this: ", JSON.stringify(d, null, 2), "", `Instead, you need to use the '&.${C}' syntax:`, JSON.stringify({
              root: {
                [`&.${C}`]: O
              }
            }, null, 2), "", "https://mui.com/r/state-classes-guide"].join(`
`));
          }
          d[S] = {};
        }
      }
    };
    Object.keys(g.components).forEach((d) => {
      const y = g.components[d].styleOverrides;
      y && d.startsWith("Mui") && h(y, d);
    });
  }
  return g.unstable_sxConfig = {
    ...Fr,
    ...p == null ? void 0 : p.unstable_sxConfig
  }, g.unstable_sx = function(h) {
    return Qo({
      sx: h,
      theme: this
    });
  }, g.toRuntimeSource = sd, g;
}
let Ac = !1;
function cP(...e) {
  return process.env.NODE_ENV !== "production" && (Ac || (Ac = !0, console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join(`
`)))), Vs(...e);
}
function xi(e) {
  let o;
  return e < 1 ? o = 5.11916 * e ** 2 : o = 4.5 * Math.log(e + 1) + 2, Math.round(o * 10) / 1e3;
}
const qh = [...Array(25)].map((e, o) => {
  if (o === 0)
    return "none";
  const n = xi(o);
  return `linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`;
});
function ad(e) {
  return {
    inputPlaceholder: e === "dark" ? 0.5 : 0.42,
    inputUnderline: e === "dark" ? 0.7 : 0.42,
    switchTrackDisabled: e === "dark" ? 0.2 : 0.12,
    switchTrack: e === "dark" ? 0.3 : 0.38
  };
}
function id(e) {
  return e === "dark" ? qh : [];
}
function Yh(e) {
  const {
    palette: o = {
      mode: "light"
    },
    // need to cast to avoid module augmentation test
    opacity: n,
    overlays: r,
    ...s
  } = e, a = ll(o);
  return {
    palette: a,
    opacity: {
      ...ad(a.mode),
      ...n
    },
    overlays: r || id(a.mode),
    ...s
  };
}
function Kh(e) {
  var o;
  return !!e[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!e[0].match(/sxConfig$/) || // ends with sxConfig
  e[0] === "palette" && !!((o = e[1]) != null && o.match(/(mode|contrastThreshold|tonalOffset)/));
}
const Xh = (e) => [...[...Array(25)].map((o, n) => `--${e ? `${e}-` : ""}overlays-${n}`), `--${e ? `${e}-` : ""}palette-AppBar-darkBg`, `--${e ? `${e}-` : ""}palette-AppBar-darkColor`], Jh = (e) => (o, n) => {
  const r = e.rootSelector || ":root", s = e.colorSchemeSelector;
  let a = s;
  if (s === "class" && (a = ".%s"), s === "data" && (a = "[data-%s]"), s != null && s.startsWith("data-") && !s.includes("%s") && (a = `[${s}="%s"]`), e.defaultColorScheme === o) {
    if (o === "dark") {
      const i = {};
      return Xh(e.cssVarPrefix).forEach((l) => {
        i[l] = n[l], delete n[l];
      }), a === "media" ? {
        [r]: n,
        "@media (prefers-color-scheme: dark)": {
          [r]: i
        }
      } : a ? {
        [a.replace("%s", o)]: i,
        [`${r}, ${a.replace("%s", o)}`]: n
      } : {
        [r]: {
          ...n,
          ...i
        }
      };
    }
    if (a && a !== "media")
      return `${r}, ${a.replace("%s", String(o))}`;
  } else if (o) {
    if (a === "media")
      return {
        [`@media (prefers-color-scheme: ${String(o)})`]: {
          [r]: n
        }
      };
    if (a)
      return a.replace("%s", String(o));
  }
  return r;
};
function Zh(e, o) {
  o.forEach((n) => {
    e[n] || (e[n] = {});
  });
}
function re(e, o, n) {
  !e[o] && n && (e[o] = n);
}
function br(e) {
  return typeof e != "string" || !e.startsWith("hsl") ? e : Du(e);
}
function Io(e, o) {
  `${o}Channel` in e || (e[`${o}Channel`] = gr(br(e[o]), `MUI: Can't create \`palette.${o}Channel\` because \`palette.${o}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${o}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`));
}
function Qh(e) {
  return typeof e == "number" ? `${e}px` : typeof e == "string" || typeof e == "function" || Array.isArray(e) ? e : "8px";
}
const yo = (e) => {
  try {
    return e();
  } catch {
  }
}, ey = (e = "mui") => Xb(e);
function Ya(e, o, n, r) {
  if (!o)
    return;
  o = o === !0 ? {} : o;
  const s = r === "dark" ? "dark" : "light";
  if (!n) {
    e[r] = Yh({
      ...o,
      palette: {
        mode: s,
        ...o == null ? void 0 : o.palette
      }
    });
    return;
  }
  const {
    palette: a,
    ...i
  } = Vs({
    ...n,
    palette: {
      mode: s,
      ...o == null ? void 0 : o.palette
    }
  });
  return e[r] = {
    ...o,
    palette: a,
    opacity: {
      ...ad(s),
      ...o == null ? void 0 : o.opacity
    },
    overlays: (o == null ? void 0 : o.overlays) || id(s)
  }, i;
}
function ld(e = {}, ...o) {
  const {
    colorSchemes: n = {
      light: !0
    },
    defaultColorScheme: r,
    disableCssColorScheme: s = !1,
    cssVarPrefix: a = "mui",
    shouldSkipGeneratingVar: i = Kh,
    colorSchemeSelector: l = n.light && n.dark ? "media" : void 0,
    rootSelector: c = ":root",
    ...p
  } = e, u = Object.keys(n)[0], f = r || (n.light && u !== "light" ? "light" : u), g = ey(a), {
    [f]: b,
    light: h,
    dark: d,
    ...y
  } = n, S = {
    ...y
  };
  let O = b;
  if ((f === "dark" && !("dark" in n) || f === "light" && !("light" in n)) && (O = !0), !O)
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`colorSchemes.${f}\` option is either missing or invalid.` : zt(21, f));
  const C = Ya(S, O, p, f);
  h && !S.light && Ya(S, h, void 0, "light"), d && !S.dark && Ya(S, d, void 0, "dark");
  let T = {
    defaultColorScheme: f,
    ...C,
    cssVarPrefix: a,
    colorSchemeSelector: l,
    rootSelector: c,
    getCssVar: g,
    colorSchemes: S,
    font: {
      ...Ah(C.typography),
      ...C.font
    },
    spacing: Qh(p.spacing)
  };
  Object.keys(T.colorSchemes).forEach((N) => {
    const v = T.colorSchemes[N].palette, R = (A) => {
      const j = A.split("-"), k = j[1], D = j[2];
      return g(A, v[k][D]);
    };
    if (v.mode === "light" && (re(v.common, "background", "#fff"), re(v.common, "onBackground", "#000")), v.mode === "dark" && (re(v.common, "background", "#000"), re(v.common, "onBackground", "#fff")), Zh(v, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]), v.mode === "light") {
      re(v.Alert, "errorColor", rt(v.error.light, 0.6)), re(v.Alert, "infoColor", rt(v.info.light, 0.6)), re(v.Alert, "successColor", rt(v.success.light, 0.6)), re(v.Alert, "warningColor", rt(v.warning.light, 0.6)), re(v.Alert, "errorFilledBg", R("palette-error-main")), re(v.Alert, "infoFilledBg", R("palette-info-main")), re(v.Alert, "successFilledBg", R("palette-success-main")), re(v.Alert, "warningFilledBg", R("palette-warning-main")), re(v.Alert, "errorFilledColor", yo(() => v.getContrastText(v.error.main))), re(v.Alert, "infoFilledColor", yo(() => v.getContrastText(v.info.main))), re(v.Alert, "successFilledColor", yo(() => v.getContrastText(v.success.main))), re(v.Alert, "warningFilledColor", yo(() => v.getContrastText(v.warning.main))), re(v.Alert, "errorStandardBg", st(v.error.light, 0.9)), re(v.Alert, "infoStandardBg", st(v.info.light, 0.9)), re(v.Alert, "successStandardBg", st(v.success.light, 0.9)), re(v.Alert, "warningStandardBg", st(v.warning.light, 0.9)), re(v.Alert, "errorIconColor", R("palette-error-main")), re(v.Alert, "infoIconColor", R("palette-info-main")), re(v.Alert, "successIconColor", R("palette-success-main")), re(v.Alert, "warningIconColor", R("palette-warning-main")), re(v.AppBar, "defaultBg", R("palette-grey-100")), re(v.Avatar, "defaultBg", R("palette-grey-400")), re(v.Button, "inheritContainedBg", R("palette-grey-300")), re(v.Button, "inheritContainedHoverBg", R("palette-grey-A100")), re(v.Chip, "defaultBorder", R("palette-grey-400")), re(v.Chip, "defaultAvatarColor", R("palette-grey-700")), re(v.Chip, "defaultIconColor", R("palette-grey-700")), re(v.FilledInput, "bg", "rgba(0, 0, 0, 0.06)"), re(v.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)"), re(v.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)"), re(v.LinearProgress, "primaryBg", st(v.primary.main, 0.62)), re(v.LinearProgress, "secondaryBg", st(v.secondary.main, 0.62)), re(v.LinearProgress, "errorBg", st(v.error.main, 0.62)), re(v.LinearProgress, "infoBg", st(v.info.main, 0.62)), re(v.LinearProgress, "successBg", st(v.success.main, 0.62)), re(v.LinearProgress, "warningBg", st(v.warning.main, 0.62)), re(v.Skeleton, "bg", `rgba(${R("palette-text-primaryChannel")} / 0.11)`), re(v.Slider, "primaryTrack", st(v.primary.main, 0.62)), re(v.Slider, "secondaryTrack", st(v.secondary.main, 0.62)), re(v.Slider, "errorTrack", st(v.error.main, 0.62)), re(v.Slider, "infoTrack", st(v.info.main, 0.62)), re(v.Slider, "successTrack", st(v.success.main, 0.62)), re(v.Slider, "warningTrack", st(v.warning.main, 0.62));
      const A = as(v.background.default, 0.8);
      re(v.SnackbarContent, "bg", A), re(v.SnackbarContent, "color", yo(() => v.getContrastText(A))), re(v.SpeedDialAction, "fabHoverBg", as(v.background.paper, 0.15)), re(v.StepConnector, "border", R("palette-grey-400")), re(v.StepContent, "border", R("palette-grey-400")), re(v.Switch, "defaultColor", R("palette-common-white")), re(v.Switch, "defaultDisabledColor", R("palette-grey-100")), re(v.Switch, "primaryDisabledColor", st(v.primary.main, 0.62)), re(v.Switch, "secondaryDisabledColor", st(v.secondary.main, 0.62)), re(v.Switch, "errorDisabledColor", st(v.error.main, 0.62)), re(v.Switch, "infoDisabledColor", st(v.info.main, 0.62)), re(v.Switch, "successDisabledColor", st(v.success.main, 0.62)), re(v.Switch, "warningDisabledColor", st(v.warning.main, 0.62)), re(v.TableCell, "border", st(ss(v.divider, 1), 0.88)), re(v.Tooltip, "bg", ss(v.grey[700], 0.92));
    }
    if (v.mode === "dark") {
      re(v.Alert, "errorColor", st(v.error.light, 0.6)), re(v.Alert, "infoColor", st(v.info.light, 0.6)), re(v.Alert, "successColor", st(v.success.light, 0.6)), re(v.Alert, "warningColor", st(v.warning.light, 0.6)), re(v.Alert, "errorFilledBg", R("palette-error-dark")), re(v.Alert, "infoFilledBg", R("palette-info-dark")), re(v.Alert, "successFilledBg", R("palette-success-dark")), re(v.Alert, "warningFilledBg", R("palette-warning-dark")), re(v.Alert, "errorFilledColor", yo(() => v.getContrastText(v.error.dark))), re(v.Alert, "infoFilledColor", yo(() => v.getContrastText(v.info.dark))), re(v.Alert, "successFilledColor", yo(() => v.getContrastText(v.success.dark))), re(v.Alert, "warningFilledColor", yo(() => v.getContrastText(v.warning.dark))), re(v.Alert, "errorStandardBg", rt(v.error.light, 0.9)), re(v.Alert, "infoStandardBg", rt(v.info.light, 0.9)), re(v.Alert, "successStandardBg", rt(v.success.light, 0.9)), re(v.Alert, "warningStandardBg", rt(v.warning.light, 0.9)), re(v.Alert, "errorIconColor", R("palette-error-main")), re(v.Alert, "infoIconColor", R("palette-info-main")), re(v.Alert, "successIconColor", R("palette-success-main")), re(v.Alert, "warningIconColor", R("palette-warning-main")), re(v.AppBar, "defaultBg", R("palette-grey-900")), re(v.AppBar, "darkBg", R("palette-background-paper")), re(v.AppBar, "darkColor", R("palette-text-primary")), re(v.Avatar, "defaultBg", R("palette-grey-600")), re(v.Button, "inheritContainedBg", R("palette-grey-800")), re(v.Button, "inheritContainedHoverBg", R("palette-grey-700")), re(v.Chip, "defaultBorder", R("palette-grey-700")), re(v.Chip, "defaultAvatarColor", R("palette-grey-300")), re(v.Chip, "defaultIconColor", R("palette-grey-300")), re(v.FilledInput, "bg", "rgba(255, 255, 255, 0.09)"), re(v.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)"), re(v.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)"), re(v.LinearProgress, "primaryBg", rt(v.primary.main, 0.5)), re(v.LinearProgress, "secondaryBg", rt(v.secondary.main, 0.5)), re(v.LinearProgress, "errorBg", rt(v.error.main, 0.5)), re(v.LinearProgress, "infoBg", rt(v.info.main, 0.5)), re(v.LinearProgress, "successBg", rt(v.success.main, 0.5)), re(v.LinearProgress, "warningBg", rt(v.warning.main, 0.5)), re(v.Skeleton, "bg", `rgba(${R("palette-text-primaryChannel")} / 0.13)`), re(v.Slider, "primaryTrack", rt(v.primary.main, 0.5)), re(v.Slider, "secondaryTrack", rt(v.secondary.main, 0.5)), re(v.Slider, "errorTrack", rt(v.error.main, 0.5)), re(v.Slider, "infoTrack", rt(v.info.main, 0.5)), re(v.Slider, "successTrack", rt(v.success.main, 0.5)), re(v.Slider, "warningTrack", rt(v.warning.main, 0.5));
      const A = as(v.background.default, 0.98);
      re(v.SnackbarContent, "bg", A), re(v.SnackbarContent, "color", yo(() => v.getContrastText(A))), re(v.SpeedDialAction, "fabHoverBg", as(v.background.paper, 0.15)), re(v.StepConnector, "border", R("palette-grey-600")), re(v.StepContent, "border", R("palette-grey-600")), re(v.Switch, "defaultColor", R("palette-grey-300")), re(v.Switch, "defaultDisabledColor", R("palette-grey-600")), re(v.Switch, "primaryDisabledColor", rt(v.primary.main, 0.55)), re(v.Switch, "secondaryDisabledColor", rt(v.secondary.main, 0.55)), re(v.Switch, "errorDisabledColor", rt(v.error.main, 0.55)), re(v.Switch, "infoDisabledColor", rt(v.info.main, 0.55)), re(v.Switch, "successDisabledColor", rt(v.success.main, 0.55)), re(v.Switch, "warningDisabledColor", rt(v.warning.main, 0.55)), re(v.TableCell, "border", rt(ss(v.divider, 1), 0.68)), re(v.Tooltip, "bg", ss(v.grey[700], 0.92));
    }
    Io(v.background, "default"), Io(v.background, "paper"), Io(v.common, "background"), Io(v.common, "onBackground"), Io(v, "divider"), Object.keys(v).forEach((A) => {
      const j = v[A];
      A !== "tonalOffset" && j && typeof j == "object" && (j.main && re(v[A], "mainChannel", gr(br(j.main))), j.light && re(v[A], "lightChannel", gr(br(j.light))), j.dark && re(v[A], "darkChannel", gr(br(j.dark))), j.contrastText && re(v[A], "contrastTextChannel", gr(br(j.contrastText))), A === "text" && (Io(v[A], "primary"), Io(v[A], "secondary")), A === "action" && (j.active && Io(v[A], "active"), j.selected && Io(v[A], "selected")));
    });
  }), T = o.reduce((N, v) => Ct(N, v), T);
  const w = {
    prefix: a,
    disableCssColorScheme: s,
    shouldSkipGeneratingVar: i,
    getSelector: Jh(T)
  }, {
    vars: E,
    generateThemeVars: $,
    generateStyleSheets: P
  } = Qb(T, w);
  return T.vars = E, Object.entries(T.colorSchemes[T.defaultColorScheme]).forEach(([N, v]) => {
    T[N] = v;
  }), T.generateThemeVars = $, T.generateStyleSheets = P, T.generateSpacing = function() {
    return Ki(p.spacing, ca(this));
  }, T.getColorSchemeSelector = eh(l), T.spacing = T.generateSpacing(), T.shouldSkipGeneratingVar = i, T.unstable_sxConfig = {
    ...Fr,
    ...p == null ? void 0 : p.unstable_sxConfig
  }, T.unstable_sx = function(v) {
    return Qo({
      sx: v,
      theme: this
    });
  }, T.toRuntimeSource = sd, T;
}
function Bc(e, o, n) {
  e.colorSchemes && n && (e.colorSchemes[o] = {
    ...n !== !0 && n,
    palette: ll({
      ...n === !0 ? {} : n.palette,
      mode: o
    })
    // cast type to skip module augmentation test
  });
}
function va(e = {}, ...o) {
  const {
    palette: n,
    cssVariables: r = !1,
    colorSchemes: s = n ? void 0 : {
      light: !0
    },
    defaultColorScheme: a = n == null ? void 0 : n.mode,
    ...i
  } = e, l = a || "light", c = s == null ? void 0 : s[l], p = {
    ...s,
    ...n ? {
      [l]: {
        ...typeof c != "boolean" && c,
        palette: n
      }
    } : void 0
  };
  if (r === !1) {
    if (!("colorSchemes" in e))
      return Vs(e, ...o);
    let u = n;
    "palette" in e || p[l] && (p[l] !== !0 ? u = p[l].palette : l === "dark" && (u = {
      mode: "dark"
    }));
    const f = Vs({
      ...e,
      palette: u
    }, ...o);
    return f.defaultColorScheme = l, f.colorSchemes = p, f.palette.mode === "light" && (f.colorSchemes.light = {
      ...p.light !== !0 && p.light,
      palette: f.palette
    }, Bc(f, "dark", p.dark)), f.palette.mode === "dark" && (f.colorSchemes.dark = {
      ...p.dark !== !0 && p.dark,
      palette: f.palette
    }, Bc(f, "light", p.light)), f;
  }
  return !n && !("light" in p) && l === "light" && (p.light = !0), ld({
    ...i,
    colorSchemes: p,
    defaultColorScheme: l,
    ...typeof r != "boolean" && r
  }, ...o);
}
function pP(e, ...o) {
  return va(Ct({
    unstable_strictMode: !0
  }, e), ...o);
}
let Lc = !1;
function uP(e) {
  return Lc || (console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join(`
`)), Lc = !0), e;
}
function Dc(e) {
  return String(parseFloat(e)).length === String(e).length;
}
function cd(e) {
  return String(e).match(/[\d.\-+]*\s*(.*)/)[1] || "";
}
function Go(e) {
  return parseFloat(e);
}
function ty(e) {
  return (o, n) => {
    const r = cd(o);
    if (r === n)
      return o;
    let s = Go(o);
    r !== "px" && (r === "em" || r === "rem") && (s = Go(o) * Go(e));
    let a = s;
    if (n !== "px")
      if (n === "em")
        a = s / Go(e);
      else if (n === "rem")
        a = s / Go(e);
      else
        return o;
    return parseFloat(a.toFixed(5)) + n;
  };
}
function oy({
  size: e,
  grid: o
}) {
  const n = e - e % o, r = n + o;
  return e - n < r - e ? n : r;
}
function ny({
  lineHeight: e,
  pixels: o,
  htmlFontSize: n
}) {
  return o / (e * n);
}
function ry({
  cssProperty: e,
  min: o,
  max: n,
  unit: r = "rem",
  breakpoints: s = [600, 900, 1200],
  transform: a = null
}) {
  const i = {
    [e]: `${o}${r}`
  }, l = (n - o) / s[s.length - 1];
  return s.forEach((c) => {
    let p = o + l * c;
    a !== null && (p = a(p)), i[`@media (min-width:${c}px)`] = {
      [e]: `${Math.round(p * 1e4) / 1e4}${r}`
    };
  }), i;
}
function dP(e, o = {}) {
  const {
    breakpoints: n = ["sm", "md", "lg"],
    disableAlign: r = !1,
    factor: s = 2,
    variants: a = ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"]
  } = o, i = {
    ...e
  };
  i.typography = {
    ...i.typography
  };
  const l = i.typography, c = ty(l.htmlFontSize), p = n.map((u) => i.breakpoints.values[u]);
  return a.forEach((u) => {
    const f = l[u];
    if (!f)
      return;
    const g = parseFloat(c(f.fontSize, "rem"));
    if (g <= 1)
      return;
    const b = g, h = 1 + (b - 1) / s;
    let {
      lineHeight: d
    } = f;
    if (!Dc(d) && !r)
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` : zt(6));
    Dc(d) || (d = parseFloat(c(d, "rem")) / parseFloat(g));
    let y = null;
    r || (y = (S) => oy({
      size: S,
      grid: ny({
        pixels: 4,
        lineHeight: d,
        htmlFontSize: l.htmlFontSize
      })
    })), l[u] = {
      ...f,
      ...ry({
        cssProperty: "fontSize",
        min: h,
        max: b,
        unit: "rem",
        breakpoints: p,
        transform: y
      })
    };
  }), i;
}
const xa = va();
function Ot() {
  const e = Vr(xa);
  return process.env.NODE_ENV !== "production" && m.useDebugValue(e), e[so] || e;
}
function fP({
  props: e,
  name: o
}) {
  return ga({
    props: e,
    name: o,
    defaultTheme: xa,
    themeId: so
  });
}
function Yn(e) {
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
const bt = (e) => Yn(e) && e !== "classes", M = Mu({
  themeId: so,
  defaultTheme: xa,
  rootShouldForwardProp: bt
});
function zc({
  theme: e,
  ...o
}) {
  const n = so in e ? e[so] : void 0;
  return /* @__PURE__ */ x.jsx(Pr, {
    ...o,
    themeId: n ? so : void 0,
    theme: n || e
  });
}
const is = {
  colorSchemeStorageKey: "mui-color-scheme",
  defaultLightColorScheme: "light",
  defaultDarkColorScheme: "dark",
  modeStorageKey: "mui-mode"
}, {
  CssVarsProvider: pd,
  useColorScheme: mP,
  getInitColorSchemeScript: sy
} = Kb({
  themeId: so,
  // @ts-ignore ignore module augmentation tests
  theme: () => va({
    cssVariables: !0
  }),
  colorSchemeStorageKey: is.colorSchemeStorageKey,
  modeStorageKey: is.modeStorageKey,
  defaultColorScheme: {
    light: is.defaultLightColorScheme,
    dark: is.defaultDarkColorScheme
  },
  resolveTheme: (e) => {
    const o = {
      ...e,
      typography: nd(e.palette, e.typography)
    };
    return o.unstable_sx = function(r) {
      return Qo({
        sx: r,
        theme: this
      });
    }, o;
  }
});
let Fc = !1;
function gP(e) {
  return process.env.NODE_ENV !== "production" && (Fc || (console.warn(["MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.", "", "You should use `import { ThemeProvider } from '@mui/material/styles'` instead.", "For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/"].join(`
`)), Fc = !0)), /* @__PURE__ */ x.jsx(pd, {
    ...e
  });
}
let Vc = !1;
const bP = (e) => (Vc || (console.warn(["MUI: The getInitColorSchemeScript function has been deprecated.", "", "You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`", "and replace the function call with `<InitColorSchemeScript />` instead."].join(`
`)), Vc = !0), sy(e)), ay = pd;
function hP({
  theme: e,
  ...o
}) {
  return typeof e == "function" ? /* @__PURE__ */ x.jsx(zc, {
    theme: e,
    ...o
  }) : "colorSchemes" in (so in e ? e[so] : e) ? /* @__PURE__ */ x.jsx(ay, {
    theme: e,
    ...o
  }) : /* @__PURE__ */ x.jsx(zc, {
    theme: e,
    ...o
  });
}
function yP() {
  throw new Error(process.env.NODE_ENV !== "production" ? `MUI: makeStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : zt(14));
}
function vP() {
  throw new Error(process.env.NODE_ENV !== "production" ? `MUI: withStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : zt(15));
}
function xP() {
  throw new Error(process.env.NODE_ENV !== "production" ? `MUI: withTheme is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : zt(16));
}
let _c = !1;
function SP(...e) {
  return _c || (console.warn(["MUI: The `experimental_extendTheme` has been stabilized.", "", "You should use `import { extendTheme } from '@mui/material/styles'`"].join(`
`)), _c = !0), ld(...e);
}
function TP() {
  throw new Error(process.env.NODE_ENV !== "production" ? "MUI: The `experimental_sx` has been moved to `theme.unstable_sx`.For more details, see https://github.com/mui/material-ui/pull/35150." : zt(19));
}
function ud(e) {
  return /* @__PURE__ */ x.jsx($u, {
    ...e,
    defaultTheme: xa,
    themeId: so
  });
}
process.env.NODE_ENV !== "production" && (ud.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The styles you want to apply globally.
   */
  styles: t.oneOfType([t.array, t.func, t.number, t.object, t.string, t.bool])
});
function cl(e) {
  return function(n) {
    return (
      // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.
      /* @__PURE__ */ x.jsx(ud, {
        styles: typeof e == "function" ? (r) => e({
          theme: r,
          ...n
        }) : e
      })
    );
  };
}
function iy() {
  return _r;
}
const Q = Wb;
process.env.NODE_ENV !== "production" && (t.node, t.object.isRequired);
function pe(e) {
  return _b(e);
}
function ly(e) {
  return ae("MuiSvgIcon", e);
}
const CP = le("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]), cy = (e) => {
  const {
    color: o,
    fontSize: n,
    classes: r
  } = e, s = {
    root: ["root", o !== "inherit" && `color${L(o)}`, `fontSize${L(n)}`]
  };
  return ce(s, ly, r);
}, py = M("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color !== "inherit" && o[`color${L(n.color)}`], o[`fontSize${L(n.fontSize)}`]];
  }
})(Q(({
  theme: e
}) => {
  var o, n, r, s, a, i, l, c, p, u, f, g, b, h;
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    flexShrink: 0,
    transition: (s = (o = e.transitions) == null ? void 0 : o.create) == null ? void 0 : s.call(o, "fill", {
      duration: (r = (n = (e.vars ?? e).transitions) == null ? void 0 : n.duration) == null ? void 0 : r.shorter
    }),
    variants: [
      {
        props: (d) => !d.hasSvgAsChild,
        style: {
          // the <svg> will define the property that has `currentColor`
          // for example heroicons uses fill="none" and stroke="currentColor"
          fill: "currentColor"
        }
      },
      {
        props: {
          fontSize: "inherit"
        },
        style: {
          fontSize: "inherit"
        }
      },
      {
        props: {
          fontSize: "small"
        },
        style: {
          fontSize: ((i = (a = e.typography) == null ? void 0 : a.pxToRem) == null ? void 0 : i.call(a, 20)) || "1.25rem"
        }
      },
      {
        props: {
          fontSize: "medium"
        },
        style: {
          fontSize: ((c = (l = e.typography) == null ? void 0 : l.pxToRem) == null ? void 0 : c.call(l, 24)) || "1.5rem"
        }
      },
      {
        props: {
          fontSize: "large"
        },
        style: {
          fontSize: ((u = (p = e.typography) == null ? void 0 : p.pxToRem) == null ? void 0 : u.call(p, 35)) || "2.1875rem"
        }
      },
      // TODO v5 deprecate color prop, v6 remove for sx
      ...Object.entries((e.vars ?? e).palette).filter(([, d]) => d && d.main).map(([d]) => {
        var y, S;
        return {
          props: {
            color: d
          },
          style: {
            color: (S = (y = (e.vars ?? e).palette) == null ? void 0 : y[d]) == null ? void 0 : S.main
          }
        };
      }),
      {
        props: {
          color: "action"
        },
        style: {
          color: (g = (f = (e.vars ?? e).palette) == null ? void 0 : f.action) == null ? void 0 : g.active
        }
      },
      {
        props: {
          color: "disabled"
        },
        style: {
          color: (h = (b = (e.vars ?? e).palette) == null ? void 0 : b.action) == null ? void 0 : h.disabled
        }
      },
      {
        props: {
          color: "inherit"
        },
        style: {
          color: void 0
        }
      }
    ]
  };
})), Nr = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSvgIcon"
  }), {
    children: s,
    className: a,
    color: i = "inherit",
    component: l = "svg",
    fontSize: c = "medium",
    htmlColor: p,
    inheritViewBox: u = !1,
    titleAccess: f,
    viewBox: g = "0 0 24 24",
    ...b
  } = r, h = /* @__PURE__ */ m.isValidElement(s) && s.type === "svg", d = {
    ...r,
    color: i,
    component: l,
    fontSize: c,
    instanceFontSize: o.fontSize,
    inheritViewBox: u,
    viewBox: g,
    hasSvgAsChild: h
  }, y = {};
  u || (y.viewBox = g);
  const S = cy(d);
  return /* @__PURE__ */ x.jsxs(py, {
    as: l,
    className: W(S.root, a),
    focusable: "false",
    color: p,
    "aria-hidden": f ? void 0 : !0,
    role: f ? "img" : void 0,
    ref: n,
    ...y,
    ...b,
    ...h && s.props,
    ownerState: d,
    children: [h ? s.props.children : s, f ? /* @__PURE__ */ x.jsx("title", {
      children: f
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (Nr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: t.oneOfType([t.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: t.oneOfType([t.oneOf(["inherit", "large", "medium", "small"]), t.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: t.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: t.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: t.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: t.string
});
Nr.muiName = "SvgIcon";
function at(e, o) {
  function n(r, s) {
    return /* @__PURE__ */ x.jsx(Nr, {
      "data-testid": `${o}Icon`,
      ref: s,
      ...r,
      children: e
    });
  }
  return process.env.NODE_ENV !== "production" && (n.displayName = `${o}Icon`), n.muiName = Nr.muiName, /* @__PURE__ */ m.memo(/* @__PURE__ */ m.forwardRef(n));
}
function wP(e, o) {
  if (!e)
    return o;
  if (typeof e == "function" || typeof o == "function")
    return (r) => {
      const s = typeof o == "function" ? o(r) : o, a = typeof e == "function" ? e({
        ...r,
        ...s
      }) : e, i = W(r == null ? void 0 : r.className, s == null ? void 0 : s.className, a == null ? void 0 : a.className);
      return {
        ...s,
        ...a,
        ...!!i && {
          className: i
        },
        ...(s == null ? void 0 : s.style) && (a == null ? void 0 : a.style) && {
          style: {
            ...s.style,
            ...a.style
          }
        }
      };
    };
  const n = W(o == null ? void 0 : o.className, e == null ? void 0 : e.className);
  return {
    ...o,
    ...e,
    ...!!n && {
      className: n
    },
    ...(o == null ? void 0 : o.style) && (e == null ? void 0 : e.style) && {
      style: {
        ...o.style,
        ...e.style
      }
    }
  };
}
const OP = {
  configure: (e) => {
    process.env.NODE_ENV !== "production" && console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join(`
`)), Zi.configure(e);
  }
};
function dd(e, o) {
  if (e == null) return {};
  var n = {};
  for (var r in e) if ({}.hasOwnProperty.call(e, r)) {
    if (o.indexOf(r) !== -1) continue;
    n[r] = e[r];
  }
  return n;
}
function Si(e, o) {
  return Si = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, r) {
    return n.__proto__ = r, n;
  }, Si(e, o);
}
function fd(e, o) {
  e.prototype = Object.create(o.prototype), e.prototype.constructor = e, Si(e, o);
}
const Wc = {
  disabled: !1
};
var uy = process.env.NODE_ENV !== "production" ? t.oneOfType([t.number, t.shape({
  enter: t.number,
  exit: t.number,
  appear: t.number
}).isRequired]) : null;
process.env.NODE_ENV !== "production" && t.oneOfType([t.string, t.shape({
  enter: t.string,
  exit: t.string,
  active: t.string
}), t.shape({
  enter: t.string,
  enterDone: t.string,
  enterActive: t.string,
  exit: t.string,
  exitDone: t.string,
  exitActive: t.string
})]);
const _s = Co.createContext(null);
var dy = function(o) {
  return o.scrollTop;
}, hr = "unmounted", fn = "exited", mn = "entering", kn = "entered", Ti = "exiting", Zt = /* @__PURE__ */ function(e) {
  fd(o, e);
  function o(r, s) {
    var a;
    a = e.call(this, r, s) || this;
    var i = s, l = i && !i.isMounting ? r.enter : r.appear, c;
    return a.appearStatus = null, r.in ? l ? (c = fn, a.appearStatus = mn) : c = kn : r.unmountOnExit || r.mountOnEnter ? c = hr : c = fn, a.state = {
      status: c
    }, a.nextCallback = null, a;
  }
  o.getDerivedStateFromProps = function(s, a) {
    var i = s.in;
    return i && a.status === hr ? {
      status: fn
    } : null;
  };
  var n = o.prototype;
  return n.componentDidMount = function() {
    this.updateStatus(!0, this.appearStatus);
  }, n.componentDidUpdate = function(s) {
    var a = null;
    if (s !== this.props) {
      var i = this.state.status;
      this.props.in ? i !== mn && i !== kn && (a = mn) : (i === mn || i === kn) && (a = Ti);
    }
    this.updateStatus(!1, a);
  }, n.componentWillUnmount = function() {
    this.cancelNextCallback();
  }, n.getTimeouts = function() {
    var s = this.props.timeout, a, i, l;
    return a = i = l = s, s != null && typeof s != "number" && (a = s.exit, i = s.enter, l = s.appear !== void 0 ? s.appear : i), {
      exit: a,
      enter: i,
      appear: l
    };
  }, n.updateStatus = function(s, a) {
    if (s === void 0 && (s = !1), a !== null)
      if (this.cancelNextCallback(), a === mn) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var i = this.props.nodeRef ? this.props.nodeRef.current : Qr.findDOMNode(this);
          i && dy(i);
        }
        this.performEnter(s);
      } else
        this.performExit();
    else this.props.unmountOnExit && this.state.status === fn && this.setState({
      status: hr
    });
  }, n.performEnter = function(s) {
    var a = this, i = this.props.enter, l = this.context ? this.context.isMounting : s, c = this.props.nodeRef ? [l] : [Qr.findDOMNode(this), l], p = c[0], u = c[1], f = this.getTimeouts(), g = l ? f.appear : f.enter;
    if (!s && !i || Wc.disabled) {
      this.safeSetState({
        status: kn
      }, function() {
        a.props.onEntered(p);
      });
      return;
    }
    this.props.onEnter(p, u), this.safeSetState({
      status: mn
    }, function() {
      a.props.onEntering(p, u), a.onTransitionEnd(g, function() {
        a.safeSetState({
          status: kn
        }, function() {
          a.props.onEntered(p, u);
        });
      });
    });
  }, n.performExit = function() {
    var s = this, a = this.props.exit, i = this.getTimeouts(), l = this.props.nodeRef ? void 0 : Qr.findDOMNode(this);
    if (!a || Wc.disabled) {
      this.safeSetState({
        status: fn
      }, function() {
        s.props.onExited(l);
      });
      return;
    }
    this.props.onExit(l), this.safeSetState({
      status: Ti
    }, function() {
      s.props.onExiting(l), s.onTransitionEnd(i.exit, function() {
        s.safeSetState({
          status: fn
        }, function() {
          s.props.onExited(l);
        });
      });
    });
  }, n.cancelNextCallback = function() {
    this.nextCallback !== null && (this.nextCallback.cancel(), this.nextCallback = null);
  }, n.safeSetState = function(s, a) {
    a = this.setNextCallback(a), this.setState(s, a);
  }, n.setNextCallback = function(s) {
    var a = this, i = !0;
    return this.nextCallback = function(l) {
      i && (i = !1, a.nextCallback = null, s(l));
    }, this.nextCallback.cancel = function() {
      i = !1;
    }, this.nextCallback;
  }, n.onTransitionEnd = function(s, a) {
    this.setNextCallback(a);
    var i = this.props.nodeRef ? this.props.nodeRef.current : Qr.findDOMNode(this), l = s == null && !this.props.addEndListener;
    if (!i || l) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var c = this.props.nodeRef ? [this.nextCallback] : [i, this.nextCallback], p = c[0], u = c[1];
      this.props.addEndListener(p, u);
    }
    s != null && setTimeout(this.nextCallback, s);
  }, n.render = function() {
    var s = this.state.status;
    if (s === hr)
      return null;
    var a = this.props, i = a.children;
    a.in, a.mountOnEnter, a.unmountOnExit, a.appear, a.enter, a.exit, a.timeout, a.addEndListener, a.onEnter, a.onEntering, a.onEntered, a.onExit, a.onExiting, a.onExited, a.nodeRef;
    var l = dd(a, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ Co.createElement(_s.Provider, {
        value: null
      }, typeof i == "function" ? i(s, l) : Co.cloneElement(Co.Children.only(i), l))
    );
  }, o;
}(Co.Component);
Zt.contextType = _s;
Zt.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: t.shape({
    current: typeof Element > "u" ? t.any : function(e, o, n, r, s, a) {
      var i = e[o];
      return t.instanceOf(i && "ownerDocument" in i ? i.ownerDocument.defaultView.Element : Element)(e, o, n, r, s, a);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: t.oneOfType([t.func.isRequired, t.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: t.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: t.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: t.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: t.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: t.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: t.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function(o) {
    var n = uy;
    o.addEndListener || (n = n.isRequired);
    for (var r = arguments.length, s = new Array(r > 1 ? r - 1 : 0), a = 1; a < r; a++)
      s[a - 1] = arguments[a];
    return n.apply(void 0, [o].concat(s));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: t.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: t.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: t.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: t.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: t.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: t.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: t.func
} : {};
function En() {
}
Zt.defaultProps = {
  in: !1,
  mountOnEnter: !1,
  unmountOnExit: !1,
  appear: !1,
  enter: !0,
  exit: !0,
  onEnter: En,
  onEntering: En,
  onEntered: En,
  onExit: En,
  onExiting: En,
  onExited: En
};
Zt.UNMOUNTED = hr;
Zt.EXITED = fn;
Zt.ENTERING = mn;
Zt.ENTERED = kn;
Zt.EXITING = Ti;
function fy(e) {
  if (e === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function pl(e, o) {
  var n = function(a) {
    return o && Os(a) ? o(a) : a;
  }, r = /* @__PURE__ */ Object.create(null);
  return e && Ff.map(e, function(s) {
    return s;
  }).forEach(function(s) {
    r[s.key] = n(s);
  }), r;
}
function my(e, o) {
  e = e || {}, o = o || {};
  function n(u) {
    return u in o ? o[u] : e[u];
  }
  var r = /* @__PURE__ */ Object.create(null), s = [];
  for (var a in e)
    a in o ? s.length && (r[a] = s, s = []) : s.push(a);
  var i, l = {};
  for (var c in o) {
    if (r[c])
      for (i = 0; i < r[c].length; i++) {
        var p = r[c][i];
        l[r[c][i]] = n(p);
      }
    l[c] = n(c);
  }
  for (i = 0; i < s.length; i++)
    l[s[i]] = n(s[i]);
  return l;
}
function bn(e, o, n) {
  return n[o] != null ? n[o] : e.props[o];
}
function gy(e, o) {
  return pl(e.children, function(n) {
    return Es(n, {
      onExited: o.bind(null, n),
      in: !0,
      appear: bn(n, "appear", e),
      enter: bn(n, "enter", e),
      exit: bn(n, "exit", e)
    });
  });
}
function by(e, o, n) {
  var r = pl(e.children), s = my(o, r);
  return Object.keys(s).forEach(function(a) {
    var i = s[a];
    if (Os(i)) {
      var l = a in o, c = a in r, p = o[a], u = Os(p) && !p.props.in;
      c && (!l || u) ? s[a] = Es(i, {
        onExited: n.bind(null, i),
        in: !0,
        exit: bn(i, "exit", e),
        enter: bn(i, "enter", e)
      }) : !c && l && !u ? s[a] = Es(i, {
        in: !1
      }) : c && l && Os(p) && (s[a] = Es(i, {
        onExited: n.bind(null, i),
        in: p.props.in,
        exit: bn(i, "exit", e),
        enter: bn(i, "enter", e)
      }));
    }
  }), s;
}
var hy = Object.values || function(e) {
  return Object.keys(e).map(function(o) {
    return e[o];
  });
}, yy = {
  component: "div",
  childFactory: function(o) {
    return o;
  }
}, ul = /* @__PURE__ */ function(e) {
  fd(o, e);
  function o(r, s) {
    var a;
    a = e.call(this, r, s) || this;
    var i = a.handleExited.bind(fy(a));
    return a.state = {
      contextValue: {
        isMounting: !0
      },
      handleExited: i,
      firstRender: !0
    }, a;
  }
  var n = o.prototype;
  return n.componentDidMount = function() {
    this.mounted = !0, this.setState({
      contextValue: {
        isMounting: !1
      }
    });
  }, n.componentWillUnmount = function() {
    this.mounted = !1;
  }, o.getDerivedStateFromProps = function(s, a) {
    var i = a.children, l = a.handleExited, c = a.firstRender;
    return {
      children: c ? gy(s, l) : by(s, i, l),
      firstRender: !1
    };
  }, n.handleExited = function(s, a) {
    var i = pl(this.props.children);
    s.key in i || (s.props.onExited && s.props.onExited(a), this.mounted && this.setState(function(l) {
      var c = As({}, l.children);
      return delete c[s.key], {
        children: c
      };
    }));
  }, n.render = function() {
    var s = this.props, a = s.component, i = s.childFactory, l = dd(s, ["component", "childFactory"]), c = this.state.contextValue, p = hy(this.state.children).map(i);
    return delete l.appear, delete l.enter, delete l.exit, a === null ? /* @__PURE__ */ Co.createElement(_s.Provider, {
      value: c
    }, p) : /* @__PURE__ */ Co.createElement(_s.Provider, {
      value: c
    }, /* @__PURE__ */ Co.createElement(a, l, p));
  }, o;
}(Co.Component);
ul.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: t.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: t.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: t.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: t.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: t.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: t.func
} : {};
ul.defaultProps = yy;
const Sa = (e) => e.scrollTop;
function mo(e, o) {
  const {
    timeout: n,
    easing: r,
    style: s = {}
  } = e;
  return {
    duration: s.transitionDuration ?? (typeof n == "number" ? n : n[o.mode] || 0),
    easing: s.transitionTimingFunction ?? (typeof r == "object" ? r[o.mode] : r),
    delay: s.transitionDelay
  };
}
function vy(e) {
  return ae("MuiCollapse", e);
}
const EP = le("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]), xy = (e) => {
  const {
    orientation: o,
    classes: n
  } = e, r = {
    root: ["root", `${o}`],
    entered: ["entered"],
    hidden: ["hidden"],
    wrapper: ["wrapper", `${o}`],
    wrapperInner: ["wrapperInner", `${o}`]
  };
  return ce(r, vy, n);
}, Sy = M("div", {
  name: "MuiCollapse",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.state === "entered" && o.entered, n.state === "exited" && !n.in && n.collapsedSize === "0px" && o.hidden];
  }
})(Q(({
  theme: e
}) => ({
  height: 0,
  overflow: "hidden",
  transition: e.transitions.create("height"),
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      height: "auto",
      width: 0,
      transition: e.transitions.create("width")
    }
  }, {
    props: {
      state: "entered"
    },
    style: {
      height: "auto",
      overflow: "visible"
    }
  }, {
    props: {
      state: "entered",
      orientation: "horizontal"
    },
    style: {
      width: "auto"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.state === "exited" && !o.in && o.collapsedSize === "0px",
    style: {
      visibility: "hidden"
    }
  }]
}))), Ty = M("div", {
  name: "MuiCollapse",
  slot: "Wrapper",
  overridesResolver: (e, o) => o.wrapper
})({
  // Hack to get children with a negative margin to not falsify the height computation.
  display: "flex",
  width: "100%",
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      width: "auto",
      height: "100%"
    }
  }]
}), Cy = M("div", {
  name: "MuiCollapse",
  slot: "WrapperInner",
  overridesResolver: (e, o) => o.wrapperInner
})({
  width: "100%",
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      width: "auto",
      height: "100%"
    }
  }]
}), zn = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCollapse"
  }), {
    addEndListener: s,
    children: a,
    className: i,
    collapsedSize: l = "0px",
    component: c,
    easing: p,
    in: u,
    onEnter: f,
    onEntered: g,
    onEntering: b,
    onExit: h,
    onExited: d,
    onExiting: y,
    orientation: S = "vertical",
    style: O,
    timeout: C = rd.standard,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: T = Zt,
    ...w
  } = r, E = {
    ...r,
    orientation: S,
    collapsedSize: l
  }, $ = xy(E), P = Ot(), N = Ao(), v = m.useRef(null), R = m.useRef(), A = typeof l == "number" ? `${l}px` : l, j = S === "horizontal", k = j ? "width" : "height", D = m.useRef(null), B = Ye(n, D), _ = (q) => (ie) => {
    if (q) {
      const K = D.current;
      ie === void 0 ? q(K) : q(K, ie);
    }
  }, H = () => v.current ? v.current[j ? "clientWidth" : "clientHeight"] : 0, U = _((q, ie) => {
    v.current && j && (v.current.style.position = "absolute"), q.style[k] = A, f && f(q, ie);
  }), F = _((q, ie) => {
    const K = H();
    v.current && j && (v.current.style.position = "");
    const {
      duration: de,
      easing: oe
    } = mo({
      style: O,
      timeout: C,
      easing: p
    }, {
      mode: "enter"
    });
    if (C === "auto") {
      const he = P.transitions.getAutoHeightDuration(K);
      q.style.transitionDuration = `${he}ms`, R.current = he;
    } else
      q.style.transitionDuration = typeof de == "string" ? de : `${de}ms`;
    q.style[k] = `${K}px`, q.style.transitionTimingFunction = oe, b && b(q, ie);
  }), V = _((q, ie) => {
    q.style[k] = "auto", g && g(q, ie);
  }), me = _((q) => {
    q.style[k] = `${H()}px`, h && h(q);
  }), G = _(d), X = _((q) => {
    const ie = H(), {
      duration: K,
      easing: de
    } = mo({
      style: O,
      timeout: C,
      easing: p
    }, {
      mode: "exit"
    });
    if (C === "auto") {
      const oe = P.transitions.getAutoHeightDuration(ie);
      q.style.transitionDuration = `${oe}ms`, R.current = oe;
    } else
      q.style.transitionDuration = typeof K == "string" ? K : `${K}ms`;
    q.style[k] = A, q.style.transitionTimingFunction = de, y && y(q);
  }), Y = (q) => {
    C === "auto" && N.start(R.current || 0, q), s && s(D.current, q);
  };
  return /* @__PURE__ */ x.jsx(T, {
    in: u,
    onEnter: U,
    onEntered: V,
    onEntering: F,
    onExit: me,
    onExited: G,
    onExiting: X,
    addEndListener: Y,
    nodeRef: D,
    timeout: C === "auto" ? null : C,
    ...w,
    children: (q, {
      ownerState: ie,
      ...K
    }) => /* @__PURE__ */ x.jsx(Sy, {
      as: c,
      className: W($.root, i, {
        entered: $.entered,
        exited: !u && A === "0px" && $.hidden
      }[q]),
      style: {
        [j ? "minWidth" : "minHeight"]: A,
        ...O
      },
      ref: B,
      ownerState: {
        ...E,
        state: q
      },
      ...K,
      children: /* @__PURE__ */ x.jsx(Ty, {
        ownerState: {
          ...E,
          state: q
        },
        className: $.wrapper,
        ref: v,
        children: /* @__PURE__ */ x.jsx(Cy, {
          ownerState: {
            ...E,
            state: q
          },
          className: $.wrapperInner,
          children: a
        })
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (zn.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * The content node to be collapsed.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The width (horizontal) or height (vertical) of the container when collapsed.
   * @default '0px'
   */
  collapsedSize: t.oneOfType([t.number, t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: en,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * The transition orientation.
   * @default 'vertical'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default duration.standard
   */
  timeout: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
zn && (zn.muiSupportAuto = !0);
function wy(e) {
  return ae("MuiPaper", e);
}
const RP = le("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]), Oy = (e) => {
  const {
    square: o,
    elevation: n,
    variant: r,
    classes: s
  } = e, a = {
    root: ["root", r, !o && "rounded", r === "elevation" && `elevation${n}`]
  };
  return ce(a, wy, s);
}, Ey = M("div", {
  name: "MuiPaper",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], !n.square && o.rounded, n.variant === "elevation" && o[`elevation${n.elevation}`]];
  }
})(Q(({
  theme: e
}) => ({
  backgroundColor: (e.vars || e).palette.background.paper,
  color: (e.vars || e).palette.text.primary,
  transition: e.transitions.create("box-shadow"),
  variants: [{
    props: ({
      ownerState: o
    }) => !o.square,
    style: {
      borderRadius: e.shape.borderRadius
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      border: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: {
      variant: "elevation"
    },
    style: {
      boxShadow: "var(--Paper-shadow)",
      backgroundImage: "var(--Paper-overlay)"
    }
  }]
}))), Qt = /* @__PURE__ */ m.forwardRef(function(o, n) {
  var b;
  const r = pe({
    props: o,
    name: "MuiPaper"
  }), s = Ot(), {
    className: a,
    component: i = "div",
    elevation: l = 1,
    square: c = !1,
    variant: p = "elevation",
    ...u
  } = r, f = {
    ...r,
    component: i,
    elevation: l,
    square: c,
    variant: p
  }, g = Oy(f);
  return process.env.NODE_ENV !== "production" && s.shadows[l] === void 0 && console.error([`MUI: The elevation provided <Paper elevation={${l}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${l}]\` is defined.`].join(`
`)), /* @__PURE__ */ x.jsx(Ey, {
    as: i,
    ownerState: f,
    className: W(g.root, a),
    ref: n,
    ...u,
    style: {
      ...p === "elevation" && {
        "--Paper-shadow": (s.vars || s).shadows[l],
        ...s.vars && {
          "--Paper-overlay": (b = s.vars.overlays) == null ? void 0 : b[l]
        },
        ...!s.vars && s.palette.mode === "dark" && {
          "--Paper-overlay": `linear-gradient(${Ne("#fff", xi(l))}, ${Ne("#fff", xi(l))})`
        }
      },
      ...u.style
    }
  });
});
process.env.NODE_ENV !== "production" && (Qt.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */
  elevation: xt(mt, (e) => {
    const {
      elevation: o,
      variant: n
    } = e;
    return o > 0 && n === "outlined" ? new Error(`MUI: Combining \`elevation={${o}}\` with \`variant="${n}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`) : null;
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: t.bool,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'elevation'
   */
  variant: t.oneOfType([t.oneOf(["elevation", "outlined"]), t.string])
});
const dl = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (dl.displayName = "AccordionContext");
function je(e, o) {
  const {
    className: n,
    elementType: r,
    ownerState: s,
    externalForwardedProps: a,
    internalForwardedProps: i,
    shouldForwardComponentProp: l = !1,
    ...c
  } = o, {
    component: p,
    slots: u = {
      [e]: void 0
    },
    slotProps: f = {
      [e]: void 0
    },
    ...g
  } = a, b = u[e] || r, h = Ku(f[e], s), {
    props: {
      component: d,
      ...y
    },
    internalRef: S
  } = Yu({
    className: n,
    ...c,
    externalForwardedProps: e === "root" ? g : void 0,
    externalSlotProps: h
  }), O = Ye(S, h == null ? void 0 : h.ref, o.ref), C = e === "root" ? d || p : d, T = qu(b, {
    ...e === "root" && !p && !u[e] && i,
    ...e !== "root" && !u[e] && i,
    ...y,
    ...C && !l && {
      as: C
    },
    ...C && l && {
      component: C
    },
    ref: O
  }, s);
  return [b, T];
}
function Ry(e) {
  return ae("MuiAccordion", e);
}
const ls = le("MuiAccordion", ["root", "heading", "rounded", "expanded", "disabled", "gutters", "region"]), $y = (e) => {
  const {
    classes: o,
    square: n,
    expanded: r,
    disabled: s,
    disableGutters: a
  } = e;
  return ce({
    root: ["root", !n && "rounded", r && "expanded", s && "disabled", !a && "gutters"],
    heading: ["heading"],
    region: ["region"]
  }, Ry, o);
}, ky = M(Qt, {
  name: "MuiAccordion",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${ls.region}`]: o.region
    }, o.root, !n.square && o.rounded, !n.disableGutters && o.gutters];
  }
})(Q(({
  theme: e
}) => {
  const o = {
    duration: e.transitions.duration.shortest
  };
  return {
    position: "relative",
    transition: e.transitions.create(["margin"], o),
    overflowAnchor: "none",
    // Keep the same scrolling position
    "&::before": {
      position: "absolute",
      left: 0,
      top: -1,
      right: 0,
      height: 1,
      content: '""',
      opacity: 1,
      backgroundColor: (e.vars || e).palette.divider,
      transition: e.transitions.create(["opacity", "background-color"], o)
    },
    "&:first-of-type": {
      "&::before": {
        display: "none"
      }
    },
    [`&.${ls.expanded}`]: {
      "&::before": {
        opacity: 0
      },
      "&:first-of-type": {
        marginTop: 0
      },
      "&:last-of-type": {
        marginBottom: 0
      },
      "& + &": {
        "&::before": {
          display: "none"
        }
      }
    },
    [`&.${ls.disabled}`]: {
      backgroundColor: (e.vars || e).palette.action.disabledBackground
    }
  };
}), Q(({
  theme: e
}) => ({
  variants: [{
    props: (o) => !o.square,
    style: {
      borderRadius: 0,
      "&:first-of-type": {
        borderTopLeftRadius: (e.vars || e).shape.borderRadius,
        borderTopRightRadius: (e.vars || e).shape.borderRadius
      },
      "&:last-of-type": {
        borderBottomLeftRadius: (e.vars || e).shape.borderRadius,
        borderBottomRightRadius: (e.vars || e).shape.borderRadius,
        // Fix a rendering issue on Edge
        "@supports (-ms-ime-align: auto)": {
          borderBottomLeftRadius: 0,
          borderBottomRightRadius: 0
        }
      }
    }
  }, {
    props: (o) => !o.disableGutters,
    style: {
      [`&.${ls.expanded}`]: {
        margin: "16px 0"
      }
    }
  }]
}))), Py = M("h3", {
  name: "MuiAccordion",
  slot: "Heading",
  overridesResolver: (e, o) => o.heading
})({
  all: "unset"
}), Ny = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAccordion"
  }), {
    children: s,
    className: a,
    defaultExpanded: i = !1,
    disabled: l = !1,
    disableGutters: c = !1,
    expanded: p,
    onChange: u,
    square: f = !1,
    slots: g = {},
    slotProps: b = {},
    TransitionComponent: h,
    TransitionProps: d,
    ...y
  } = r, [S, O] = Kt({
    controlled: p,
    default: i,
    name: "Accordion",
    state: "expanded"
  }), C = m.useCallback((B) => {
    O(!S), u && u(B, !S);
  }, [S, u, O]), [T, ...w] = m.Children.toArray(s), E = m.useMemo(() => ({
    expanded: S,
    disabled: l,
    disableGutters: c,
    toggle: C
  }), [S, l, c, C]), $ = {
    ...r,
    square: f,
    disabled: l,
    disableGutters: c,
    expanded: S
  }, P = $y($), N = {
    transition: h,
    ...g
  }, v = {
    transition: d,
    ...b
  }, R = {
    slots: N,
    slotProps: v
  }, [A, j] = je("heading", {
    elementType: Py,
    externalForwardedProps: R,
    className: P.heading,
    ownerState: $
  }), [k, D] = je("transition", {
    elementType: zn,
    externalForwardedProps: R,
    ownerState: $
  });
  return /* @__PURE__ */ x.jsxs(ky, {
    className: W(P.root, a),
    ref: n,
    ownerState: $,
    square: f,
    ...y,
    children: [/* @__PURE__ */ x.jsx(A, {
      ...j,
      children: /* @__PURE__ */ x.jsx(dl.Provider, {
        value: E,
        children: T
      })
    }), /* @__PURE__ */ x.jsx(k, {
      in: S,
      timeout: "auto",
      ...D,
      children: /* @__PURE__ */ x.jsx("div", {
        "aria-labelledby": T.props.id,
        id: T.props["aria-controls"],
        role: "region",
        className: P.region,
        children: w
      })
    })]
  });
});
process.env.NODE_ENV !== "production" && (Ny.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: xt(t.node.isRequired, (e) => {
    const o = m.Children.toArray(e.children)[0];
    return Ft.isFragment(o) ? new Error("MUI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.") : /* @__PURE__ */ m.isValidElement(o) ? null : new Error("MUI: Expected the first child of Accordion to be a valid element.");
  }),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, expands the accordion by default.
   * @default false
   */
  defaultExpanded: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, it removes the margin between two expanded accordion items and the increase of height.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, expands the accordion, otherwise collapse it.
   * Setting this prop enables control over the accordion.
   */
  expanded: t.bool,
  /**
   * Callback fired when the expand/collapse state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {boolean} expanded The `expanded` state of the accordion.
   */
  onChange: t.func,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    heading: t.oneOfType([t.func, t.object]),
    transition: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    heading: t.elementType,
    transition: t.elementType
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: t.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionProps: t.object
});
function Iy(e) {
  return ae("MuiAccordionActions", e);
}
const $P = le("MuiAccordionActions", ["root", "spacing"]), jy = (e) => {
  const {
    classes: o,
    disableSpacing: n
  } = e;
  return ce({
    root: ["root", !n && "spacing"]
  }, Iy, o);
}, My = M("div", {
  name: "MuiAccordionActions",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableSpacing && o.spacing];
  }
})({
  display: "flex",
  alignItems: "center",
  padding: 8,
  justifyContent: "flex-end",
  variants: [{
    props: (e) => !e.disableSpacing,
    style: {
      "& > :not(style) ~ :not(style)": {
        marginLeft: 8
      }
    }
  }]
}), Ay = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAccordionActions"
  }), {
    className: s,
    disableSpacing: a = !1,
    ...i
  } = r, l = {
    ...r,
    disableSpacing: a
  }, c = jy(l);
  return /* @__PURE__ */ x.jsx(My, {
    className: W(c.root, s),
    ref: n,
    ownerState: l,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (Ay.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function By(e) {
  return ae("MuiAccordionDetails", e);
}
const kP = le("MuiAccordionDetails", ["root"]), Ly = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, By, o);
}, Dy = M("div", {
  name: "MuiAccordionDetails",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => ({
  padding: e.spacing(1, 2, 2)
}))), zy = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAccordionDetails"
  }), {
    className: s,
    ...a
  } = r, i = r, l = Ly(i);
  return /* @__PURE__ */ x.jsx(Dy, {
    className: W(l.root, s),
    ref: n,
    ownerState: i,
    ...a
  });
});
process.env.NODE_ENV !== "production" && (zy.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
class Ws {
  constructor() {
    tr(this, "mountEffect", () => {
      this.shouldMount && !this.didMount && this.ref.current !== null && (this.didMount = !0, this.mounted.resolve());
    });
    this.ref = {
      current: null
    }, this.mounted = null, this.didMount = !1, this.shouldMount = !1, this.setShouldMount = null;
  }
  /** React ref to the ripple instance */
  /** If the ripple component should be mounted */
  /** Promise that resolves when the ripple component is mounted */
  /** If the ripple component has been mounted */
  /** React state hook setter */
  static create() {
    return new Ws();
  }
  static use() {
    const o = Vu(Ws.create).current, [n, r] = m.useState(!1);
    return o.shouldMount = n, o.setShouldMount = r, m.useEffect(o.mountEffect, [n]), o;
  }
  mount() {
    return this.mounted || (this.mounted = Vy(), this.shouldMount = !0, this.setShouldMount(this.shouldMount)), this.mounted;
  }
  /* Ripple API */
  start(...o) {
    this.mount().then(() => {
      var n;
      return (n = this.ref.current) == null ? void 0 : n.start(...o);
    });
  }
  stop(...o) {
    this.mount().then(() => {
      var n;
      return (n = this.ref.current) == null ? void 0 : n.stop(...o);
    });
  }
  pulsate(...o) {
    this.mount().then(() => {
      var n;
      return (n = this.ref.current) == null ? void 0 : n.pulsate(...o);
    });
  }
}
function Fy() {
  return Ws.use();
}
function Vy() {
  let e, o;
  const n = new Promise((r, s) => {
    e = r, o = s;
  });
  return n.resolve = e, n.reject = o, n;
}
function md(e) {
  const {
    className: o,
    classes: n,
    pulsate: r = !1,
    rippleX: s,
    rippleY: a,
    rippleSize: i,
    in: l,
    onExited: c,
    timeout: p
  } = e, [u, f] = m.useState(!1), g = W(o, n.ripple, n.rippleVisible, r && n.ripplePulsate), b = {
    width: i,
    height: i,
    top: -(i / 2) + a,
    left: -(i / 2) + s
  }, h = W(n.child, u && n.childLeaving, r && n.childPulsate);
  return !l && !u && f(!0), m.useEffect(() => {
    if (!l && c != null) {
      const d = setTimeout(c, p);
      return () => {
        clearTimeout(d);
      };
    }
  }, [c, l, p]), /* @__PURE__ */ x.jsx("span", {
    className: g,
    style: b,
    children: /* @__PURE__ */ x.jsx("span", {
      className: h
    })
  });
}
process.env.NODE_ENV !== "production" && (md.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object.isRequired,
  className: t.string,
  /**
   * @ignore - injected from TransitionGroup
   */
  in: t.bool,
  /**
   * @ignore - injected from TransitionGroup
   */
  onExited: t.func,
  /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */
  pulsate: t.bool,
  /**
   * Diameter of the ripple.
   */
  rippleSize: t.number,
  /**
   * Horizontal position of the ripple center.
   */
  rippleX: t.number,
  /**
   * Vertical position of the ripple center.
   */
  rippleY: t.number,
  /**
   * exit delay
   */
  timeout: t.number.isRequired
});
function PP(e) {
  return ae("MuiTouchRipple", e);
}
const oo = le("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]), Ci = 550, _y = 80, Wy = No`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`, Uy = No`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`, Hy = No`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`, Gy = M("span", {
  name: "MuiTouchRipple",
  slot: "Root"
})({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  zIndex: 0,
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit"
}), qy = M(md, {
  name: "MuiTouchRipple",
  slot: "Ripple"
})`
  opacity: 0;
  position: absolute;

  &.${oo.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${Wy};
    animation-duration: ${Ci}ms;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
  }

  &.${oo.ripplePulsate} {
    animation-duration: ${({
  theme: e
}) => e.transitions.duration.shorter}ms;
  }

  & .${oo.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${oo.childLeaving} {
    opacity: 0;
    animation-name: ${Uy};
    animation-duration: ${Ci}ms;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
  }

  & .${oo.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${Hy};
    animation-duration: 2500ms;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`, gd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTouchRipple"
  }), {
    center: s = !1,
    classes: a = {},
    className: i,
    ...l
  } = r, [c, p] = m.useState([]), u = m.useRef(0), f = m.useRef(null);
  m.useEffect(() => {
    f.current && (f.current(), f.current = null);
  }, [c]);
  const g = m.useRef(!1), b = Ao(), h = m.useRef(null), d = m.useRef(null), y = m.useCallback((T) => {
    const {
      pulsate: w,
      rippleX: E,
      rippleY: $,
      rippleSize: P,
      cb: N
    } = T;
    p((v) => [...v, /* @__PURE__ */ x.jsx(qy, {
      classes: {
        ripple: W(a.ripple, oo.ripple),
        rippleVisible: W(a.rippleVisible, oo.rippleVisible),
        ripplePulsate: W(a.ripplePulsate, oo.ripplePulsate),
        child: W(a.child, oo.child),
        childLeaving: W(a.childLeaving, oo.childLeaving),
        childPulsate: W(a.childPulsate, oo.childPulsate)
      },
      timeout: Ci,
      pulsate: w,
      rippleX: E,
      rippleY: $,
      rippleSize: P
    }, u.current)]), u.current += 1, f.current = N;
  }, [a]), S = m.useCallback((T = {}, w = {}, E = () => {
  }) => {
    const {
      pulsate: $ = !1,
      center: P = s || w.pulsate,
      fakeElement: N = !1
      // For test purposes
    } = w;
    if ((T == null ? void 0 : T.type) === "mousedown" && g.current) {
      g.current = !1;
      return;
    }
    (T == null ? void 0 : T.type) === "touchstart" && (g.current = !0);
    const v = N ? null : d.current, R = v ? v.getBoundingClientRect() : {
      width: 0,
      height: 0,
      left: 0,
      top: 0
    };
    let A, j, k;
    if (P || T === void 0 || T.clientX === 0 && T.clientY === 0 || !T.clientX && !T.touches)
      A = Math.round(R.width / 2), j = Math.round(R.height / 2);
    else {
      const {
        clientX: D,
        clientY: B
      } = T.touches && T.touches.length > 0 ? T.touches[0] : T;
      A = Math.round(D - R.left), j = Math.round(B - R.top);
    }
    if (P)
      k = Math.sqrt((2 * R.width ** 2 + R.height ** 2) / 3), k % 2 === 0 && (k += 1);
    else {
      const D = Math.max(Math.abs((v ? v.clientWidth : 0) - A), A) * 2 + 2, B = Math.max(Math.abs((v ? v.clientHeight : 0) - j), j) * 2 + 2;
      k = Math.sqrt(D ** 2 + B ** 2);
    }
    T != null && T.touches ? h.current === null && (h.current = () => {
      y({
        pulsate: $,
        rippleX: A,
        rippleY: j,
        rippleSize: k,
        cb: E
      });
    }, b.start(_y, () => {
      h.current && (h.current(), h.current = null);
    })) : y({
      pulsate: $,
      rippleX: A,
      rippleY: j,
      rippleSize: k,
      cb: E
    });
  }, [s, y, b]), O = m.useCallback(() => {
    S({}, {
      pulsate: !0
    });
  }, [S]), C = m.useCallback((T, w) => {
    if (b.clear(), (T == null ? void 0 : T.type) === "touchend" && h.current) {
      h.current(), h.current = null, b.start(0, () => {
        C(T, w);
      });
      return;
    }
    h.current = null, p((E) => E.length > 0 ? E.slice(1) : E), f.current = w;
  }, [b]);
  return m.useImperativeHandle(n, () => ({
    pulsate: O,
    start: S,
    stop: C
  }), [O, S, C]), /* @__PURE__ */ x.jsx(Gy, {
    className: W(oo.root, a.root, i),
    ref: d,
    ...l,
    children: /* @__PURE__ */ x.jsx(ul, {
      component: null,
      exit: !0,
      children: c
    })
  });
});
process.env.NODE_ENV !== "production" && (gd.propTypes = {
  /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */
  center: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string
});
function Yy(e) {
  return ae("MuiButtonBase", e);
}
const Ky = le("MuiButtonBase", ["root", "disabled", "focusVisible"]), Xy = (e) => {
  const {
    disabled: o,
    focusVisible: n,
    focusVisibleClassName: r,
    classes: s
  } = e, i = ce({
    root: ["root", o && "disabled", n && "focusVisible"]
  }, Yy, s);
  return n && r && (i.root += ` ${r}`), i;
}, Jy = M("button", {
  name: "MuiButtonBase",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  boxSizing: "border-box",
  WebkitTapHighlightColor: "transparent",
  backgroundColor: "transparent",
  // Reset default value
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  border: 0,
  margin: 0,
  // Remove the margin in Safari
  borderRadius: 0,
  padding: 0,
  // Remove the padding in Firefox
  cursor: "pointer",
  userSelect: "none",
  verticalAlign: "middle",
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // Reset
  textDecoration: "none",
  // So we take precedent over the style of a native <a /> element.
  color: "inherit",
  "&::-moz-focus-inner": {
    borderStyle: "none"
    // Remove Firefox dotted outline.
  },
  [`&.${Ky.disabled}`]: {
    pointerEvents: "none",
    // Disable link interactions
    cursor: "default"
  },
  "@media print": {
    colorAdjust: "exact"
  }
}), wt = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiButtonBase"
  }), {
    action: s,
    centerRipple: a = !1,
    children: i,
    className: l,
    component: c = "button",
    disabled: p = !1,
    disableRipple: u = !1,
    disableTouchRipple: f = !1,
    focusRipple: g = !1,
    focusVisibleClassName: b,
    LinkComponent: h = "a",
    onBlur: d,
    onClick: y,
    onContextMenu: S,
    onDragLeave: O,
    onFocus: C,
    onFocusVisible: T,
    onKeyDown: w,
    onKeyUp: E,
    onMouseDown: $,
    onMouseLeave: P,
    onMouseUp: N,
    onTouchEnd: v,
    onTouchMove: R,
    onTouchStart: A,
    tabIndex: j = 0,
    TouchRippleProps: k,
    touchRippleRef: D,
    type: B,
    ..._
  } = r, H = m.useRef(null), U = Fy(), F = Ye(U.ref, D), [V, me] = m.useState(!1);
  p && V && me(!1), m.useImperativeHandle(s, () => ({
    focusVisible: () => {
      me(!0), H.current.focus();
    }
  }), []);
  const G = U.shouldMount && !u && !p;
  m.useEffect(() => {
    V && g && !u && U.pulsate();
  }, [u, g, V, U]);
  const X = jo(U, "start", $, f), Y = jo(U, "stop", S, f), q = jo(U, "stop", O, f), ie = jo(U, "stop", N, f), K = jo(U, "stop", (J) => {
    V && J.preventDefault(), P && P(J);
  }, f), de = jo(U, "start", A, f), oe = jo(U, "stop", v, f), he = jo(U, "stop", R, f), z = jo(U, "stop", (J) => {
    ko(J.target) || me(!1), d && d(J);
  }, !1), be = pt((J) => {
    H.current || (H.current = J.currentTarget), ko(J.target) && (me(!0), T && T(J)), C && C(J);
  }), ye = () => {
    const J = H.current;
    return c && c !== "button" && !(J.tagName === "A" && J.href);
  }, Pe = pt((J) => {
    g && !J.repeat && V && J.key === " " && U.stop(J, () => {
      U.start(J);
    }), J.target === J.currentTarget && ye() && J.key === " " && J.preventDefault(), w && w(J), J.target === J.currentTarget && ye() && J.key === "Enter" && !p && (J.preventDefault(), y && y(J));
  }), Te = pt((J) => {
    g && J.key === " " && V && !J.defaultPrevented && U.stop(J, () => {
      U.pulsate(J);
    }), E && E(J), y && J.target === J.currentTarget && ye() && J.key === " " && !J.defaultPrevented && y(J);
  });
  let Z = c;
  Z === "button" && (_.href || _.to) && (Z = h);
  const $e = {};
  Z === "button" ? ($e.type = B === void 0 ? "button" : B, $e.disabled = p) : (!_.href && !_.to && ($e.role = "button"), p && ($e["aria-disabled"] = p));
  const Oe = Ye(n, H), Me = {
    ...r,
    centerRipple: a,
    component: c,
    disabled: p,
    disableRipple: u,
    disableTouchRipple: f,
    focusRipple: g,
    tabIndex: j,
    focusVisible: V
  }, I = Xy(Me);
  return /* @__PURE__ */ x.jsxs(Jy, {
    as: Z,
    className: W(I.root, l),
    ownerState: Me,
    onBlur: z,
    onClick: y,
    onContextMenu: Y,
    onFocus: be,
    onKeyDown: Pe,
    onKeyUp: Te,
    onMouseDown: X,
    onMouseLeave: K,
    onMouseUp: ie,
    onDragLeave: q,
    onTouchEnd: oe,
    onTouchMove: he,
    onTouchStart: de,
    ref: Oe,
    tabIndex: p ? -1 : j,
    type: B,
    ...$e,
    ..._,
    children: [i, G ? /* @__PURE__ */ x.jsx(gd, {
      ref: F,
      center: a,
      ...k
    }) : null]
  });
});
function jo(e, o, n, r = !1) {
  return pt((s) => (n && n(s), r || e[o](s), !0));
}
process.env.NODE_ENV !== "production" && (wt.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: Nt,
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: en,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: t.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: t.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  href: t.any,
  /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */
  LinkComponent: t.elementType,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * @ignore
   */
  onContextMenu: t.func,
  /**
   * @ignore
   */
  onDragLeave: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onKeyUp: t.func,
  /**
   * @ignore
   */
  onMouseDown: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * @ignore
   */
  onMouseUp: t.func,
  /**
   * @ignore
   */
  onTouchEnd: t.func,
  /**
   * @ignore
   */
  onTouchMove: t.func,
  /**
   * @ignore
   */
  onTouchStart: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @default 0
   */
  tabIndex: t.number,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: t.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      pulsate: t.func.isRequired,
      start: t.func.isRequired,
      stop: t.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  type: t.oneOfType([t.oneOf(["button", "reset", "submit"]), t.string])
});
function Zy(e) {
  return ae("MuiAccordionSummary", e);
}
const Nn = le("MuiAccordionSummary", ["root", "expanded", "focusVisible", "disabled", "gutters", "contentGutters", "content", "expandIconWrapper"]), Qy = (e) => {
  const {
    classes: o,
    expanded: n,
    disabled: r,
    disableGutters: s
  } = e;
  return ce({
    root: ["root", n && "expanded", r && "disabled", !s && "gutters"],
    focusVisible: ["focusVisible"],
    content: ["content", n && "expanded", !s && "contentGutters"],
    expandIconWrapper: ["expandIconWrapper", n && "expanded"]
  }, Zy, o);
}, ev = M(wt, {
  name: "MuiAccordionSummary",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => {
  const o = {
    duration: e.transitions.duration.shortest
  };
  return {
    display: "flex",
    width: "100%",
    minHeight: 48,
    padding: e.spacing(0, 2),
    transition: e.transitions.create(["min-height", "background-color"], o),
    [`&.${Nn.focusVisible}`]: {
      backgroundColor: (e.vars || e).palette.action.focus
    },
    [`&.${Nn.disabled}`]: {
      opacity: (e.vars || e).palette.action.disabledOpacity
    },
    [`&:hover:not(.${Nn.disabled})`]: {
      cursor: "pointer"
    },
    variants: [{
      props: (n) => !n.disableGutters,
      style: {
        [`&.${Nn.expanded}`]: {
          minHeight: 64
        }
      }
    }]
  };
})), tv = M("span", {
  name: "MuiAccordionSummary",
  slot: "Content",
  overridesResolver: (e, o) => o.content
})(Q(({
  theme: e
}) => ({
  display: "flex",
  textAlign: "start",
  flexGrow: 1,
  margin: "12px 0",
  variants: [{
    props: (o) => !o.disableGutters,
    style: {
      transition: e.transitions.create(["margin"], {
        duration: e.transitions.duration.shortest
      }),
      [`&.${Nn.expanded}`]: {
        margin: "20px 0"
      }
    }
  }]
}))), ov = M("span", {
  name: "MuiAccordionSummary",
  slot: "ExpandIconWrapper",
  overridesResolver: (e, o) => o.expandIconWrapper
})(Q(({
  theme: e
}) => ({
  display: "flex",
  color: (e.vars || e).palette.action.active,
  transform: "rotate(0deg)",
  transition: e.transitions.create("transform", {
    duration: e.transitions.duration.shortest
  }),
  [`&.${Nn.expanded}`]: {
    transform: "rotate(180deg)"
  }
}))), nv = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAccordionSummary"
  }), {
    children: s,
    className: a,
    expandIcon: i,
    focusVisibleClassName: l,
    onClick: c,
    ...p
  } = r, {
    disabled: u = !1,
    disableGutters: f,
    expanded: g,
    toggle: b
  } = m.useContext(dl), h = (S) => {
    b && b(S), c && c(S);
  }, d = {
    ...r,
    expanded: g,
    disabled: u,
    disableGutters: f
  }, y = Qy(d);
  return /* @__PURE__ */ x.jsxs(ev, {
    focusRipple: !1,
    disableRipple: !0,
    disabled: u,
    "aria-expanded": g,
    className: W(y.root, a),
    focusVisibleClassName: W(y.focusVisible, l),
    onClick: h,
    ref: n,
    ownerState: d,
    ...p,
    children: [/* @__PURE__ */ x.jsx(tv, {
      className: y.content,
      ownerState: d,
      children: s
    }), i && /* @__PURE__ */ x.jsx(ov, {
      className: y.expandIconWrapper,
      ownerState: d,
      children: i
    })]
  });
});
process.env.NODE_ENV !== "production" && (nv.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display as the expand indicator.
   */
  expandIcon: t.node,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function rv(e) {
  return typeof e.main == "string";
}
function sv(e, o = []) {
  if (!rv(e))
    return !1;
  for (const n of o)
    if (!e.hasOwnProperty(n) || typeof e[n] != "string")
      return !1;
  return !0;
}
function Ue(e = []) {
  return ([, o]) => o && sv(o, e);
}
function av(e) {
  return ae("MuiAlert", e);
}
const Uc = le("MuiAlert", ["root", "action", "icon", "message", "filled", "colorSuccess", "colorInfo", "colorWarning", "colorError", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
function iv(e) {
  return ae("MuiCircularProgress", e);
}
const NP = le("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]), Uo = 44, wi = No`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`, Oi = No`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`, lv = typeof wi != "string" ? tn`
        animation: ${wi} 1.4s linear infinite;
      ` : null, cv = typeof Oi != "string" ? tn`
        animation: ${Oi} 1.4s ease-in-out infinite;
      ` : null, pv = (e) => {
  const {
    classes: o,
    variant: n,
    color: r,
    disableShrink: s
  } = e, a = {
    root: ["root", n, `color${L(r)}`],
    svg: ["svg"],
    circle: ["circle", `circle${L(n)}`, s && "circleDisableShrink"]
  };
  return ce(a, iv, o);
}, uv = M("span", {
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`color${L(n.color)}`]];
  }
})(Q(({
  theme: e
}) => ({
  display: "inline-block",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: e.transitions.create("transform")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    style: lv || {
      animation: `${wi} 1.4s linear infinite`
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      color: (e.vars || e).palette[o].main
    }
  }))]
}))), dv = M("svg", {
  name: "MuiCircularProgress",
  slot: "Svg",
  overridesResolver: (e, o) => o.svg
})({
  display: "block"
  // Keeps the progress centered
}), fv = M("circle", {
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.circle, o[`circle${L(n.variant)}`], n.disableShrink && o.circleDisableShrink];
  }
})(Q(({
  theme: e
}) => ({
  stroke: "currentColor",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: e.transitions.create("stroke-dashoffset")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    style: {
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: "80px, 200px",
      strokeDashoffset: 0
      // Add the unit to fix a Edge 16 and below bug.
    }
  }, {
    props: ({
      ownerState: o
    }) => o.variant === "indeterminate" && !o.disableShrink,
    style: cv || {
      // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
      animation: `${Oi} 1.4s ease-in-out infinite`
    }
  }]
}))), fl = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCircularProgress"
  }), {
    className: s,
    color: a = "primary",
    disableShrink: i = !1,
    size: l = 40,
    style: c,
    thickness: p = 3.6,
    value: u = 0,
    variant: f = "indeterminate",
    ...g
  } = r, b = {
    ...r,
    color: a,
    disableShrink: i,
    size: l,
    thickness: p,
    value: u,
    variant: f
  }, h = pv(b), d = {}, y = {}, S = {};
  if (f === "determinate") {
    const O = 2 * Math.PI * ((Uo - p) / 2);
    d.strokeDasharray = O.toFixed(3), S["aria-valuenow"] = Math.round(u), d.strokeDashoffset = `${((100 - u) / 100 * O).toFixed(3)}px`, y.transform = "rotate(-90deg)";
  }
  return /* @__PURE__ */ x.jsx(uv, {
    className: W(h.root, s),
    style: {
      width: l,
      height: l,
      ...y,
      ...c
    },
    ownerState: b,
    ref: n,
    role: "progressbar",
    ...S,
    ...g,
    children: /* @__PURE__ */ x.jsx(dv, {
      className: h.svg,
      ownerState: b,
      viewBox: `${Uo / 2} ${Uo / 2} ${Uo} ${Uo}`,
      children: /* @__PURE__ */ x.jsx(fv, {
        className: h.circle,
        style: d,
        ownerState: b,
        cx: Uo,
        cy: Uo,
        r: (Uo - p) / 2,
        fill: "none",
        strokeWidth: p
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (fl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the shrink animation is disabled.
   * This only works if variant is `indeterminate`.
   * @default false
   */
  disableShrink: xt(t.bool, (e) => e.disableShrink && e.variant && e.variant !== "indeterminate" ? new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.") : null),
  /**
   * The size of the component.
   * If using a number, the pixel unit is assumed.
   * If using a string, you need to provide the CSS unit, for example '3rem'.
   * @default 40
   */
  size: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The thickness of the circle.
   * @default 3.6
   */
  thickness: t.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   * @default 0
   */
  value: t.number,
  /**
   * The variant to use.
   * Use indeterminate when there is no progress value.
   * @default 'indeterminate'
   */
  variant: t.oneOf(["determinate", "indeterminate"])
});
function mv(e) {
  return ae("MuiIconButton", e);
}
const Hc = le("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge", "loading", "loadingIndicator", "loadingWrapper"]), gv = (e) => {
  const {
    classes: o,
    disabled: n,
    color: r,
    edge: s,
    size: a,
    loading: i
  } = e, l = {
    root: ["root", i && "loading", n && "disabled", r !== "default" && `color${L(r)}`, s && `edge${L(s)}`, `size${L(a)}`],
    loadingIndicator: ["loadingIndicator"],
    loadingWrapper: ["loadingWrapper"]
  };
  return ce(l, mv, o);
}, bv = M(wt, {
  name: "MuiIconButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.loading && o.loading, n.color !== "default" && o[`color${L(n.color)}`], n.edge && o[`edge${L(n.edge)}`], o[`size${L(n.size)}`]];
  }
})(Q(({
  theme: e
}) => ({
  textAlign: "center",
  flex: "0 0 auto",
  fontSize: e.typography.pxToRem(24),
  padding: 8,
  borderRadius: "50%",
  color: (e.vars || e).palette.action.active,
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  }),
  variants: [{
    props: (o) => !o.disableRipple,
    style: {
      "--IconButton-hoverBg": e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette.action.active, e.palette.action.hoverOpacity),
      "&:hover": {
        backgroundColor: "var(--IconButton-hoverBg)",
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: {
      edge: "start"
    },
    style: {
      marginLeft: -12
    }
  }, {
    props: {
      edge: "start",
      size: "small"
    },
    style: {
      marginLeft: -3
    }
  }, {
    props: {
      edge: "end"
    },
    style: {
      marginRight: -12
    }
  }, {
    props: {
      edge: "end",
      size: "small"
    },
    style: {
      marginRight: -3
    }
  }]
})), Q(({
  theme: e
}) => ({
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      color: "inherit"
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      color: (e.vars || e).palette[o].main
    }
  })), ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      "--IconButton-hoverBg": e.vars ? `rgba(${(e.vars || e).palette[o].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne((e.vars || e).palette[o].main, e.palette.action.hoverOpacity)
    }
  })), {
    props: {
      size: "small"
    },
    style: {
      padding: 5,
      fontSize: e.typography.pxToRem(18)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      padding: 12,
      fontSize: e.typography.pxToRem(28)
    }
  }],
  [`&.${Hc.disabled}`]: {
    backgroundColor: "transparent",
    color: (e.vars || e).palette.action.disabled
  },
  [`&.${Hc.loading}`]: {
    color: "transparent"
  }
}))), hv = M("span", {
  name: "MuiIconButton",
  slot: "LoadingIndicator",
  overridesResolver: (e, o) => o.loadingIndicator
})(({
  theme: e
}) => ({
  display: "none",
  position: "absolute",
  visibility: "visible",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  color: (e.vars || e).palette.action.disabled,
  variants: [{
    props: {
      loading: !0
    },
    style: {
      display: "flex"
    }
  }]
})), Xo = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiIconButton"
  }), {
    edge: s = !1,
    children: a,
    className: i,
    color: l = "default",
    disabled: c = !1,
    disableFocusRipple: p = !1,
    size: u = "medium",
    id: f,
    loading: g = null,
    loadingIndicator: b,
    ...h
  } = r, d = io(f), y = b ?? /* @__PURE__ */ x.jsx(fl, {
    "aria-labelledby": d,
    color: "inherit",
    size: 16
  }), S = {
    ...r,
    edge: s,
    color: l,
    disabled: c,
    disableFocusRipple: p,
    loading: g,
    loadingIndicator: y,
    size: u
  }, O = gv(S);
  return /* @__PURE__ */ x.jsxs(bv, {
    id: d,
    className: W(O.root, i),
    centerRipple: !0,
    focusRipple: !p,
    disabled: c || g,
    ref: n,
    ...h,
    ownerState: S,
    children: [typeof g == "boolean" && // use plain HTML span to minimize the runtime overhead
    /* @__PURE__ */ x.jsx("span", {
      className: O.loadingWrapper,
      style: {
        display: "contents"
      },
      children: /* @__PURE__ */ x.jsx(hv, {
        className: O.loadingIndicator,
        ownerState: S,
        children: g && y
      })
    }), a]
  });
});
process.env.NODE_ENV !== "production" && (Xo.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The icon to display.
   */
  children: xt(t.node, (e) => m.Children.toArray(e.children).some((n) => /* @__PURE__ */ m.isValidElement(n) && n.props.onClick) ? new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join(`
`)) : null),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: t.oneOf(["end", "start", !1]),
  /**
   * @ignore
   */
  id: t.string,
  /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */
  loading: t.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: t.node,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const yv = at(/* @__PURE__ */ x.jsx("path", {
  d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
}), "SuccessOutlined"), vv = at(/* @__PURE__ */ x.jsx("path", {
  d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
}), "ReportProblemOutlined"), xv = at(/* @__PURE__ */ x.jsx("path", {
  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "ErrorOutline"), Sv = at(/* @__PURE__ */ x.jsx("path", {
  d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
}), "InfoOutlined"), bd = at(/* @__PURE__ */ x.jsx("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close"), Tv = (e) => {
  const {
    variant: o,
    color: n,
    severity: r,
    classes: s
  } = e, a = {
    root: ["root", `color${L(n || r)}`, `${o}${L(n || r)}`, `${o}`],
    icon: ["icon"],
    message: ["message"],
    action: ["action"]
  };
  return ce(a, av, s);
}, Cv = M(Qt, {
  name: "MuiAlert",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`${n.variant}${L(n.color || n.severity)}`]];
  }
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? Eo : Ro, n = e.palette.mode === "light" ? Ro : Eo;
  return {
    ...e.typography.body2,
    backgroundColor: "transparent",
    display: "flex",
    padding: "6px 16px",
    variants: [...Object.entries(e.palette).filter(Ue(["light"])).map(([r]) => ({
      props: {
        colorSeverity: r,
        variant: "standard"
      },
      style: {
        color: e.vars ? e.vars.palette.Alert[`${r}Color`] : o(e.palette[r].light, 0.6),
        backgroundColor: e.vars ? e.vars.palette.Alert[`${r}StandardBg`] : n(e.palette[r].light, 0.9),
        [`& .${Uc.icon}`]: e.vars ? {
          color: e.vars.palette.Alert[`${r}IconColor`]
        } : {
          color: e.palette[r].main
        }
      }
    })), ...Object.entries(e.palette).filter(Ue(["light"])).map(([r]) => ({
      props: {
        colorSeverity: r,
        variant: "outlined"
      },
      style: {
        color: e.vars ? e.vars.palette.Alert[`${r}Color`] : o(e.palette[r].light, 0.6),
        border: `1px solid ${(e.vars || e).palette[r].light}`,
        [`& .${Uc.icon}`]: e.vars ? {
          color: e.vars.palette.Alert[`${r}IconColor`]
        } : {
          color: e.palette[r].main
        }
      }
    })), ...Object.entries(e.palette).filter(Ue(["dark"])).map(([r]) => ({
      props: {
        colorSeverity: r,
        variant: "filled"
      },
      style: {
        fontWeight: e.typography.fontWeightMedium,
        ...e.vars ? {
          color: e.vars.palette.Alert[`${r}FilledColor`],
          backgroundColor: e.vars.palette.Alert[`${r}FilledBg`]
        } : {
          backgroundColor: e.palette.mode === "dark" ? e.palette[r].dark : e.palette[r].main,
          color: e.palette.getContrastText(e.palette[r].main)
        }
      }
    }))]
  };
})), wv = M("div", {
  name: "MuiAlert",
  slot: "Icon",
  overridesResolver: (e, o) => o.icon
})({
  marginRight: 12,
  padding: "7px 0",
  display: "flex",
  fontSize: 22,
  opacity: 0.9
}), Ov = M("div", {
  name: "MuiAlert",
  slot: "Message",
  overridesResolver: (e, o) => o.message
})({
  padding: "8px 0",
  minWidth: 0,
  overflow: "auto"
}), Ev = M("div", {
  name: "MuiAlert",
  slot: "Action",
  overridesResolver: (e, o) => o.action
})({
  display: "flex",
  alignItems: "flex-start",
  padding: "4px 0 0 16px",
  marginLeft: "auto",
  marginRight: -8
}), Gc = {
  success: /* @__PURE__ */ x.jsx(yv, {
    fontSize: "inherit"
  }),
  warning: /* @__PURE__ */ x.jsx(vv, {
    fontSize: "inherit"
  }),
  error: /* @__PURE__ */ x.jsx(xv, {
    fontSize: "inherit"
  }),
  info: /* @__PURE__ */ x.jsx(Sv, {
    fontSize: "inherit"
  })
}, Rv = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAlert"
  }), {
    action: s,
    children: a,
    className: i,
    closeText: l = "Close",
    color: c,
    components: p = {},
    componentsProps: u = {},
    icon: f,
    iconMapping: g = Gc,
    onClose: b,
    role: h = "alert",
    severity: d = "success",
    slotProps: y = {},
    slots: S = {},
    variant: O = "standard",
    ...C
  } = r, T = {
    ...r,
    color: c,
    severity: d,
    variant: O,
    colorSeverity: c || d
  }, w = Tv(T), E = {
    slots: {
      closeButton: p.CloseButton,
      closeIcon: p.CloseIcon,
      ...S
    },
    slotProps: {
      ...u,
      ...y
    }
  }, [$, P] = je("root", {
    ref: n,
    shouldForwardComponentProp: !0,
    className: W(w.root, i),
    elementType: Cv,
    externalForwardedProps: {
      ...E,
      ...C
    },
    ownerState: T,
    additionalProps: {
      role: h,
      elevation: 0
    }
  }), [N, v] = je("icon", {
    className: w.icon,
    elementType: wv,
    externalForwardedProps: E,
    ownerState: T
  }), [R, A] = je("message", {
    className: w.message,
    elementType: Ov,
    externalForwardedProps: E,
    ownerState: T
  }), [j, k] = je("action", {
    className: w.action,
    elementType: Ev,
    externalForwardedProps: E,
    ownerState: T
  }), [D, B] = je("closeButton", {
    elementType: Xo,
    externalForwardedProps: E,
    ownerState: T
  }), [_, H] = je("closeIcon", {
    elementType: bd,
    externalForwardedProps: E,
    ownerState: T
  });
  return /* @__PURE__ */ x.jsxs($, {
    ...P,
    children: [f !== !1 ? /* @__PURE__ */ x.jsx(N, {
      ...v,
      children: f || g[d] || Gc[d]
    }) : null, /* @__PURE__ */ x.jsx(R, {
      ...A,
      children: a
    }), s != null ? /* @__PURE__ */ x.jsx(j, {
      ...k,
      children: s
    }) : null, s == null && b ? /* @__PURE__ */ x.jsx(j, {
      ...k,
      children: /* @__PURE__ */ x.jsx(D, {
        size: "small",
        "aria-label": l,
        title: l,
        color: "inherit",
        onClick: b,
        ...B,
        children: /* @__PURE__ */ x.jsx(_, {
          fontSize: "small",
          ...H
        })
      })
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (Rv.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display. It renders after the message, at the end of the alert.
   */
  action: t.node,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Override the default label for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: t.string,
  /**
   * The color of the component. Unless provided, the value is taken from the `severity` prop.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: t.oneOfType([t.oneOf(["error", "info", "success", "warning"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    CloseButton: t.elementType,
    CloseIcon: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    closeButton: t.object,
    closeIcon: t.object
  }),
  /**
   * Override the icon displayed before the children.
   * Unless provided, the icon is mapped to the value of the `severity` prop.
   * Set to `false` to remove the `icon`.
   */
  icon: t.node,
  /**
   * The component maps the `severity` prop to a range of different icons,
   * for instance success to `<SuccessOutlined>`.
   * If you wish to change this mapping, you can provide your own.
   * Alternatively, you can use the `icon` prop to override the icon displayed.
   */
  iconMapping: t.shape({
    error: t.node,
    info: t.node,
    success: t.node,
    warning: t.node
  }),
  /**
   * Callback fired when the component requests to be closed.
   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: t.string,
  /**
   * The severity of the alert. This defines the color and icon used.
   * @default 'success'
   */
  severity: t.oneOfType([t.oneOf(["error", "info", "success", "warning"]), t.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    action: t.oneOfType([t.func, t.object]),
    closeButton: t.oneOfType([t.func, t.object]),
    closeIcon: t.oneOfType([t.func, t.object]),
    icon: t.oneOfType([t.func, t.object]),
    message: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    action: t.elementType,
    closeButton: t.elementType,
    closeIcon: t.elementType,
    icon: t.elementType,
    message: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: t.oneOfType([t.oneOf(["filled", "outlined", "standard"]), t.string])
});
function $v(e) {
  return ae("MuiTypography", e);
}
const Us = le("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]), kv = {
  primary: !0,
  secondary: !0,
  error: !0,
  info: !0,
  success: !0,
  warning: !0,
  textPrimary: !0,
  textSecondary: !0,
  textDisabled: !0
}, Pv = iy(), Nv = (e) => {
  const {
    align: o,
    gutterBottom: n,
    noWrap: r,
    paragraph: s,
    variant: a,
    classes: i
  } = e, l = {
    root: ["root", a, e.align !== "inherit" && `align${L(o)}`, n && "gutterBottom", r && "noWrap", s && "paragraph"]
  };
  return ce(l, $v, i);
}, Iv = M("span", {
  name: "MuiTypography",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.variant && o[n.variant], n.align !== "inherit" && o[`align${L(n.align)}`], n.noWrap && o.noWrap, n.gutterBottom && o.gutterBottom, n.paragraph && o.paragraph];
  }
})(Q(({
  theme: e
}) => {
  var o;
  return {
    margin: 0,
    variants: [{
      props: {
        variant: "inherit"
      },
      style: {
        // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
        font: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    }, ...Object.entries(e.typography).filter(([n, r]) => n !== "inherit" && r && typeof r == "object").map(([n, r]) => ({
      props: {
        variant: n
      },
      style: r
    })), ...Object.entries(e.palette).filter(Ue()).map(([n]) => ({
      props: {
        color: n
      },
      style: {
        color: (e.vars || e).palette[n].main
      }
    })), ...Object.entries(((o = e.palette) == null ? void 0 : o.text) || {}).filter(([, n]) => typeof n == "string").map(([n]) => ({
      props: {
        color: `text${L(n)}`
      },
      style: {
        color: (e.vars || e).palette.text[n]
      }
    })), {
      props: ({
        ownerState: n
      }) => n.align !== "inherit",
      style: {
        textAlign: "var(--Typography-textAlign)"
      }
    }, {
      props: ({
        ownerState: n
      }) => n.noWrap,
      style: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }
    }, {
      props: ({
        ownerState: n
      }) => n.gutterBottom,
      style: {
        marginBottom: "0.35em"
      }
    }, {
      props: ({
        ownerState: n
      }) => n.paragraph,
      style: {
        marginBottom: 16
      }
    }]
  };
})), qc = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  inherit: "p"
}, kt = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    color: r,
    ...s
  } = pe({
    props: o,
    name: "MuiTypography"
  }), a = !kv[r], i = Pv({
    ...s,
    ...a && {
      color: r
    }
  }), {
    align: l = "inherit",
    className: c,
    component: p,
    gutterBottom: u = !1,
    noWrap: f = !1,
    paragraph: g = !1,
    variant: b = "body1",
    variantMapping: h = qc,
    ...d
  } = i, y = {
    ...i,
    align: l,
    color: r,
    className: c,
    component: p,
    gutterBottom: u,
    noWrap: f,
    paragraph: g,
    variant: b,
    variantMapping: h
  }, S = p || (g ? "p" : h[b] || qc[b]) || "span", O = Nv(y);
  return /* @__PURE__ */ x.jsx(Iv, {
    as: S,
    ref: n,
    className: W(O.root, c),
    ...d,
    ownerState: y,
    style: {
      ...l !== "inherit" && {
        "--Typography-textAlign": l
      },
      ...d.style
    }
  });
});
process.env.NODE_ENV !== "production" && (kt.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: t.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: t.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: t.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   * @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  paragraph: t.bool,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: t.oneOfType([t.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), t.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: t.object
});
function jv(e) {
  return ae("MuiAlertTitle", e);
}
const IP = le("MuiAlertTitle", ["root"]), Mv = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, jv, o);
}, Av = M(kt, {
  name: "MuiAlertTitle",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => ({
  fontWeight: e.typography.fontWeightMedium,
  marginTop: -2
}))), Bv = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAlertTitle"
  }), {
    className: s,
    ...a
  } = r, i = r, l = Mv(i);
  return /* @__PURE__ */ x.jsx(Av, {
    gutterBottom: !0,
    component: "div",
    ownerState: i,
    ref: n,
    className: W(l.root, s),
    ...a
  });
});
process.env.NODE_ENV !== "production" && (Bv.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function Lv(e) {
  return ae("MuiAppBar", e);
}
const jP = le("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]), Dv = (e) => {
  const {
    color: o,
    position: n,
    classes: r
  } = e, s = {
    root: ["root", `color${L(o)}`, `position${L(n)}`]
  };
  return ce(s, Lv, r);
}, Yc = (e, o) => e ? `${e == null ? void 0 : e.replace(")", "")}, ${o})` : o, zv = M(Qt, {
  name: "MuiAppBar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`position${L(n.position)}`], o[`color${L(n.color)}`]];
  }
})(Q(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "column",
  width: "100%",
  boxSizing: "border-box",
  // Prevent padding issue with the Modal and fixed positioned AppBar.
  flexShrink: 0,
  variants: [{
    props: {
      position: "fixed"
    },
    style: {
      position: "fixed",
      zIndex: (e.vars || e).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        // Prevent the app bar to be visible on each printed page.
        position: "absolute"
      }
    }
  }, {
    props: {
      position: "absolute"
    },
    style: {
      position: "absolute",
      zIndex: (e.vars || e).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }
  }, {
    props: {
      position: "sticky"
    },
    style: {
      position: "sticky",
      zIndex: (e.vars || e).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }
  }, {
    props: {
      position: "static"
    },
    style: {
      position: "static"
    }
  }, {
    props: {
      position: "relative"
    },
    style: {
      position: "relative"
    }
  }, {
    props: {
      color: "inherit"
    },
    style: {
      "--AppBar-color": "inherit"
    }
  }, {
    props: {
      color: "default"
    },
    style: {
      "--AppBar-background": e.vars ? e.vars.palette.AppBar.defaultBg : e.palette.grey[100],
      "--AppBar-color": e.vars ? e.vars.palette.text.primary : e.palette.getContrastText(e.palette.grey[100]),
      ...e.applyStyles("dark", {
        "--AppBar-background": e.vars ? e.vars.palette.AppBar.defaultBg : e.palette.grey[900],
        "--AppBar-color": e.vars ? e.vars.palette.text.primary : e.palette.getContrastText(e.palette.grey[900])
      })
    }
  }, ...Object.entries(e.palette).filter(Ue(["contrastText"])).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      "--AppBar-background": (e.vars ?? e).palette[o].main,
      "--AppBar-color": (e.vars ?? e).palette[o].contrastText
    }
  })), {
    props: (o) => o.enableColorOnDark === !0 && !["inherit", "transparent"].includes(o.color),
    style: {
      backgroundColor: "var(--AppBar-background)",
      color: "var(--AppBar-color)"
    }
  }, {
    props: (o) => o.enableColorOnDark === !1 && !["inherit", "transparent"].includes(o.color),
    style: {
      backgroundColor: "var(--AppBar-background)",
      color: "var(--AppBar-color)",
      ...e.applyStyles("dark", {
        backgroundColor: e.vars ? Yc(e.vars.palette.AppBar.darkBg, "var(--AppBar-background)") : null,
        color: e.vars ? Yc(e.vars.palette.AppBar.darkColor, "var(--AppBar-color)") : null
      })
    }
  }, {
    props: {
      color: "transparent"
    },
    style: {
      "--AppBar-background": "transparent",
      "--AppBar-color": "inherit",
      backgroundColor: "var(--AppBar-background)",
      color: "var(--AppBar-color)",
      ...e.applyStyles("dark", {
        backgroundImage: "none"
      })
    }
  }]
}))), Fv = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAppBar"
  }), {
    className: s,
    color: a = "primary",
    enableColorOnDark: i = !1,
    position: l = "fixed",
    ...c
  } = r, p = {
    ...r,
    color: a,
    position: l,
    enableColorOnDark: i
  }, u = Dv(p);
  return /* @__PURE__ */ x.jsx(zv, {
    square: !0,
    component: "header",
    ownerState: p,
    elevation: 4,
    className: W(u.root, s, l === "fixed" && "mui-fixed"),
    ref: n,
    ...c
  });
});
process.env.NODE_ENV !== "production" && (Fv.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), t.string]),
  /**
   * If true, the `color` prop is applied in dark mode.
   * @default false
   */
  enableColorOnDark: t.bool,
  /**
   * The positioning type. The behavior of the different options is described
   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Web/CSS/position).
   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
   * @default 'fixed'
   */
  position: t.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function Kc(e) {
  return e.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}
function Vv(e = {}) {
  const {
    ignoreAccents: o = !0,
    ignoreCase: n = !0,
    limit: r,
    matchFrom: s = "any",
    stringify: a,
    trim: i = !1
  } = e;
  return (l, {
    inputValue: c,
    getOptionLabel: p
  }) => {
    let u = i ? c.trim() : c;
    n && (u = u.toLowerCase()), o && (u = Kc(u));
    const f = u ? l.filter((g) => {
      let b = (a || p)(g);
      return n && (b = b.toLowerCase()), o && (b = Kc(b)), s === "start" ? b.startsWith(u) : b.includes(u);
    }) : l;
    return typeof r == "number" ? f.slice(0, r) : f;
  };
}
const _v = Vv(), Wv = 5, Uv = (e) => {
  var o;
  return e.current !== null && ((o = e.current.parentElement) == null ? void 0 : o.contains(document.activeElement));
}, Hv = [];
function Xc(e, o, n) {
  if (o || e == null)
    return "";
  const r = n(e);
  return typeof r == "string" ? r : "";
}
function Gv(e) {
  const {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    unstable_isActiveElementInListbox: o = Uv,
    // eslint-disable-next-line @typescript-eslint/naming-convention
    unstable_classNamePrefix: n = "Mui",
    autoComplete: r = !1,
    autoHighlight: s = !1,
    autoSelect: a = !1,
    blurOnSelect: i = !1,
    clearOnBlur: l = !e.freeSolo,
    clearOnEscape: c = !1,
    componentName: p = "useAutocomplete",
    defaultValue: u = e.multiple ? Hv : null,
    disableClearable: f = !1,
    disableCloseOnSelect: g = !1,
    disabled: b,
    disabledItemsFocusable: h = !1,
    disableListWrap: d = !1,
    filterOptions: y = _v,
    filterSelectedOptions: S = !1,
    freeSolo: O = !1,
    getOptionDisabled: C,
    getOptionKey: T,
    getOptionLabel: w = (fe) => fe.label ?? fe,
    groupBy: E,
    handleHomeEndKeys: $ = !e.freeSolo,
    id: P,
    includeInputInList: N = !1,
    inputValue: v,
    isOptionEqualToValue: R = (fe, se) => fe === se,
    multiple: A = !1,
    onChange: j,
    onClose: k,
    onHighlightChange: D,
    onInputChange: B,
    onOpen: _,
    open: H,
    openOnFocus: U = !1,
    options: F,
    readOnly: V = !1,
    selectOnFocus: me = !e.freeSolo,
    value: G
  } = e, X = io(P);
  let Y = w;
  Y = (fe) => {
    const se = w(fe);
    if (typeof se != "string") {
      if (process.env.NODE_ENV !== "production") {
        const Re = se === void 0 ? "undefined" : `${typeof se} (${se})`;
        console.error(`MUI: The \`getOptionLabel\` method of ${p} returned ${Re} instead of a string for ${JSON.stringify(fe)}.`);
      }
      return String(se);
    }
    return se;
  };
  const q = m.useRef(!1), ie = m.useRef(!0), K = m.useRef(null), de = m.useRef(null), [oe, he] = m.useState(null), [z, be] = m.useState(-1), ye = s ? 0 : -1, Pe = m.useRef(ye), Te = m.useRef(Xc(u, A, Y)).current, [Z, $e] = Kt({
    controlled: G,
    default: u,
    name: p
  }), [Oe, Me] = Kt({
    controlled: v,
    default: Te,
    name: p,
    state: "inputValue"
  }), [I, J] = m.useState(!1), xe = m.useCallback((fe, se, Re) => {
    if (!(A ? Z.length < se.length : se !== null) && !l)
      return;
    const We = Xc(se, A, Y);
    Oe !== We && (Me(We), B && B(fe, We, Re));
  }, [Y, Oe, A, B, Me, l, Z]), [ke, ee] = Kt({
    controlled: H,
    default: !1,
    name: p,
    state: "open"
  }), [ue, te] = m.useState(!0), we = !A && Z != null && Oe === Y(Z), Ce = ke && !V, ge = Ce ? y(
    F.filter((fe) => !(S && (A ? Z : [Z]).some((se) => se !== null && R(fe, se)))),
    // we use the empty string to manipulate `filterOptions` to not filter any options
    // i.e. the filter predicate always returns true
    {
      inputValue: we && ue ? "" : Oe,
      getOptionLabel: Y
    }
  ) : [], ve = nl({
    filteredOptions: ge,
    value: Z,
    inputValue: Oe
  });
  m.useEffect(() => {
    const fe = Z !== ve.value;
    I && !fe || O && !fe || xe(null, Z, "reset");
  }, [Z, xe, I, ve.value, O]);
  const Be = ke && ge.length > 0 && !V, Ae = pt((fe) => {
    fe === -1 ? K.current.focus() : oe.querySelector(`[data-tag-index="${fe}"]`).focus();
  });
  m.useEffect(() => {
    A && z > Z.length - 1 && (be(-1), Ae(-1));
  }, [Z, A, z, Ae]);
  function Fe(fe, se) {
    if (!de.current || fe < 0 || fe >= ge.length)
      return -1;
    let Re = fe;
    for (; ; ) {
      const De = de.current.querySelector(`[data-option-index="${Re}"]`), We = h ? !1 : !De || De.disabled || De.getAttribute("aria-disabled") === "true";
      if (De && De.hasAttribute("tabindex") && !We)
        return Re;
      if (se === "next" ? Re = (Re + 1) % ge.length : Re = (Re - 1 + ge.length) % ge.length, Re === fe)
        return -1;
    }
  }
  const Se = pt(({
    event: fe,
    index: se,
    reason: Re = "auto"
  }) => {
    if (Pe.current = se, se === -1 ? K.current.removeAttribute("aria-activedescendant") : K.current.setAttribute("aria-activedescendant", `${X}-option-${se}`), D && D(fe, se === -1 ? null : ge[se], Re), !de.current)
      return;
    const De = de.current.querySelector(`[role="option"].${n}-focused`);
    De && (De.classList.remove(`${n}-focused`), De.classList.remove(`${n}-focusVisible`));
    let We = de.current;
    if (de.current.getAttribute("role") !== "listbox" && (We = de.current.parentElement.querySelector('[role="listbox"]')), !We)
      return;
    if (se === -1) {
      We.scrollTop = 0;
      return;
    }
    const qe = de.current.querySelector(`[data-option-index="${se}"]`);
    if (qe && (qe.classList.add(`${n}-focused`), Re === "keyboard" && qe.classList.add(`${n}-focusVisible`), We.scrollHeight > We.clientHeight && Re !== "mouse" && Re !== "touch")) {
      const yt = qe, Bt = We.clientHeight + We.scrollTop, Qn = yt.offsetTop + yt.offsetHeight;
      Qn > Bt ? We.scrollTop = Qn - We.clientHeight : yt.offsetTop - yt.offsetHeight * (E ? 1.3 : 0) < We.scrollTop && (We.scrollTop = yt.offsetTop - yt.offsetHeight * (E ? 1.3 : 0));
    }
  }), ne = pt(({
    event: fe,
    diff: se,
    direction: Re = "next",
    reason: De = "auto"
  }) => {
    if (!Ce)
      return;
    const qe = Fe((() => {
      const yt = ge.length - 1;
      if (se === "reset")
        return ye;
      if (se === "start")
        return 0;
      if (se === "end")
        return yt;
      const Bt = Pe.current + se;
      return Bt < 0 ? Bt === -1 && N ? -1 : d && Pe.current !== -1 || Math.abs(se) > 1 ? 0 : yt : Bt > yt ? Bt === yt + 1 && N ? -1 : d || Math.abs(se) > 1 ? yt : 0 : Bt;
    })(), Re);
    if (Se({
      index: qe,
      reason: De,
      event: fe
    }), r && se !== "reset")
      if (qe === -1)
        K.current.value = Oe;
      else {
        const yt = Y(ge[qe]);
        K.current.value = yt, yt.toLowerCase().indexOf(Oe.toLowerCase()) === 0 && Oe.length > 0 && K.current.setSelectionRange(Oe.length, yt.length);
      }
  }), Ee = () => {
    const fe = (se, Re) => {
      const De = se ? Y(se) : "", We = Re ? Y(Re) : "";
      return De === We;
    };
    if (Pe.current !== -1 && ve.filteredOptions && ve.filteredOptions.length !== ge.length && ve.inputValue === Oe && (A ? Z.length === ve.value.length && ve.value.every((se, Re) => Y(Z[Re]) === Y(se)) : fe(ve.value, Z))) {
      const se = ve.filteredOptions[Pe.current];
      if (se)
        return ge.findIndex((Re) => Y(Re) === Y(se));
    }
    return -1;
  }, Ie = m.useCallback(() => {
    if (!Ce)
      return;
    const fe = Ee();
    if (fe !== -1) {
      Pe.current = fe;
      return;
    }
    const se = A ? Z[0] : Z;
    if (ge.length === 0 || se == null) {
      ne({
        diff: "reset"
      });
      return;
    }
    if (de.current) {
      if (se != null) {
        const Re = ge[Pe.current];
        if (A && Re && Z.findIndex((We) => R(Re, We)) !== -1)
          return;
        const De = ge.findIndex((We) => R(We, se));
        De === -1 ? ne({
          diff: "reset"
        }) : Se({
          index: De
        });
        return;
      }
      if (Pe.current >= ge.length - 1) {
        Se({
          index: ge.length - 1
        });
        return;
      }
      Se({
        index: Pe.current
      });
    }
  }, [
    // Only sync the highlighted index when the option switch between empty and not
    ge.length,
    // Don't sync the highlighted index with the value when multiple
    // eslint-disable-next-line react-hooks/exhaustive-deps
    A ? !1 : Z,
    S,
    ne,
    Se,
    Ce,
    Oe,
    A
  ]), Ve = pt((fe) => {
    Ds(de, fe), fe && Ie();
  });
  process.env.NODE_ENV !== "production" && m.useEffect(() => {
    (!K.current || K.current.nodeName !== "INPUT") && (K.current && K.current.nodeName === "TEXTAREA" ? console.warn([`A textarea element was provided to ${p} where input was expected.`, "This is not a supported scenario but it may work under certain conditions.", "A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).", "Make sure to test keyboard navigation and add custom event handlers if necessary."].join(`
`)) : console.error([`MUI: Unable to find the input element. It was resolved to ${K.current} while an HTMLInputElement was expected.`, `Instead, ${p} expects an input element.`, "", p === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join(`
`)));
  }, [p]), m.useEffect(() => {
    Ie();
  }, [Ie]);
  const Ke = (fe) => {
    ke || (ee(!0), te(!0), _ && _(fe));
  }, St = (fe, se) => {
    ke && (ee(!1), k && k(fe, se));
  }, He = (fe, se, Re, De) => {
    if (A) {
      if (Z.length === se.length && Z.every((We, qe) => We === se[qe]))
        return;
    } else if (Z === se)
      return;
    j && j(fe, se, Re, De), $e(se);
  }, tt = m.useRef(!1), ht = (fe, se, Re = "selectOption", De = "options") => {
    let We = Re, qe = se;
    if (A) {
      if (qe = Array.isArray(Z) ? Z.slice() : [], process.env.NODE_ENV !== "production") {
        const Bt = qe.filter((Qn) => R(se, Qn));
        Bt.length > 1 && console.error([`MUI: The \`isOptionEqualToValue\` method of ${p} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${Bt.length} matches.`].join(`
`));
      }
      const yt = qe.findIndex((Bt) => R(se, Bt));
      yt === -1 ? qe.push(se) : De !== "freeSolo" && (qe.splice(yt, 1), We = "removeOption");
    }
    xe(fe, qe, We), He(fe, qe, We, {
      option: se
    }), !g && (!fe || !fe.ctrlKey && !fe.metaKey) && St(fe, We), (i === !0 || i === "touch" && tt.current || i === "mouse" && !tt.current) && K.current.blur();
  };
  function fo(fe, se) {
    if (fe === -1)
      return -1;
    let Re = fe;
    for (; ; ) {
      if (se === "next" && Re === Z.length || se === "previous" && Re === -1)
        return -1;
      const De = oe.querySelector(`[data-tag-index="${Re}"]`);
      if (!De || !De.hasAttribute("tabindex") || De.disabled || De.getAttribute("aria-disabled") === "true")
        Re += se === "next" ? 1 : -1;
      else
        return Re;
    }
  }
  const It = (fe, se) => {
    if (!A)
      return;
    Oe === "" && St(fe, "toggleInput");
    let Re = z;
    z === -1 ? Oe === "" && se === "previous" && (Re = Z.length - 1) : (Re += se === "next" ? 1 : -1, Re < 0 && (Re = 0), Re === Z.length && (Re = -1)), Re = fo(Re, se), be(Re), Ae(Re);
  }, Le = (fe) => {
    q.current = !0, Me(""), B && B(fe, "", "clear"), He(fe, A ? [] : null, "clear");
  }, At = (fe) => (se) => {
    if (fe.onKeyDown && fe.onKeyDown(se), !se.defaultMuiPrevented && (z !== -1 && !["ArrowLeft", "ArrowRight"].includes(se.key) && (be(-1), Ae(-1)), se.which !== 229))
      switch (se.key) {
        case "Home":
          Ce && $ && (se.preventDefault(), ne({
            diff: "start",
            direction: "next",
            reason: "keyboard",
            event: se
          }));
          break;
        case "End":
          Ce && $ && (se.preventDefault(), ne({
            diff: "end",
            direction: "previous",
            reason: "keyboard",
            event: se
          }));
          break;
        case "PageUp":
          se.preventDefault(), ne({
            diff: -5,
            direction: "previous",
            reason: "keyboard",
            event: se
          }), Ke(se);
          break;
        case "PageDown":
          se.preventDefault(), ne({
            diff: Wv,
            direction: "next",
            reason: "keyboard",
            event: se
          }), Ke(se);
          break;
        case "ArrowDown":
          se.preventDefault(), ne({
            diff: 1,
            direction: "next",
            reason: "keyboard",
            event: se
          }), Ke(se);
          break;
        case "ArrowUp":
          se.preventDefault(), ne({
            diff: -1,
            direction: "previous",
            reason: "keyboard",
            event: se
          }), Ke(se);
          break;
        case "ArrowLeft":
          It(se, "previous");
          break;
        case "ArrowRight":
          It(se, "next");
          break;
        case "Enter":
          if (Pe.current !== -1 && Ce) {
            const Re = ge[Pe.current], De = C ? C(Re) : !1;
            if (se.preventDefault(), De)
              return;
            ht(se, Re, "selectOption"), r && K.current.setSelectionRange(K.current.value.length, K.current.value.length);
          } else O && Oe !== "" && we === !1 && (A && se.preventDefault(), ht(se, Oe, "createOption", "freeSolo"));
          break;
        case "Escape":
          Ce ? (se.preventDefault(), se.stopPropagation(), St(se, "escape")) : c && (Oe !== "" || A && Z.length > 0) && (se.preventDefault(), se.stopPropagation(), Le(se));
          break;
        case "Backspace":
          if (A && !V && Oe === "" && Z.length > 0) {
            const Re = z === -1 ? Z.length - 1 : z, De = Z.slice();
            De.splice(Re, 1), He(se, De, "removeOption", {
              option: Z[Re]
            });
          }
          break;
        case "Delete":
          if (A && !V && Oe === "" && Z.length > 0 && z !== -1) {
            const Re = z, De = Z.slice();
            De.splice(Re, 1), He(se, De, "removeOption", {
              option: Z[Re]
            });
          }
          break;
      }
  }, On = (fe) => {
    J(!0), U && !q.current && Ke(fe);
  }, sn = (fe) => {
    if (o(de)) {
      K.current.focus();
      return;
    }
    J(!1), ie.current = !0, q.current = !1, a && Pe.current !== -1 && Ce ? ht(fe, ge[Pe.current], "blur") : a && O && Oe !== "" ? ht(fe, Oe, "blur", "freeSolo") : l && xe(fe, Z, "blur"), St(fe, "blur");
  }, Xn = (fe) => {
    const se = fe.target.value;
    Oe !== se && (Me(se), te(!1), B && B(fe, se, "input")), se === "" ? !f && !A && He(fe, null, "clear") : Ke(fe);
  }, Jn = (fe) => {
    const se = Number(fe.currentTarget.getAttribute("data-option-index"));
    Pe.current !== se && Se({
      event: fe,
      index: se,
      reason: "mouse"
    });
  }, ja = (fe) => {
    Se({
      event: fe,
      index: Number(fe.currentTarget.getAttribute("data-option-index")),
      reason: "touch"
    }), tt.current = !0;
  }, Ma = (fe) => {
    const se = Number(fe.currentTarget.getAttribute("data-option-index"));
    ht(fe, ge[se], "selectOption"), tt.current = !1;
  }, Aa = (fe) => (se) => {
    const Re = Z.slice();
    Re.splice(fe, 1), He(se, Re, "removeOption", {
      option: Z[fe]
    });
  }, Ba = (fe) => {
    ke ? St(fe, "toggleInput") : Ke(fe);
  }, Zn = (fe) => {
    fe.currentTarget.contains(fe.target) && fe.target.getAttribute("id") !== X && fe.preventDefault();
  }, jt = (fe) => {
    fe.currentTarget.contains(fe.target) && (K.current.focus(), me && ie.current && K.current.selectionEnd - K.current.selectionStart === 0 && K.current.select(), ie.current = !1);
  }, Et = (fe) => {
    !b && (Oe === "" || !ke) && Ba(fe);
  };
  let bo = O && Oe.length > 0;
  bo = bo || (A ? Z.length > 0 : Z !== null);
  let Xr = ge;
  if (E) {
    const fe = /* @__PURE__ */ new Map();
    let se = !1;
    Xr = ge.reduce((Re, De, We) => {
      const qe = E(De);
      return Re.length > 0 && Re[Re.length - 1].group === qe ? Re[Re.length - 1].options.push(De) : (process.env.NODE_ENV !== "production" && (fe.get(qe) && !se && (console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${p} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`."), se = !0), fe.set(qe, !0)), Re.push({
        key: We,
        index: We,
        group: qe,
        options: [De]
      })), Re;
    }, []);
  }
  return b && I && sn(), {
    getRootProps: (fe = {}) => ({
      "aria-owns": Be ? `${X}-listbox` : null,
      ...fe,
      onKeyDown: At(fe),
      onMouseDown: Zn,
      onClick: jt
    }),
    getInputLabelProps: () => ({
      id: `${X}-label`,
      htmlFor: X
    }),
    getInputProps: () => ({
      id: X,
      value: Oe,
      onBlur: sn,
      onFocus: On,
      onChange: Xn,
      onMouseDown: Et,
      // if open then this is handled imperatively so don't let react override
      // only have an opinion about this when closed
      "aria-activedescendant": Ce ? "" : null,
      "aria-autocomplete": r ? "both" : "list",
      "aria-controls": Be ? `${X}-listbox` : void 0,
      "aria-expanded": Be,
      // Disable browser's suggestion that might overlap with the popup.
      // Handle autocomplete but not autofill.
      autoComplete: "off",
      ref: K,
      autoCapitalize: "none",
      spellCheck: "false",
      role: "combobox",
      disabled: b
    }),
    getClearProps: () => ({
      tabIndex: -1,
      type: "button",
      onClick: Le
    }),
    getPopupIndicatorProps: () => ({
      tabIndex: -1,
      type: "button",
      onClick: Ba
    }),
    getTagProps: ({
      index: fe
    }) => ({
      key: fe,
      "data-tag-index": fe,
      tabIndex: -1,
      ...!V && {
        onDelete: Aa(fe)
      }
    }),
    getListboxProps: () => ({
      role: "listbox",
      id: `${X}-listbox`,
      "aria-labelledby": `${X}-label`,
      ref: Ve,
      onMouseDown: (fe) => {
        fe.preventDefault();
      }
    }),
    getOptionProps: ({
      index: fe,
      option: se
    }) => {
      const Re = (A ? Z : [Z]).some((We) => We != null && R(se, We)), De = C ? C(se) : !1;
      return {
        key: (T == null ? void 0 : T(se)) ?? Y(se),
        tabIndex: -1,
        role: "option",
        id: `${X}-option-${fe}`,
        onMouseMove: Jn,
        onClick: Ma,
        onTouchStart: ja,
        "data-option-index": fe,
        "aria-disabled": De,
        "aria-selected": Re
      };
    },
    id: X,
    inputValue: Oe,
    value: Z,
    dirty: bo,
    expanded: Ce && oe,
    popupOpen: Ce,
    focused: I || z !== -1,
    anchorEl: oe,
    setAnchorEl: he,
    focusedTag: z,
    groupedOptions: Xr
  };
}
var Vt = "top", lo = "bottom", co = "right", _t = "left", ml = "auto", Ur = [Vt, lo, co, _t], Fn = "start", Ir = "end", qv = "clippingParents", hd = "viewport", sr = "popper", Yv = "reference", Jc = /* @__PURE__ */ Ur.reduce(function(e, o) {
  return e.concat([o + "-" + Fn, o + "-" + Ir]);
}, []), yd = /* @__PURE__ */ [].concat(Ur, [ml]).reduce(function(e, o) {
  return e.concat([o, o + "-" + Fn, o + "-" + Ir]);
}, []), Kv = "beforeRead", Xv = "read", Jv = "afterRead", Zv = "beforeMain", Qv = "main", e0 = "afterMain", t0 = "beforeWrite", o0 = "write", n0 = "afterWrite", r0 = [Kv, Xv, Jv, Zv, Qv, e0, t0, o0, n0];
function Po(e) {
  return e ? (e.nodeName || "").toLowerCase() : null;
}
function Jt(e) {
  if (e == null)
    return window;
  if (e.toString() !== "[object Window]") {
    var o = e.ownerDocument;
    return o && o.defaultView || window;
  }
  return e;
}
function Tn(e) {
  var o = Jt(e).Element;
  return e instanceof o || e instanceof Element;
}
function ao(e) {
  var o = Jt(e).HTMLElement;
  return e instanceof o || e instanceof HTMLElement;
}
function gl(e) {
  if (typeof ShadowRoot > "u")
    return !1;
  var o = Jt(e).ShadowRoot;
  return e instanceof o || e instanceof ShadowRoot;
}
function s0(e) {
  var o = e.state;
  Object.keys(o.elements).forEach(function(n) {
    var r = o.styles[n] || {}, s = o.attributes[n] || {}, a = o.elements[n];
    !ao(a) || !Po(a) || (Object.assign(a.style, r), Object.keys(s).forEach(function(i) {
      var l = s[i];
      l === !1 ? a.removeAttribute(i) : a.setAttribute(i, l === !0 ? "" : l);
    }));
  });
}
function a0(e) {
  var o = e.state, n = {
    popper: {
      position: o.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(o.elements.popper.style, n.popper), o.styles = n, o.elements.arrow && Object.assign(o.elements.arrow.style, n.arrow), function() {
    Object.keys(o.elements).forEach(function(r) {
      var s = o.elements[r], a = o.attributes[r] || {}, i = Object.keys(o.styles.hasOwnProperty(r) ? o.styles[r] : n[r]), l = i.reduce(function(c, p) {
        return c[p] = "", c;
      }, {});
      !ao(s) || !Po(s) || (Object.assign(s.style, l), Object.keys(a).forEach(function(c) {
        s.removeAttribute(c);
      }));
    });
  };
}
const i0 = {
  name: "applyStyles",
  enabled: !0,
  phase: "write",
  fn: s0,
  effect: a0,
  requires: ["computeStyles"]
};
function Oo(e) {
  return e.split("-")[0];
}
var xn = Math.max, Hs = Math.min, Vn = Math.round;
function Ei() {
  var e = navigator.userAgentData;
  return e != null && e.brands && Array.isArray(e.brands) ? e.brands.map(function(o) {
    return o.brand + "/" + o.version;
  }).join(" ") : navigator.userAgent;
}
function vd() {
  return !/^((?!chrome|android).)*safari/i.test(Ei());
}
function _n(e, o, n) {
  o === void 0 && (o = !1), n === void 0 && (n = !1);
  var r = e.getBoundingClientRect(), s = 1, a = 1;
  o && ao(e) && (s = e.offsetWidth > 0 && Vn(r.width) / e.offsetWidth || 1, a = e.offsetHeight > 0 && Vn(r.height) / e.offsetHeight || 1);
  var i = Tn(e) ? Jt(e) : window, l = i.visualViewport, c = !vd() && n, p = (r.left + (c && l ? l.offsetLeft : 0)) / s, u = (r.top + (c && l ? l.offsetTop : 0)) / a, f = r.width / s, g = r.height / a;
  return {
    width: f,
    height: g,
    top: u,
    right: p + f,
    bottom: u + g,
    left: p,
    x: p,
    y: u
  };
}
function bl(e) {
  var o = _n(e), n = e.offsetWidth, r = e.offsetHeight;
  return Math.abs(o.width - n) <= 1 && (n = o.width), Math.abs(o.height - r) <= 1 && (r = o.height), {
    x: e.offsetLeft,
    y: e.offsetTop,
    width: n,
    height: r
  };
}
function xd(e, o) {
  var n = o.getRootNode && o.getRootNode();
  if (e.contains(o))
    return !0;
  if (n && gl(n)) {
    var r = o;
    do {
      if (r && e.isSameNode(r))
        return !0;
      r = r.parentNode || r.host;
    } while (r);
  }
  return !1;
}
function zo(e) {
  return Jt(e).getComputedStyle(e);
}
function l0(e) {
  return ["table", "td", "th"].indexOf(Po(e)) >= 0;
}
function nn(e) {
  return ((Tn(e) ? e.ownerDocument : (
    // $FlowFixMe[prop-missing]
    e.document
  )) || window.document).documentElement;
}
function Ta(e) {
  return Po(e) === "html" ? e : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    e.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    e.parentNode || // DOM Element detected
    (gl(e) ? e.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    nn(e)
  );
}
function Zc(e) {
  return !ao(e) || // https://github.com/popperjs/popper-core/issues/837
  zo(e).position === "fixed" ? null : e.offsetParent;
}
function c0(e) {
  var o = /firefox/i.test(Ei()), n = /Trident/i.test(Ei());
  if (n && ao(e)) {
    var r = zo(e);
    if (r.position === "fixed")
      return null;
  }
  var s = Ta(e);
  for (gl(s) && (s = s.host); ao(s) && ["html", "body"].indexOf(Po(s)) < 0; ) {
    var a = zo(s);
    if (a.transform !== "none" || a.perspective !== "none" || a.contain === "paint" || ["transform", "perspective"].indexOf(a.willChange) !== -1 || o && a.willChange === "filter" || o && a.filter && a.filter !== "none")
      return s;
    s = s.parentNode;
  }
  return null;
}
function Hr(e) {
  for (var o = Jt(e), n = Zc(e); n && l0(n) && zo(n).position === "static"; )
    n = Zc(n);
  return n && (Po(n) === "html" || Po(n) === "body" && zo(n).position === "static") ? o : n || c0(e) || o;
}
function hl(e) {
  return ["top", "bottom"].indexOf(e) >= 0 ? "x" : "y";
}
function Sr(e, o, n) {
  return xn(e, Hs(o, n));
}
function p0(e, o, n) {
  var r = Sr(e, o, n);
  return r > n ? n : r;
}
function Sd() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function Td(e) {
  return Object.assign({}, Sd(), e);
}
function Cd(e, o) {
  return o.reduce(function(n, r) {
    return n[r] = e, n;
  }, {});
}
var u0 = function(o, n) {
  return o = typeof o == "function" ? o(Object.assign({}, n.rects, {
    placement: n.placement
  })) : o, Td(typeof o != "number" ? o : Cd(o, Ur));
};
function d0(e) {
  var o, n = e.state, r = e.name, s = e.options, a = n.elements.arrow, i = n.modifiersData.popperOffsets, l = Oo(n.placement), c = hl(l), p = [_t, co].indexOf(l) >= 0, u = p ? "height" : "width";
  if (!(!a || !i)) {
    var f = u0(s.padding, n), g = bl(a), b = c === "y" ? Vt : _t, h = c === "y" ? lo : co, d = n.rects.reference[u] + n.rects.reference[c] - i[c] - n.rects.popper[u], y = i[c] - n.rects.reference[c], S = Hr(a), O = S ? c === "y" ? S.clientHeight || 0 : S.clientWidth || 0 : 0, C = d / 2 - y / 2, T = f[b], w = O - g[u] - f[h], E = O / 2 - g[u] / 2 + C, $ = Sr(T, E, w), P = c;
    n.modifiersData[r] = (o = {}, o[P] = $, o.centerOffset = $ - E, o);
  }
}
function f0(e) {
  var o = e.state, n = e.options, r = n.element, s = r === void 0 ? "[data-popper-arrow]" : r;
  s != null && (typeof s == "string" && (s = o.elements.popper.querySelector(s), !s) || xd(o.elements.popper, s) && (o.elements.arrow = s));
}
const m0 = {
  name: "arrow",
  enabled: !0,
  phase: "main",
  fn: d0,
  effect: f0,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function Wn(e) {
  return e.split("-")[1];
}
var g0 = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function b0(e, o) {
  var n = e.x, r = e.y, s = o.devicePixelRatio || 1;
  return {
    x: Vn(n * s) / s || 0,
    y: Vn(r * s) / s || 0
  };
}
function Qc(e) {
  var o, n = e.popper, r = e.popperRect, s = e.placement, a = e.variation, i = e.offsets, l = e.position, c = e.gpuAcceleration, p = e.adaptive, u = e.roundOffsets, f = e.isFixed, g = i.x, b = g === void 0 ? 0 : g, h = i.y, d = h === void 0 ? 0 : h, y = typeof u == "function" ? u({
    x: b,
    y: d
  }) : {
    x: b,
    y: d
  };
  b = y.x, d = y.y;
  var S = i.hasOwnProperty("x"), O = i.hasOwnProperty("y"), C = _t, T = Vt, w = window;
  if (p) {
    var E = Hr(n), $ = "clientHeight", P = "clientWidth";
    if (E === Jt(n) && (E = nn(n), zo(E).position !== "static" && l === "absolute" && ($ = "scrollHeight", P = "scrollWidth")), E = E, s === Vt || (s === _t || s === co) && a === Ir) {
      T = lo;
      var N = f && E === w && w.visualViewport ? w.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        E[$]
      );
      d -= N - r.height, d *= c ? 1 : -1;
    }
    if (s === _t || (s === Vt || s === lo) && a === Ir) {
      C = co;
      var v = f && E === w && w.visualViewport ? w.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        E[P]
      );
      b -= v - r.width, b *= c ? 1 : -1;
    }
  }
  var R = Object.assign({
    position: l
  }, p && g0), A = u === !0 ? b0({
    x: b,
    y: d
  }, Jt(n)) : {
    x: b,
    y: d
  };
  if (b = A.x, d = A.y, c) {
    var j;
    return Object.assign({}, R, (j = {}, j[T] = O ? "0" : "", j[C] = S ? "0" : "", j.transform = (w.devicePixelRatio || 1) <= 1 ? "translate(" + b + "px, " + d + "px)" : "translate3d(" + b + "px, " + d + "px, 0)", j));
  }
  return Object.assign({}, R, (o = {}, o[T] = O ? d + "px" : "", o[C] = S ? b + "px" : "", o.transform = "", o));
}
function h0(e) {
  var o = e.state, n = e.options, r = n.gpuAcceleration, s = r === void 0 ? !0 : r, a = n.adaptive, i = a === void 0 ? !0 : a, l = n.roundOffsets, c = l === void 0 ? !0 : l, p = {
    placement: Oo(o.placement),
    variation: Wn(o.placement),
    popper: o.elements.popper,
    popperRect: o.rects.popper,
    gpuAcceleration: s,
    isFixed: o.options.strategy === "fixed"
  };
  o.modifiersData.popperOffsets != null && (o.styles.popper = Object.assign({}, o.styles.popper, Qc(Object.assign({}, p, {
    offsets: o.modifiersData.popperOffsets,
    position: o.options.strategy,
    adaptive: i,
    roundOffsets: c
  })))), o.modifiersData.arrow != null && (o.styles.arrow = Object.assign({}, o.styles.arrow, Qc(Object.assign({}, p, {
    offsets: o.modifiersData.arrow,
    position: "absolute",
    adaptive: !1,
    roundOffsets: c
  })))), o.attributes.popper = Object.assign({}, o.attributes.popper, {
    "data-popper-placement": o.placement
  });
}
const y0 = {
  name: "computeStyles",
  enabled: !0,
  phase: "beforeWrite",
  fn: h0,
  data: {}
};
var cs = {
  passive: !0
};
function v0(e) {
  var o = e.state, n = e.instance, r = e.options, s = r.scroll, a = s === void 0 ? !0 : s, i = r.resize, l = i === void 0 ? !0 : i, c = Jt(o.elements.popper), p = [].concat(o.scrollParents.reference, o.scrollParents.popper);
  return a && p.forEach(function(u) {
    u.addEventListener("scroll", n.update, cs);
  }), l && c.addEventListener("resize", n.update, cs), function() {
    a && p.forEach(function(u) {
      u.removeEventListener("scroll", n.update, cs);
    }), l && c.removeEventListener("resize", n.update, cs);
  };
}
const x0 = {
  name: "eventListeners",
  enabled: !0,
  phase: "write",
  fn: function() {
  },
  effect: v0,
  data: {}
};
var S0 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function Ns(e) {
  return e.replace(/left|right|bottom|top/g, function(o) {
    return S0[o];
  });
}
var T0 = {
  start: "end",
  end: "start"
};
function ep(e) {
  return e.replace(/start|end/g, function(o) {
    return T0[o];
  });
}
function yl(e) {
  var o = Jt(e), n = o.pageXOffset, r = o.pageYOffset;
  return {
    scrollLeft: n,
    scrollTop: r
  };
}
function vl(e) {
  return _n(nn(e)).left + yl(e).scrollLeft;
}
function C0(e, o) {
  var n = Jt(e), r = nn(e), s = n.visualViewport, a = r.clientWidth, i = r.clientHeight, l = 0, c = 0;
  if (s) {
    a = s.width, i = s.height;
    var p = vd();
    (p || !p && o === "fixed") && (l = s.offsetLeft, c = s.offsetTop);
  }
  return {
    width: a,
    height: i,
    x: l + vl(e),
    y: c
  };
}
function w0(e) {
  var o, n = nn(e), r = yl(e), s = (o = e.ownerDocument) == null ? void 0 : o.body, a = xn(n.scrollWidth, n.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0), i = xn(n.scrollHeight, n.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0), l = -r.scrollLeft + vl(e), c = -r.scrollTop;
  return zo(s || n).direction === "rtl" && (l += xn(n.clientWidth, s ? s.clientWidth : 0) - a), {
    width: a,
    height: i,
    x: l,
    y: c
  };
}
function xl(e) {
  var o = zo(e), n = o.overflow, r = o.overflowX, s = o.overflowY;
  return /auto|scroll|overlay|hidden/.test(n + s + r);
}
function wd(e) {
  return ["html", "body", "#document"].indexOf(Po(e)) >= 0 ? e.ownerDocument.body : ao(e) && xl(e) ? e : wd(Ta(e));
}
function Tr(e, o) {
  var n;
  o === void 0 && (o = []);
  var r = wd(e), s = r === ((n = e.ownerDocument) == null ? void 0 : n.body), a = Jt(r), i = s ? [a].concat(a.visualViewport || [], xl(r) ? r : []) : r, l = o.concat(i);
  return s ? l : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    l.concat(Tr(Ta(i)))
  );
}
function Ri(e) {
  return Object.assign({}, e, {
    left: e.x,
    top: e.y,
    right: e.x + e.width,
    bottom: e.y + e.height
  });
}
function O0(e, o) {
  var n = _n(e, !1, o === "fixed");
  return n.top = n.top + e.clientTop, n.left = n.left + e.clientLeft, n.bottom = n.top + e.clientHeight, n.right = n.left + e.clientWidth, n.width = e.clientWidth, n.height = e.clientHeight, n.x = n.left, n.y = n.top, n;
}
function tp(e, o, n) {
  return o === hd ? Ri(C0(e, n)) : Tn(o) ? O0(o, n) : Ri(w0(nn(e)));
}
function E0(e) {
  var o = Tr(Ta(e)), n = ["absolute", "fixed"].indexOf(zo(e).position) >= 0, r = n && ao(e) ? Hr(e) : e;
  return Tn(r) ? o.filter(function(s) {
    return Tn(s) && xd(s, r) && Po(s) !== "body";
  }) : [];
}
function R0(e, o, n, r) {
  var s = o === "clippingParents" ? E0(e) : [].concat(o), a = [].concat(s, [n]), i = a[0], l = a.reduce(function(c, p) {
    var u = tp(e, p, r);
    return c.top = xn(u.top, c.top), c.right = Hs(u.right, c.right), c.bottom = Hs(u.bottom, c.bottom), c.left = xn(u.left, c.left), c;
  }, tp(e, i, r));
  return l.width = l.right - l.left, l.height = l.bottom - l.top, l.x = l.left, l.y = l.top, l;
}
function Od(e) {
  var o = e.reference, n = e.element, r = e.placement, s = r ? Oo(r) : null, a = r ? Wn(r) : null, i = o.x + o.width / 2 - n.width / 2, l = o.y + o.height / 2 - n.height / 2, c;
  switch (s) {
    case Vt:
      c = {
        x: i,
        y: o.y - n.height
      };
      break;
    case lo:
      c = {
        x: i,
        y: o.y + o.height
      };
      break;
    case co:
      c = {
        x: o.x + o.width,
        y: l
      };
      break;
    case _t:
      c = {
        x: o.x - n.width,
        y: l
      };
      break;
    default:
      c = {
        x: o.x,
        y: o.y
      };
  }
  var p = s ? hl(s) : null;
  if (p != null) {
    var u = p === "y" ? "height" : "width";
    switch (a) {
      case Fn:
        c[p] = c[p] - (o[u] / 2 - n[u] / 2);
        break;
      case Ir:
        c[p] = c[p] + (o[u] / 2 - n[u] / 2);
        break;
    }
  }
  return c;
}
function jr(e, o) {
  o === void 0 && (o = {});
  var n = o, r = n.placement, s = r === void 0 ? e.placement : r, a = n.strategy, i = a === void 0 ? e.strategy : a, l = n.boundary, c = l === void 0 ? qv : l, p = n.rootBoundary, u = p === void 0 ? hd : p, f = n.elementContext, g = f === void 0 ? sr : f, b = n.altBoundary, h = b === void 0 ? !1 : b, d = n.padding, y = d === void 0 ? 0 : d, S = Td(typeof y != "number" ? y : Cd(y, Ur)), O = g === sr ? Yv : sr, C = e.rects.popper, T = e.elements[h ? O : g], w = R0(Tn(T) ? T : T.contextElement || nn(e.elements.popper), c, u, i), E = _n(e.elements.reference), $ = Od({
    reference: E,
    element: C,
    placement: s
  }), P = Ri(Object.assign({}, C, $)), N = g === sr ? P : E, v = {
    top: w.top - N.top + S.top,
    bottom: N.bottom - w.bottom + S.bottom,
    left: w.left - N.left + S.left,
    right: N.right - w.right + S.right
  }, R = e.modifiersData.offset;
  if (g === sr && R) {
    var A = R[s];
    Object.keys(v).forEach(function(j) {
      var k = [co, lo].indexOf(j) >= 0 ? 1 : -1, D = [Vt, lo].indexOf(j) >= 0 ? "y" : "x";
      v[j] += A[D] * k;
    });
  }
  return v;
}
function $0(e, o) {
  o === void 0 && (o = {});
  var n = o, r = n.placement, s = n.boundary, a = n.rootBoundary, i = n.padding, l = n.flipVariations, c = n.allowedAutoPlacements, p = c === void 0 ? yd : c, u = Wn(r), f = u ? l ? Jc : Jc.filter(function(h) {
    return Wn(h) === u;
  }) : Ur, g = f.filter(function(h) {
    return p.indexOf(h) >= 0;
  });
  g.length === 0 && (g = f);
  var b = g.reduce(function(h, d) {
    return h[d] = jr(e, {
      placement: d,
      boundary: s,
      rootBoundary: a,
      padding: i
    })[Oo(d)], h;
  }, {});
  return Object.keys(b).sort(function(h, d) {
    return b[h] - b[d];
  });
}
function k0(e) {
  if (Oo(e) === ml)
    return [];
  var o = Ns(e);
  return [ep(e), o, ep(o)];
}
function P0(e) {
  var o = e.state, n = e.options, r = e.name;
  if (!o.modifiersData[r]._skip) {
    for (var s = n.mainAxis, a = s === void 0 ? !0 : s, i = n.altAxis, l = i === void 0 ? !0 : i, c = n.fallbackPlacements, p = n.padding, u = n.boundary, f = n.rootBoundary, g = n.altBoundary, b = n.flipVariations, h = b === void 0 ? !0 : b, d = n.allowedAutoPlacements, y = o.options.placement, S = Oo(y), O = S === y, C = c || (O || !h ? [Ns(y)] : k0(y)), T = [y].concat(C).reduce(function(X, Y) {
      return X.concat(Oo(Y) === ml ? $0(o, {
        placement: Y,
        boundary: u,
        rootBoundary: f,
        padding: p,
        flipVariations: h,
        allowedAutoPlacements: d
      }) : Y);
    }, []), w = o.rects.reference, E = o.rects.popper, $ = /* @__PURE__ */ new Map(), P = !0, N = T[0], v = 0; v < T.length; v++) {
      var R = T[v], A = Oo(R), j = Wn(R) === Fn, k = [Vt, lo].indexOf(A) >= 0, D = k ? "width" : "height", B = jr(o, {
        placement: R,
        boundary: u,
        rootBoundary: f,
        altBoundary: g,
        padding: p
      }), _ = k ? j ? co : _t : j ? lo : Vt;
      w[D] > E[D] && (_ = Ns(_));
      var H = Ns(_), U = [];
      if (a && U.push(B[A] <= 0), l && U.push(B[_] <= 0, B[H] <= 0), U.every(function(X) {
        return X;
      })) {
        N = R, P = !1;
        break;
      }
      $.set(R, U);
    }
    if (P)
      for (var F = h ? 3 : 1, V = function(Y) {
        var q = T.find(function(ie) {
          var K = $.get(ie);
          if (K)
            return K.slice(0, Y).every(function(de) {
              return de;
            });
        });
        if (q)
          return N = q, "break";
      }, me = F; me > 0; me--) {
        var G = V(me);
        if (G === "break") break;
      }
    o.placement !== N && (o.modifiersData[r]._skip = !0, o.placement = N, o.reset = !0);
  }
}
const N0 = {
  name: "flip",
  enabled: !0,
  phase: "main",
  fn: P0,
  requiresIfExists: ["offset"],
  data: {
    _skip: !1
  }
};
function op(e, o, n) {
  return n === void 0 && (n = {
    x: 0,
    y: 0
  }), {
    top: e.top - o.height - n.y,
    right: e.right - o.width + n.x,
    bottom: e.bottom - o.height + n.y,
    left: e.left - o.width - n.x
  };
}
function np(e) {
  return [Vt, co, lo, _t].some(function(o) {
    return e[o] >= 0;
  });
}
function I0(e) {
  var o = e.state, n = e.name, r = o.rects.reference, s = o.rects.popper, a = o.modifiersData.preventOverflow, i = jr(o, {
    elementContext: "reference"
  }), l = jr(o, {
    altBoundary: !0
  }), c = op(i, r), p = op(l, s, a), u = np(c), f = np(p);
  o.modifiersData[n] = {
    referenceClippingOffsets: c,
    popperEscapeOffsets: p,
    isReferenceHidden: u,
    hasPopperEscaped: f
  }, o.attributes.popper = Object.assign({}, o.attributes.popper, {
    "data-popper-reference-hidden": u,
    "data-popper-escaped": f
  });
}
const j0 = {
  name: "hide",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: I0
};
function M0(e, o, n) {
  var r = Oo(e), s = [_t, Vt].indexOf(r) >= 0 ? -1 : 1, a = typeof n == "function" ? n(Object.assign({}, o, {
    placement: e
  })) : n, i = a[0], l = a[1];
  return i = i || 0, l = (l || 0) * s, [_t, co].indexOf(r) >= 0 ? {
    x: l,
    y: i
  } : {
    x: i,
    y: l
  };
}
function A0(e) {
  var o = e.state, n = e.options, r = e.name, s = n.offset, a = s === void 0 ? [0, 0] : s, i = yd.reduce(function(u, f) {
    return u[f] = M0(f, o.rects, a), u;
  }, {}), l = i[o.placement], c = l.x, p = l.y;
  o.modifiersData.popperOffsets != null && (o.modifiersData.popperOffsets.x += c, o.modifiersData.popperOffsets.y += p), o.modifiersData[r] = i;
}
const B0 = {
  name: "offset",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
  fn: A0
};
function L0(e) {
  var o = e.state, n = e.name;
  o.modifiersData[n] = Od({
    reference: o.rects.reference,
    element: o.rects.popper,
    placement: o.placement
  });
}
const D0 = {
  name: "popperOffsets",
  enabled: !0,
  phase: "read",
  fn: L0,
  data: {}
};
function z0(e) {
  return e === "x" ? "y" : "x";
}
function F0(e) {
  var o = e.state, n = e.options, r = e.name, s = n.mainAxis, a = s === void 0 ? !0 : s, i = n.altAxis, l = i === void 0 ? !1 : i, c = n.boundary, p = n.rootBoundary, u = n.altBoundary, f = n.padding, g = n.tether, b = g === void 0 ? !0 : g, h = n.tetherOffset, d = h === void 0 ? 0 : h, y = jr(o, {
    boundary: c,
    rootBoundary: p,
    padding: f,
    altBoundary: u
  }), S = Oo(o.placement), O = Wn(o.placement), C = !O, T = hl(S), w = z0(T), E = o.modifiersData.popperOffsets, $ = o.rects.reference, P = o.rects.popper, N = typeof d == "function" ? d(Object.assign({}, o.rects, {
    placement: o.placement
  })) : d, v = typeof N == "number" ? {
    mainAxis: N,
    altAxis: N
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, N), R = o.modifiersData.offset ? o.modifiersData.offset[o.placement] : null, A = {
    x: 0,
    y: 0
  };
  if (E) {
    if (a) {
      var j, k = T === "y" ? Vt : _t, D = T === "y" ? lo : co, B = T === "y" ? "height" : "width", _ = E[T], H = _ + y[k], U = _ - y[D], F = b ? -P[B] / 2 : 0, V = O === Fn ? $[B] : P[B], me = O === Fn ? -P[B] : -$[B], G = o.elements.arrow, X = b && G ? bl(G) : {
        width: 0,
        height: 0
      }, Y = o.modifiersData["arrow#persistent"] ? o.modifiersData["arrow#persistent"].padding : Sd(), q = Y[k], ie = Y[D], K = Sr(0, $[B], X[B]), de = C ? $[B] / 2 - F - K - q - v.mainAxis : V - K - q - v.mainAxis, oe = C ? -$[B] / 2 + F + K + ie + v.mainAxis : me + K + ie + v.mainAxis, he = o.elements.arrow && Hr(o.elements.arrow), z = he ? T === "y" ? he.clientTop || 0 : he.clientLeft || 0 : 0, be = (j = R == null ? void 0 : R[T]) != null ? j : 0, ye = _ + de - be - z, Pe = _ + oe - be, Te = Sr(b ? Hs(H, ye) : H, _, b ? xn(U, Pe) : U);
      E[T] = Te, A[T] = Te - _;
    }
    if (l) {
      var Z, $e = T === "x" ? Vt : _t, Oe = T === "x" ? lo : co, Me = E[w], I = w === "y" ? "height" : "width", J = Me + y[$e], xe = Me - y[Oe], ke = [Vt, _t].indexOf(S) !== -1, ee = (Z = R == null ? void 0 : R[w]) != null ? Z : 0, ue = ke ? J : Me - $[I] - P[I] - ee + v.altAxis, te = ke ? Me + $[I] + P[I] - ee - v.altAxis : xe, we = b && ke ? p0(ue, Me, te) : Sr(b ? ue : J, Me, b ? te : xe);
      E[w] = we, A[w] = we - Me;
    }
    o.modifiersData[r] = A;
  }
}
const V0 = {
  name: "preventOverflow",
  enabled: !0,
  phase: "main",
  fn: F0,
  requiresIfExists: ["offset"]
};
function _0(e) {
  return {
    scrollLeft: e.scrollLeft,
    scrollTop: e.scrollTop
  };
}
function W0(e) {
  return e === Jt(e) || !ao(e) ? yl(e) : _0(e);
}
function U0(e) {
  var o = e.getBoundingClientRect(), n = Vn(o.width) / e.offsetWidth || 1, r = Vn(o.height) / e.offsetHeight || 1;
  return n !== 1 || r !== 1;
}
function H0(e, o, n) {
  n === void 0 && (n = !1);
  var r = ao(o), s = ao(o) && U0(o), a = nn(o), i = _n(e, s, n), l = {
    scrollLeft: 0,
    scrollTop: 0
  }, c = {
    x: 0,
    y: 0
  };
  return (r || !r && !n) && ((Po(o) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  xl(a)) && (l = W0(o)), ao(o) ? (c = _n(o, !0), c.x += o.clientLeft, c.y += o.clientTop) : a && (c.x = vl(a))), {
    x: i.left + l.scrollLeft - c.x,
    y: i.top + l.scrollTop - c.y,
    width: i.width,
    height: i.height
  };
}
function G0(e) {
  var o = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r = [];
  e.forEach(function(a) {
    o.set(a.name, a);
  });
  function s(a) {
    n.add(a.name);
    var i = [].concat(a.requires || [], a.requiresIfExists || []);
    i.forEach(function(l) {
      if (!n.has(l)) {
        var c = o.get(l);
        c && s(c);
      }
    }), r.push(a);
  }
  return e.forEach(function(a) {
    n.has(a.name) || s(a);
  }), r;
}
function q0(e) {
  var o = G0(e);
  return r0.reduce(function(n, r) {
    return n.concat(o.filter(function(s) {
      return s.phase === r;
    }));
  }, []);
}
function Y0(e) {
  var o;
  return function() {
    return o || (o = new Promise(function(n) {
      Promise.resolve().then(function() {
        o = void 0, n(e());
      });
    })), o;
  };
}
function K0(e) {
  var o = e.reduce(function(n, r) {
    var s = n[r.name];
    return n[r.name] = s ? Object.assign({}, s, r, {
      options: Object.assign({}, s.options, r.options),
      data: Object.assign({}, s.data, r.data)
    }) : r, n;
  }, {});
  return Object.keys(o).map(function(n) {
    return o[n];
  });
}
var rp = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function sp() {
  for (var e = arguments.length, o = new Array(e), n = 0; n < e; n++)
    o[n] = arguments[n];
  return !o.some(function(r) {
    return !(r && typeof r.getBoundingClientRect == "function");
  });
}
function X0(e) {
  e === void 0 && (e = {});
  var o = e, n = o.defaultModifiers, r = n === void 0 ? [] : n, s = o.defaultOptions, a = s === void 0 ? rp : s;
  return function(l, c, p) {
    p === void 0 && (p = a);
    var u = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, rp, a),
      modifiersData: {},
      elements: {
        reference: l,
        popper: c
      },
      attributes: {},
      styles: {}
    }, f = [], g = !1, b = {
      state: u,
      setOptions: function(S) {
        var O = typeof S == "function" ? S(u.options) : S;
        d(), u.options = Object.assign({}, a, u.options, O), u.scrollParents = {
          reference: Tn(l) ? Tr(l) : l.contextElement ? Tr(l.contextElement) : [],
          popper: Tr(c)
        };
        var C = q0(K0([].concat(r, u.options.modifiers)));
        return u.orderedModifiers = C.filter(function(T) {
          return T.enabled;
        }), h(), b.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!g) {
          var S = u.elements, O = S.reference, C = S.popper;
          if (sp(O, C)) {
            u.rects = {
              reference: H0(O, Hr(C), u.options.strategy === "fixed"),
              popper: bl(C)
            }, u.reset = !1, u.placement = u.options.placement, u.orderedModifiers.forEach(function(v) {
              return u.modifiersData[v.name] = Object.assign({}, v.data);
            });
            for (var T = 0; T < u.orderedModifiers.length; T++) {
              if (u.reset === !0) {
                u.reset = !1, T = -1;
                continue;
              }
              var w = u.orderedModifiers[T], E = w.fn, $ = w.options, P = $ === void 0 ? {} : $, N = w.name;
              typeof E == "function" && (u = E({
                state: u,
                options: P,
                name: N,
                instance: b
              }) || u);
            }
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: Y0(function() {
        return new Promise(function(y) {
          b.forceUpdate(), y(u);
        });
      }),
      destroy: function() {
        d(), g = !0;
      }
    };
    if (!sp(l, c))
      return b;
    b.setOptions(p).then(function(y) {
      !g && p.onFirstUpdate && p.onFirstUpdate(y);
    });
    function h() {
      u.orderedModifiers.forEach(function(y) {
        var S = y.name, O = y.options, C = O === void 0 ? {} : O, T = y.effect;
        if (typeof T == "function") {
          var w = T({
            state: u,
            name: S,
            instance: b,
            options: C
          }), E = function() {
          };
          f.push(w || E);
        }
      });
    }
    function d() {
      f.forEach(function(y) {
        return y();
      }), f = [];
    }
    return b;
  };
}
var J0 = [x0, D0, y0, i0, B0, N0, V0, m0, j0], Z0 = /* @__PURE__ */ X0({
  defaultModifiers: J0
});
function Q0(e) {
  return typeof e == "function" ? e() : e;
}
const Mr = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    children: r,
    container: s,
    disablePortal: a = !1
  } = o, [i, l] = m.useState(null), c = Ye(/* @__PURE__ */ m.isValidElement(r) ? Vo(r) : null, n);
  if (Rt(() => {
    a || l(Q0(s) || document.body);
  }, [s, a]), Rt(() => {
    if (i && !a)
      return Ds(n, i), () => {
        Ds(n, null);
      };
  }, [n, i, a]), a) {
    if (/* @__PURE__ */ m.isValidElement(r)) {
      const p = {
        ref: c
      };
      return /* @__PURE__ */ m.cloneElement(r, p);
    }
    return r;
  }
  return i && /* @__PURE__ */ ui.createPortal(r, i);
});
process.env.NODE_ENV !== "production" && (Mr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The children to render into the `container`.
   */
  children: t.node,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([$o, t.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool
});
process.env.NODE_ENV !== "production" && (Mr.propTypes = Cn(Mr.propTypes));
function ex(e) {
  return ae("MuiPopper", e);
}
le("MuiPopper", ["root"]);
function tx(e, o) {
  if (o === "ltr")
    return e;
  switch (e) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return e;
  }
}
function Gs(e) {
  return typeof e == "function" ? e() : e;
}
function Ca(e) {
  return e.nodeType !== void 0;
}
function ox(e) {
  return !Ca(e);
}
const nx = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, ex, o);
}, rx = {}, sx = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    anchorEl: r,
    children: s,
    direction: a,
    disablePortal: i,
    modifiers: l,
    open: c,
    placement: p,
    popperOptions: u,
    popperRef: f,
    slotProps: g = {},
    slots: b = {},
    TransitionProps: h,
    // @ts-ignore internal logic
    ownerState: d,
    // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    ...y
  } = o, S = m.useRef(null), O = Ye(S, n), C = m.useRef(null), T = Ye(C, f), w = m.useRef(T);
  Rt(() => {
    w.current = T;
  }, [T]), m.useImperativeHandle(f, () => C.current, []);
  const E = tx(p, a), [$, P] = m.useState(E), [N, v] = m.useState(Gs(r));
  m.useEffect(() => {
    C.current && C.current.forceUpdate();
  }), m.useEffect(() => {
    r && v(Gs(r));
  }, [r]), Rt(() => {
    if (!N || !c)
      return;
    const D = (H) => {
      P(H.placement);
    };
    if (process.env.NODE_ENV !== "production" && N && Ca(N) && N.nodeType === 1) {
      const H = N.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && H.top === 0 && H.left === 0 && H.right === 0 && H.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    let B = [{
      name: "preventOverflow",
      options: {
        altBoundary: i
      }
    }, {
      name: "flip",
      options: {
        altBoundary: i
      }
    }, {
      name: "onUpdate",
      enabled: !0,
      phase: "afterWrite",
      fn: ({
        state: H
      }) => {
        D(H);
      }
    }];
    l != null && (B = B.concat(l)), u && u.modifiers != null && (B = B.concat(u.modifiers));
    const _ = Z0(N, S.current, {
      placement: E,
      ...u,
      modifiers: B
    });
    return w.current(_), () => {
      _.destroy(), w.current(null);
    };
  }, [N, i, l, c, u, E]);
  const R = {
    placement: $
  };
  h !== null && (R.TransitionProps = h);
  const A = nx(o), j = b.root ?? "div", k = Tt({
    elementType: j,
    externalSlotProps: g.root,
    externalForwardedProps: y,
    additionalProps: {
      role: "tooltip",
      ref: O
    },
    ownerState: o,
    className: A.root
  });
  return /* @__PURE__ */ x.jsx(j, {
    ...k,
    children: typeof s == "function" ? s(R) : s
  });
}), Ed = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    anchorEl: r,
    children: s,
    container: a,
    direction: i = "ltr",
    disablePortal: l = !1,
    keepMounted: c = !1,
    modifiers: p,
    open: u,
    placement: f = "bottom",
    popperOptions: g = rx,
    popperRef: b,
    style: h,
    transition: d = !1,
    slotProps: y = {},
    slots: S = {},
    ...O
  } = o, [C, T] = m.useState(!0), w = () => {
    T(!1);
  }, E = () => {
    T(!0);
  };
  if (!c && !u && (!d || C))
    return null;
  let $;
  if (a)
    $ = a;
  else if (r) {
    const v = Gs(r);
    $ = v && Ca(v) ? lt(v).body : lt(null).body;
  }
  const P = !u && c && (!d || C) ? "none" : void 0, N = d ? {
    in: u,
    onEnter: w,
    onExited: E
  } : void 0;
  return /* @__PURE__ */ x.jsx(Mr, {
    disablePortal: l,
    container: $,
    children: /* @__PURE__ */ x.jsx(sx, {
      anchorEl: r,
      direction: i,
      disablePortal: l,
      modifiers: p,
      ref: n,
      open: d ? !C : u,
      placement: f,
      popperOptions: g,
      popperRef: b,
      slotProps: y,
      slots: S,
      ...O,
      style: {
        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
        position: "fixed",
        // Fix Popper.js display issue
        top: 0,
        left: 0,
        display: P,
        ...h
      },
      TransitionProps: N,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (Ed.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: xt(t.oneOfType([$o, t.object, t.func]), (e) => {
    if (e.open) {
      const o = Gs(e.anchorEl);
      if (o && Ca(o) && o.nodeType === 1) {
        const n = o.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else if (!o || typeof o.getBoundingClientRect != "function" || ox(o) && o.contextElement != null && o.contextElement.nodeType !== 1)
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join(`
`));
    }
    return null;
  }),
  /**
   * Popper render function or node.
   */
  children: t.oneOfType([t.node, t.func]),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([$o, t.func]),
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: t.oneOf(["ltr", "rtl"]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: t.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: t.arrayOf(t.shape({
    data: t.object,
    effect: t.func,
    enabled: t.bool,
    fn: t.func,
    name: t.any,
    options: t.object,
    phase: t.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: t.arrayOf(t.string),
    requiresIfExists: t.arrayOf(t.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: t.shape({
    modifiers: t.array,
    onFirstUpdate: t.func,
    placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: t.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: Nt,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: t.shape({
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: t.bool
});
const ax = M(Ed, {
  name: "MuiPopper",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), Gr = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = go(), s = pe({
    props: o,
    name: "MuiPopper"
  }), {
    anchorEl: a,
    component: i,
    components: l,
    componentsProps: c,
    container: p,
    disablePortal: u,
    keepMounted: f,
    modifiers: g,
    open: b,
    placement: h,
    popperOptions: d,
    popperRef: y,
    transition: S,
    slots: O,
    slotProps: C,
    ...T
  } = s, w = (O == null ? void 0 : O.root) ?? (l == null ? void 0 : l.Root), E = {
    anchorEl: a,
    container: p,
    disablePortal: u,
    keepMounted: f,
    modifiers: g,
    open: b,
    placement: h,
    popperOptions: d,
    popperRef: y,
    transition: S,
    ...T
  };
  return /* @__PURE__ */ x.jsx(ax, {
    as: i,
    direction: r ? "rtl" : "ltr",
    slots: {
      root: w
    },
    slotProps: C ?? c,
    ...E,
    ref: n
  });
});
process.env.NODE_ENV !== "production" && (Gr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: t.oneOfType([$o, t.object, t.func]),
  /**
   * Popper render function or node.
   */
  children: t.oneOfType([t.node, t.func]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: t.shape({
    Root: t.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: t.shape({
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([$o, t.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: t.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: t.arrayOf(t.shape({
    data: t.object,
    effect: t.func,
    enabled: t.bool,
    fn: t.func,
    name: t.any,
    options: t.object,
    phase: t.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: t.arrayOf(t.string),
    requiresIfExists: t.arrayOf(t.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: t.shape({
    modifiers: t.array,
    onFirstUpdate: t.func,
    placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: t.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: Nt,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: t.shape({
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: t.bool
});
function ix(e) {
  return ae("MuiListSubheader", e);
}
const MP = le("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]), lx = (e) => {
  const {
    classes: o,
    color: n,
    disableGutters: r,
    inset: s,
    disableSticky: a
  } = e, i = {
    root: ["root", n !== "default" && `color${L(n)}`, !r && "gutters", s && "inset", !a && "sticky"]
  };
  return ce(i, ix, o);
}, cx = M("li", {
  name: "MuiListSubheader",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color !== "default" && o[`color${L(n.color)}`], !n.disableGutters && o.gutters, n.inset && o.inset, !n.disableSticky && o.sticky];
  }
})(Q(({
  theme: e
}) => ({
  boxSizing: "border-box",
  lineHeight: "48px",
  listStyle: "none",
  color: (e.vars || e).palette.text.secondary,
  fontFamily: e.typography.fontFamily,
  fontWeight: e.typography.fontWeightMedium,
  fontSize: e.typography.pxToRem(14),
  variants: [{
    props: {
      color: "primary"
    },
    style: {
      color: (e.vars || e).palette.primary.main
    }
  }, {
    props: {
      color: "inherit"
    },
    style: {
      color: "inherit"
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: o
    }) => o.inset,
    style: {
      paddingLeft: 72
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.disableSticky,
    style: {
      position: "sticky",
      top: 0,
      zIndex: 1,
      backgroundColor: (e.vars || e).palette.background.paper
    }
  }]
}))), qs = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiListSubheader"
  }), {
    className: s,
    color: a = "default",
    component: i = "li",
    disableGutters: l = !1,
    disableSticky: c = !1,
    inset: p = !1,
    ...u
  } = r, f = {
    ...r,
    color: a,
    component: i,
    disableGutters: l,
    disableSticky: c,
    inset: p
  }, g = lx(f);
  return /* @__PURE__ */ x.jsx(cx, {
    as: i,
    className: W(g.root, s),
    ref: n,
    ownerState: f,
    ...u
  });
});
qs && (qs.muiSkipListHighlight = !0);
process.env.NODE_ENV !== "production" && (qs.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'default'
   */
  color: t.oneOf(["default", "inherit", "primary"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the List Subheader will not have gutters.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, the List Subheader will not stick to the top during scroll.
   * @default false
   */
  disableSticky: t.bool,
  /**
   * If `true`, the List Subheader is indented.
   * @default false
   */
  inset: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const px = at(/* @__PURE__ */ x.jsx("path", {
  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
}), "Cancel");
function ux(e) {
  return ae("MuiChip", e);
}
const Ge = le("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorDefault", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]), dx = (e) => {
  const {
    classes: o,
    disabled: n,
    size: r,
    color: s,
    iconColor: a,
    onDelete: i,
    clickable: l,
    variant: c
  } = e, p = {
    root: ["root", c, n && "disabled", `size${L(r)}`, `color${L(s)}`, l && "clickable", l && `clickableColor${L(s)}`, i && "deletable", i && `deletableColor${L(s)}`, `${c}${L(s)}`],
    label: ["label", `label${L(r)}`],
    avatar: ["avatar", `avatar${L(r)}`, `avatarColor${L(s)}`],
    icon: ["icon", `icon${L(r)}`, `iconColor${L(a)}`],
    deleteIcon: ["deleteIcon", `deleteIcon${L(r)}`, `deleteIconColor${L(s)}`, `deleteIcon${L(c)}Color${L(s)}`]
  };
  return ce(p, ux, o);
}, fx = M("div", {
  name: "MuiChip",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      color: r,
      iconColor: s,
      clickable: a,
      onDelete: i,
      size: l,
      variant: c
    } = n;
    return [{
      [`& .${Ge.avatar}`]: o.avatar
    }, {
      [`& .${Ge.avatar}`]: o[`avatar${L(l)}`]
    }, {
      [`& .${Ge.avatar}`]: o[`avatarColor${L(r)}`]
    }, {
      [`& .${Ge.icon}`]: o.icon
    }, {
      [`& .${Ge.icon}`]: o[`icon${L(l)}`]
    }, {
      [`& .${Ge.icon}`]: o[`iconColor${L(s)}`]
    }, {
      [`& .${Ge.deleteIcon}`]: o.deleteIcon
    }, {
      [`& .${Ge.deleteIcon}`]: o[`deleteIcon${L(l)}`]
    }, {
      [`& .${Ge.deleteIcon}`]: o[`deleteIconColor${L(r)}`]
    }, {
      [`& .${Ge.deleteIcon}`]: o[`deleteIcon${L(c)}Color${L(r)}`]
    }, o.root, o[`size${L(l)}`], o[`color${L(r)}`], a && o.clickable, a && r !== "default" && o[`clickableColor${L(r)})`], i && o.deletable, i && r !== "default" && o[`deletableColor${L(r)}`], o[c], o[`${c}${L(r)}`]];
  }
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? e.palette.grey[700] : e.palette.grey[300];
  return {
    maxWidth: "100%",
    fontFamily: e.typography.fontFamily,
    fontSize: e.typography.pxToRem(13),
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    height: 32,
    color: (e.vars || e).palette.text.primary,
    backgroundColor: (e.vars || e).palette.action.selected,
    borderRadius: 32 / 2,
    whiteSpace: "nowrap",
    transition: e.transitions.create(["background-color", "box-shadow"]),
    // reset cursor explicitly in case ButtonBase is used
    cursor: "unset",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    textDecoration: "none",
    border: 0,
    // Remove `button` border
    padding: 0,
    // Remove `button` padding
    verticalAlign: "middle",
    boxSizing: "border-box",
    [`&.${Ge.disabled}`]: {
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`& .${Ge.avatar}`]: {
      marginLeft: 5,
      marginRight: -6,
      width: 24,
      height: 24,
      color: e.vars ? e.vars.palette.Chip.defaultAvatarColor : o,
      fontSize: e.typography.pxToRem(12)
    },
    [`& .${Ge.avatarColorPrimary}`]: {
      color: (e.vars || e).palette.primary.contrastText,
      backgroundColor: (e.vars || e).palette.primary.dark
    },
    [`& .${Ge.avatarColorSecondary}`]: {
      color: (e.vars || e).palette.secondary.contrastText,
      backgroundColor: (e.vars || e).palette.secondary.dark
    },
    [`& .${Ge.avatarSmall}`]: {
      marginLeft: 4,
      marginRight: -4,
      width: 18,
      height: 18,
      fontSize: e.typography.pxToRem(10)
    },
    [`& .${Ge.icon}`]: {
      marginLeft: 5,
      marginRight: -6
    },
    [`& .${Ge.deleteIcon}`]: {
      WebkitTapHighlightColor: "transparent",
      color: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / 0.26)` : Ne(e.palette.text.primary, 0.26),
      fontSize: 22,
      cursor: "pointer",
      margin: "0 5px 0 -6px",
      "&:hover": {
        color: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / 0.4)` : Ne(e.palette.text.primary, 0.4)
      }
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        height: 24,
        [`& .${Ge.icon}`]: {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        },
        [`& .${Ge.deleteIcon}`]: {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }
      }
    }, ...Object.entries(e.palette).filter(Ue(["contrastText"])).map(([n]) => ({
      props: {
        color: n
      },
      style: {
        backgroundColor: (e.vars || e).palette[n].main,
        color: (e.vars || e).palette[n].contrastText,
        [`& .${Ge.deleteIcon}`]: {
          color: e.vars ? `rgba(${e.vars.palette[n].contrastTextChannel} / 0.7)` : Ne(e.palette[n].contrastText, 0.7),
          "&:hover, &:active": {
            color: (e.vars || e).palette[n].contrastText
          }
        }
      }
    })), {
      props: (n) => n.iconColor === n.color,
      style: {
        [`& .${Ge.icon}`]: {
          color: e.vars ? e.vars.palette.Chip.defaultIconColor : o
        }
      }
    }, {
      props: (n) => n.iconColor === n.color && n.color !== "default",
      style: {
        [`& .${Ge.icon}`]: {
          color: "inherit"
        }
      }
    }, {
      props: {
        onDelete: !0
      },
      style: {
        [`&.${Ge.focusVisible}`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
        }
      }
    }, ...Object.entries(e.palette).filter(Ue(["dark"])).map(([n]) => ({
      props: {
        color: n,
        onDelete: !0
      },
      style: {
        [`&.${Ge.focusVisible}`]: {
          background: (e.vars || e).palette[n].dark
        }
      }
    })), {
      props: {
        clickable: !0
      },
      style: {
        userSelect: "none",
        WebkitTapHighlightColor: "transparent",
        cursor: "pointer",
        "&:hover": {
          backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity)
        },
        [`&.${Ge.focusVisible}`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
        },
        "&:active": {
          boxShadow: (e.vars || e).shadows[1]
        }
      }
    }, ...Object.entries(e.palette).filter(Ue(["dark"])).map(([n]) => ({
      props: {
        color: n,
        clickable: !0
      },
      style: {
        [`&:hover, &.${Ge.focusVisible}`]: {
          backgroundColor: (e.vars || e).palette[n].dark
        }
      }
    })), {
      props: {
        variant: "outlined"
      },
      style: {
        backgroundColor: "transparent",
        border: e.vars ? `1px solid ${e.vars.palette.Chip.defaultBorder}` : `1px solid ${e.palette.mode === "light" ? e.palette.grey[400] : e.palette.grey[700]}`,
        [`&.${Ge.clickable}:hover`]: {
          backgroundColor: (e.vars || e).palette.action.hover
        },
        [`&.${Ge.focusVisible}`]: {
          backgroundColor: (e.vars || e).palette.action.focus
        },
        [`& .${Ge.avatar}`]: {
          marginLeft: 4
        },
        [`& .${Ge.avatarSmall}`]: {
          marginLeft: 2
        },
        [`& .${Ge.icon}`]: {
          marginLeft: 4
        },
        [`& .${Ge.iconSmall}`]: {
          marginLeft: 2
        },
        [`& .${Ge.deleteIcon}`]: {
          marginRight: 5
        },
        [`& .${Ge.deleteIconSmall}`]: {
          marginRight: 3
        }
      }
    }, ...Object.entries(e.palette).filter(Ue()).map(([n]) => ({
      props: {
        variant: "outlined",
        color: n
      },
      style: {
        color: (e.vars || e).palette[n].main,
        border: `1px solid ${e.vars ? `rgba(${e.vars.palette[n].mainChannel} / 0.7)` : Ne(e.palette[n].main, 0.7)}`,
        [`&.${Ge.clickable}:hover`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[n].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette[n].main, e.palette.action.hoverOpacity)
        },
        [`&.${Ge.focusVisible}`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[n].mainChannel} / ${e.vars.palette.action.focusOpacity})` : Ne(e.palette[n].main, e.palette.action.focusOpacity)
        },
        [`& .${Ge.deleteIcon}`]: {
          color: e.vars ? `rgba(${e.vars.palette[n].mainChannel} / 0.7)` : Ne(e.palette[n].main, 0.7),
          "&:hover, &:active": {
            color: (e.vars || e).palette[n].main
          }
        }
      }
    }))]
  };
})), mx = M("span", {
  name: "MuiChip",
  slot: "Label",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      size: r
    } = n;
    return [o.label, o[`label${L(r)}`]];
  }
})({
  overflow: "hidden",
  textOverflow: "ellipsis",
  paddingLeft: 12,
  paddingRight: 12,
  whiteSpace: "nowrap",
  variants: [{
    props: {
      variant: "outlined"
    },
    style: {
      paddingLeft: 11,
      paddingRight: 11
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      paddingLeft: 8,
      paddingRight: 8
    }
  }, {
    props: {
      size: "small",
      variant: "outlined"
    },
    style: {
      paddingLeft: 7,
      paddingRight: 7
    }
  }]
});
function ap(e) {
  return e.key === "Backspace" || e.key === "Delete";
}
const Rd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiChip"
  }), {
    avatar: s,
    className: a,
    clickable: i,
    color: l = "default",
    component: c,
    deleteIcon: p,
    disabled: u = !1,
    icon: f,
    label: g,
    onClick: b,
    onDelete: h,
    onKeyDown: d,
    onKeyUp: y,
    size: S = "medium",
    variant: O = "filled",
    tabIndex: C,
    skipFocusWhenDisabled: T = !1,
    // TODO v6: Rename to `focusableWhenDisabled`.
    ...w
  } = r, E = m.useRef(null), $ = Ye(E, n), P = (U) => {
    U.stopPropagation(), h && h(U);
  }, N = (U) => {
    U.currentTarget === U.target && ap(U) && U.preventDefault(), d && d(U);
  }, v = (U) => {
    U.currentTarget === U.target && h && ap(U) && h(U), y && y(U);
  }, R = i !== !1 && b ? !0 : i, A = R || h ? wt : c || "div", j = {
    ...r,
    component: A,
    disabled: u,
    size: S,
    color: l,
    iconColor: /* @__PURE__ */ m.isValidElement(f) && f.props.color || l,
    onDelete: !!h,
    clickable: R,
    variant: O
  }, k = dx(j), D = A === wt ? {
    component: c || "div",
    focusVisibleClassName: k.focusVisible,
    ...h && {
      disableRipple: !0
    }
  } : {};
  let B = null;
  h && (B = p && /* @__PURE__ */ m.isValidElement(p) ? /* @__PURE__ */ m.cloneElement(p, {
    className: W(p.props.className, k.deleteIcon),
    onClick: P
  }) : /* @__PURE__ */ x.jsx(px, {
    className: W(k.deleteIcon),
    onClick: P
  }));
  let _ = null;
  s && /* @__PURE__ */ m.isValidElement(s) && (_ = /* @__PURE__ */ m.cloneElement(s, {
    className: W(k.avatar, s.props.className)
  }));
  let H = null;
  return f && /* @__PURE__ */ m.isValidElement(f) && (H = /* @__PURE__ */ m.cloneElement(f, {
    className: W(k.icon, f.props.className)
  })), process.env.NODE_ENV !== "production" && _ && H && console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one."), /* @__PURE__ */ x.jsxs(fx, {
    as: A,
    className: W(k.root, a),
    disabled: R && u ? !0 : void 0,
    onClick: b,
    onKeyDown: N,
    onKeyUp: v,
    ref: $,
    tabIndex: T && u ? -1 : C,
    ownerState: j,
    ...D,
    ...w,
    children: [_ || H, /* @__PURE__ */ x.jsx(mx, {
      className: W(k.label),
      ownerState: j,
      children: g
    }), B]
  });
});
process.env.NODE_ENV !== "production" && (Rd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Avatar element to display.
   */
  avatar: t.element,
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: ol,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the chip will appear clickable, and will raise when pressed,
   * even if the onClick prop is not defined.
   * If `false`, the chip will not appear clickable, even if onClick prop is defined.
   * This can be used, for example,
   * along with the component prop to indicate an anchor Chip is clickable.
   * Note: this controls the UI and does not affect the onClick event.
   */
  clickable: t.bool,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Override the default delete icon element. Shown only if `onDelete` is set.
   */
  deleteIcon: t.element,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Icon element.
   */
  icon: t.element,
  /**
   * The content of the component.
   */
  label: t.node,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * Callback fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onKeyUp: t.func,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * If `true`, allows the disabled chip to escape focus.
   * If `false`, allows the disabled chip to receive focus.
   * @default false
   */
  skipFocusWhenDisabled: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @ignore
   */
  tabIndex: t.number,
  /**
   * The variant to use.
   * @default 'filled'
   */
  variant: t.oneOfType([t.oneOf(["filled", "outlined"]), t.string])
});
function ps(e) {
  return parseInt(e, 10) || 0;
}
const gx = {
  shadow: {
    // Visibility needed to hide the extra text area on iPads
    visibility: "hidden",
    // Remove from the content flow
    position: "absolute",
    // Ignore the scrollbar width
    overflow: "hidden",
    height: 0,
    top: 0,
    left: 0,
    // Create a new layer, increase the isolation of the computed values
    transform: "translateZ(0)"
  }
};
function bx(e) {
  for (const o in e)
    return !1;
  return !0;
}
function hx(e) {
  return bx(e) || e.outerHeightStyle === 0 && !e.overflowing;
}
const $d = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    onChange: r,
    maxRows: s,
    minRows: a = 1,
    style: i,
    value: l,
    ...c
  } = o, {
    current: p
  } = m.useRef(l != null), u = m.useRef(null), f = Ye(n, u), g = m.useRef(null), b = m.useRef(null), h = m.useCallback(() => {
    const O = u.current, C = b.current;
    if (!O || !C)
      return;
    const w = Pt(O).getComputedStyle(O);
    if (w.width === "0px")
      return {
        outerHeightStyle: 0,
        overflowing: !1
      };
    C.style.width = w.width, C.value = O.value || o.placeholder || "x", C.value.slice(-1) === `
` && (C.value += " ");
    const E = w.boxSizing, $ = ps(w.paddingBottom) + ps(w.paddingTop), P = ps(w.borderBottomWidth) + ps(w.borderTopWidth), N = C.scrollHeight;
    C.value = "x";
    const v = C.scrollHeight;
    let R = N;
    a && (R = Math.max(Number(a) * v, R)), s && (R = Math.min(Number(s) * v, R)), R = Math.max(R, v);
    const A = R + (E === "border-box" ? $ + P : 0), j = Math.abs(R - N) <= 1;
    return {
      outerHeightStyle: A,
      overflowing: j
    };
  }, [s, a, o.placeholder]), d = m.useCallback(() => {
    const O = u.current, C = h();
    if (!O || !C || hx(C))
      return;
    const T = C.outerHeightStyle;
    g.current !== T && (g.current = T, O.style.height = `${T}px`), O.style.overflow = C.overflowing ? "hidden" : "";
  }, [h]), y = m.useRef(-1);
  Rt(() => {
    const O = Wr(() => d()), C = u == null ? void 0 : u.current;
    if (!C)
      return;
    const T = Pt(C);
    T.addEventListener("resize", O);
    let w;
    return typeof ResizeObserver < "u" && (w = new ResizeObserver(() => {
      w.unobserve(C), cancelAnimationFrame(y.current), d(), y.current = requestAnimationFrame(() => {
        w.observe(C);
      });
    }), w.observe(C)), () => {
      O.clear(), cancelAnimationFrame(y.current), T.removeEventListener("resize", O), w && w.disconnect();
    };
  }, [h, d]), Rt(() => {
    d();
  });
  const S = (O) => {
    p || d(), r && r(O);
  };
  return /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ x.jsx("textarea", {
      value: l,
      onChange: S,
      ref: f,
      rows: a,
      style: i,
      ...c
    }), /* @__PURE__ */ x.jsx("textarea", {
      "aria-hidden": !0,
      className: o.className,
      readOnly: !0,
      ref: b,
      tabIndex: -1,
      style: {
        ...gx.shadow,
        ...i,
        paddingTop: 0,
        paddingBottom: 0
      }
    })]
  });
});
process.env.NODE_ENV !== "production" && ($d.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Maximum number of rows to display.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  onChange: t.func,
  /**
   * @ignore
   */
  placeholder: t.string,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * @ignore
   */
  value: t.oneOfType([t.arrayOf(t.string), t.number, t.string])
});
function Lo(e) {
  return typeof e == "string";
}
function _o({
  props: e,
  states: o,
  muiFormControl: n
}) {
  return o.reduce((r, s) => (r[s] = e[s], n && typeof e[s] > "u" && (r[s] = n[s]), r), {});
}
const qr = /* @__PURE__ */ m.createContext(void 0);
process.env.NODE_ENV !== "production" && (qr.displayName = "FormControlContext");
function uo() {
  return m.useContext(qr);
}
function ip(e) {
  return e != null && !(Array.isArray(e) && e.length === 0);
}
function Ys(e, o = !1) {
  return e && (ip(e.value) && e.value !== "" || o && ip(e.defaultValue) && e.defaultValue !== "");
}
function yx(e) {
  return e.startAdornment;
}
function vx(e) {
  return ae("MuiInputBase", e);
}
const Ht = le("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
var lp;
const wa = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.formControl && o.formControl, n.startAdornment && o.adornedStart, n.endAdornment && o.adornedEnd, n.error && o.error, n.size === "small" && o.sizeSmall, n.multiline && o.multiline, n.color && o[`color${L(n.color)}`], n.fullWidth && o.fullWidth, n.hiddenLabel && o.hiddenLabel];
}, Oa = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.input, n.size === "small" && o.inputSizeSmall, n.multiline && o.inputMultiline, n.type === "search" && o.inputTypeSearch, n.startAdornment && o.inputAdornedStart, n.endAdornment && o.inputAdornedEnd, n.hiddenLabel && o.inputHiddenLabel];
}, xx = (e) => {
  const {
    classes: o,
    color: n,
    disabled: r,
    error: s,
    endAdornment: a,
    focused: i,
    formControl: l,
    fullWidth: c,
    hiddenLabel: p,
    multiline: u,
    readOnly: f,
    size: g,
    startAdornment: b,
    type: h
  } = e, d = {
    root: ["root", `color${L(n)}`, r && "disabled", s && "error", c && "fullWidth", i && "focused", l && "formControl", g && g !== "medium" && `size${L(g)}`, u && "multiline", b && "adornedStart", a && "adornedEnd", p && "hiddenLabel", f && "readOnly"],
    input: ["input", r && "disabled", h === "search" && "inputTypeSearch", u && "inputMultiline", g === "small" && "inputSizeSmall", p && "inputHiddenLabel", b && "inputAdornedStart", a && "inputAdornedEnd", f && "readOnly"]
  };
  return ce(d, vx, o);
}, Ea = M("div", {
  name: "MuiInputBase",
  slot: "Root",
  overridesResolver: wa
})(Q(({
  theme: e
}) => ({
  ...e.typography.body1,
  color: (e.vars || e).palette.text.primary,
  lineHeight: "1.4375em",
  // 23px
  boxSizing: "border-box",
  // Prevent padding issue with fullWidth.
  position: "relative",
  cursor: "text",
  display: "inline-flex",
  alignItems: "center",
  [`&.${Ht.disabled}`]: {
    color: (e.vars || e).palette.text.disabled,
    cursor: "default"
  },
  variants: [{
    props: ({
      ownerState: o
    }) => o.multiline,
    style: {
      padding: "4px 0 5px"
    }
  }, {
    props: ({
      ownerState: o,
      size: n
    }) => o.multiline && n === "small",
    style: {
      paddingTop: 1
    }
  }, {
    props: ({
      ownerState: o
    }) => o.fullWidth,
    style: {
      width: "100%"
    }
  }]
}))), Ra = M("input", {
  name: "MuiInputBase",
  slot: "Input",
  overridesResolver: Oa
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light", n = {
    color: "currentColor",
    ...e.vars ? {
      opacity: e.vars.opacity.inputPlaceholder
    } : {
      opacity: o ? 0.42 : 0.5
    },
    transition: e.transitions.create("opacity", {
      duration: e.transitions.duration.shorter
    })
  }, r = {
    opacity: "0 !important"
  }, s = e.vars ? {
    opacity: e.vars.opacity.inputPlaceholder
  } : {
    opacity: o ? 0.42 : 0.5
  };
  return {
    font: "inherit",
    letterSpacing: "inherit",
    color: "currentColor",
    padding: "4px 0 5px",
    border: 0,
    boxSizing: "content-box",
    background: "none",
    height: "1.4375em",
    // Reset 23pxthe native input line-height
    margin: 0,
    // Reset for Safari
    WebkitTapHighlightColor: "transparent",
    display: "block",
    // Make the flex item shrink with Firefox
    minWidth: 0,
    width: "100%",
    "&::-webkit-input-placeholder": n,
    "&::-moz-placeholder": n,
    // Firefox 19+
    "&::-ms-input-placeholder": n,
    // Edge
    "&:focus": {
      outline: 0
    },
    // Reset Firefox invalid required input style
    "&:invalid": {
      boxShadow: "none"
    },
    "&::-webkit-search-decoration": {
      // Remove the padding when type=search.
      WebkitAppearance: "none"
    },
    // Show and hide the placeholder logic
    [`label[data-shrink=false] + .${Ht.formControl} &`]: {
      "&::-webkit-input-placeholder": r,
      "&::-moz-placeholder": r,
      // Firefox 19+
      "&::-ms-input-placeholder": r,
      // Edge
      "&:focus::-webkit-input-placeholder": s,
      "&:focus::-moz-placeholder": s,
      // Firefox 19+
      "&:focus::-ms-input-placeholder": s
      // Edge
    },
    [`&.${Ht.disabled}`]: {
      opacity: 1,
      // Reset iOS opacity
      WebkitTextFillColor: (e.vars || e).palette.text.disabled
      // Fix opacity Safari bug
    },
    variants: [{
      props: ({
        ownerState: a
      }) => !a.disableInjectingGlobalStyles,
      style: {
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        paddingTop: 1
      }
    }, {
      props: ({
        ownerState: a
      }) => a.multiline,
      style: {
        height: "auto",
        resize: "none",
        padding: 0,
        paddingTop: 0
      }
    }, {
      props: {
        type: "search"
      },
      style: {
        MozAppearance: "textfield"
        // Improve type search style.
      }
    }]
  };
})), cp = cl({
  "@keyframes mui-auto-fill": {
    from: {
      display: "block"
    }
  },
  "@keyframes mui-auto-fill-cancel": {
    from: {
      display: "block"
    }
  }
}), Yr = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiInputBase"
  }), {
    "aria-describedby": s,
    autoComplete: a,
    autoFocus: i,
    className: l,
    color: c,
    components: p = {},
    componentsProps: u = {},
    defaultValue: f,
    disabled: g,
    disableInjectingGlobalStyles: b,
    endAdornment: h,
    error: d,
    fullWidth: y = !1,
    id: S,
    inputComponent: O = "input",
    inputProps: C = {},
    inputRef: T,
    margin: w,
    maxRows: E,
    minRows: $,
    multiline: P = !1,
    name: N,
    onBlur: v,
    onChange: R,
    onClick: A,
    onFocus: j,
    onKeyDown: k,
    onKeyUp: D,
    placeholder: B,
    readOnly: _,
    renderSuffix: H,
    rows: U,
    size: F,
    slotProps: V = {},
    slots: me = {},
    startAdornment: G,
    type: X = "text",
    value: Y,
    ...q
  } = r, ie = C.value != null ? C.value : Y, {
    current: K
  } = m.useRef(ie != null), de = m.useRef(), oe = m.useCallback((ve) => {
    process.env.NODE_ENV !== "production" && ve && ve.nodeName !== "INPUT" && !ve.focus && console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join(`
`));
  }, []), he = Ye(de, T, C.ref, oe), [z, be] = m.useState(!1), ye = uo();
  process.env.NODE_ENV !== "production" && m.useEffect(() => {
    if (ye)
      return ye.registerEffect();
  }, [ye]);
  const Pe = _o({
    props: r,
    muiFormControl: ye,
    states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
  });
  Pe.focused = ye ? ye.focused : z, m.useEffect(() => {
    !ye && g && z && (be(!1), v && v());
  }, [ye, g, z, v]);
  const Te = ye && ye.onFilled, Z = ye && ye.onEmpty, $e = m.useCallback((ve) => {
    Ys(ve) ? Te && Te() : Z && Z();
  }, [Te, Z]);
  Rt(() => {
    K && $e({
      value: ie
    });
  }, [ie, $e, K]);
  const Oe = (ve) => {
    j && j(ve), C.onFocus && C.onFocus(ve), ye && ye.onFocus ? ye.onFocus(ve) : be(!0);
  }, Me = (ve) => {
    v && v(ve), C.onBlur && C.onBlur(ve), ye && ye.onBlur ? ye.onBlur(ve) : be(!1);
  }, I = (ve, ...Be) => {
    if (!K) {
      const Ae = ve.target || de.current;
      if (Ae == null)
        throw new Error(process.env.NODE_ENV !== "production" ? "MUI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info." : zt(1));
      $e({
        value: Ae.value
      });
    }
    C.onChange && C.onChange(ve, ...Be), R && R(ve, ...Be);
  };
  m.useEffect(() => {
    $e(de.current);
  }, []);
  const J = (ve) => {
    de.current && ve.currentTarget === ve.target && de.current.focus(), A && A(ve);
  };
  let xe = O, ke = C;
  P && xe === "input" && (U ? (process.env.NODE_ENV !== "production" && ($ || E) && console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set."), ke = {
    type: void 0,
    minRows: U,
    maxRows: U,
    ...ke
  }) : ke = {
    type: void 0,
    maxRows: E,
    minRows: $,
    ...ke
  }, xe = $d);
  const ee = (ve) => {
    $e(ve.animationName === "mui-auto-fill-cancel" ? de.current : {
      value: "x"
    });
  };
  m.useEffect(() => {
    ye && ye.setAdornedStart(!!G);
  }, [ye, G]);
  const ue = {
    ...r,
    color: Pe.color || "primary",
    disabled: Pe.disabled,
    endAdornment: h,
    error: Pe.error,
    focused: Pe.focused,
    formControl: ye,
    fullWidth: y,
    hiddenLabel: Pe.hiddenLabel,
    multiline: P,
    size: Pe.size,
    startAdornment: G,
    type: X
  }, te = xx(ue), we = me.root || p.Root || Ea, Ce = V.root || u.root || {}, ge = me.input || p.Input || Ra;
  return ke = {
    ...ke,
    ...V.input ?? u.input
  }, /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [!b && typeof cp == "function" && // For Emotion/Styled-components, InputGlobalStyles will be a function
    // For Pigment CSS, this has no effect because the InputGlobalStyles will be null.
    (lp || (lp = /* @__PURE__ */ x.jsx(cp, {}))), /* @__PURE__ */ x.jsxs(we, {
      ...Ce,
      ref: n,
      onClick: J,
      ...q,
      ...!Lo(we) && {
        ownerState: {
          ...ue,
          ...Ce.ownerState
        }
      },
      className: W(te.root, Ce.className, l, _ && "MuiInputBase-readOnly"),
      children: [G, /* @__PURE__ */ x.jsx(qr.Provider, {
        value: null,
        children: /* @__PURE__ */ x.jsx(ge, {
          "aria-invalid": Pe.error,
          "aria-describedby": s,
          autoComplete: a,
          autoFocus: i,
          defaultValue: f,
          disabled: Pe.disabled,
          id: S,
          onAnimationStart: ee,
          name: N,
          placeholder: B,
          readOnly: _,
          required: Pe.required,
          rows: U,
          value: ie,
          onKeyDown: k,
          onKeyUp: D,
          type: X,
          ...ke,
          ...!Lo(ge) && {
            as: xe,
            ownerState: {
              ...ue,
              ...ke.ownerState
            }
          },
          ref: he,
          className: W(te.input, ke.className, _ && "MuiInputBase-readOnly"),
          onBlur: Me,
          onChange: I,
          onFocus: Oe
        })
      }), h, H ? H({
        ...Pe,
        startAdornment: G
      }) : null]
    })]
  });
});
process.env.NODE_ENV !== "production" && (Yr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  "aria-describedby": t.string,
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
   * @default false
   */
  disableInjectingGlobalStyles: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: en,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the `input` is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */
  onBlur: t.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * Callback fired when the `input` doesn't satisfy its constraints.
   */
  onInvalid: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onKeyUp: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * @ignore
   */
  renderSuffix: t.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The size of the component.
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
function Sx(e) {
  return ae("MuiInput", e);
}
const Yo = {
  ...Ht,
  ...le("MuiInput", ["root", "underline", "input"])
};
function Tx(e) {
  return ae("MuiOutlinedInput", e);
}
const to = {
  ...Ht,
  ...le("MuiOutlinedInput", ["root", "notchedOutline", "input"])
};
function Cx(e) {
  return ae("MuiFilledInput", e);
}
const Gt = {
  ...Ht,
  ...le("MuiFilledInput", ["root", "underline", "input", "adornedStart", "adornedEnd", "sizeSmall", "multiline", "hiddenLabel"])
}, Sl = at(/* @__PURE__ */ x.jsx("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");
function wx(e) {
  return ae("MuiAutocomplete", e);
}
const _e = le("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
var pp, up;
const Ox = (e) => {
  const {
    classes: o,
    disablePortal: n,
    expanded: r,
    focused: s,
    fullWidth: a,
    hasClearIcon: i,
    hasPopupIcon: l,
    inputFocused: c,
    popupOpen: p,
    size: u
  } = e, f = {
    root: ["root", r && "expanded", s && "focused", a && "fullWidth", i && "hasClearIcon", l && "hasPopupIcon"],
    inputRoot: ["inputRoot"],
    input: ["input", c && "inputFocused"],
    tag: ["tag", `tagSize${L(u)}`],
    endAdornment: ["endAdornment"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", p && "popupIndicatorOpen"],
    popper: ["popper", n && "popperDisablePortal"],
    paper: ["paper"],
    listbox: ["listbox"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    option: ["option"],
    groupLabel: ["groupLabel"],
    groupUl: ["groupUl"]
  };
  return ce(f, wx, o);
}, Ex = M("div", {
  name: "MuiAutocomplete",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      fullWidth: r,
      hasClearIcon: s,
      hasPopupIcon: a,
      inputFocused: i,
      size: l
    } = n;
    return [{
      [`& .${_e.tag}`]: o.tag
    }, {
      [`& .${_e.tag}`]: o[`tagSize${L(l)}`]
    }, {
      [`& .${_e.inputRoot}`]: o.inputRoot
    }, {
      [`& .${_e.input}`]: o.input
    }, {
      [`& .${_e.input}`]: i && o.inputFocused
    }, o.root, r && o.fullWidth, a && o.hasPopupIcon, s && o.hasClearIcon];
  }
})({
  [`&.${_e.focused} .${_e.clearIndicator}`]: {
    visibility: "visible"
  },
  /* Avoid double tap issue on iOS */
  "@media (pointer: fine)": {
    [`&:hover .${_e.clearIndicator}`]: {
      visibility: "visible"
    }
  },
  [`& .${_e.tag}`]: {
    margin: 3,
    maxWidth: "calc(100% - 6px)"
  },
  [`& .${_e.inputRoot}`]: {
    [`.${_e.hasPopupIcon}&, .${_e.hasClearIcon}&`]: {
      paddingRight: 30
    },
    [`.${_e.hasPopupIcon}.${_e.hasClearIcon}&`]: {
      paddingRight: 56
    },
    [`& .${_e.input}`]: {
      width: 0,
      minWidth: 30
    }
  },
  [`& .${Yo.root}`]: {
    paddingBottom: 1,
    "& .MuiInput-input": {
      padding: "4px 4px 4px 0px"
    }
  },
  [`& .${Yo.root}.${Ht.sizeSmall}`]: {
    [`& .${Yo.input}`]: {
      padding: "2px 4px 3px 0"
    }
  },
  [`& .${to.root}`]: {
    padding: 9,
    [`.${_e.hasPopupIcon}&, .${_e.hasClearIcon}&`]: {
      paddingRight: 39
    },
    [`.${_e.hasPopupIcon}.${_e.hasClearIcon}&`]: {
      paddingRight: 65
    },
    [`& .${_e.input}`]: {
      padding: "7.5px 4px 7.5px 5px"
    },
    [`& .${_e.endAdornment}`]: {
      right: 9
    }
  },
  [`& .${to.root}.${Ht.sizeSmall}`]: {
    // Don't specify paddingRight, as it overrides the default value set when there is only
    // one of the popup or clear icon as the specificity is equal so the latter one wins
    paddingTop: 6,
    paddingBottom: 6,
    paddingLeft: 6,
    [`& .${_e.input}`]: {
      padding: "2.5px 4px 2.5px 8px"
    }
  },
  [`& .${Gt.root}`]: {
    paddingTop: 19,
    paddingLeft: 8,
    [`.${_e.hasPopupIcon}&, .${_e.hasClearIcon}&`]: {
      paddingRight: 39
    },
    [`.${_e.hasPopupIcon}.${_e.hasClearIcon}&`]: {
      paddingRight: 65
    },
    [`& .${Gt.input}`]: {
      padding: "7px 4px"
    },
    [`& .${_e.endAdornment}`]: {
      right: 9
    }
  },
  [`& .${Gt.root}.${Ht.sizeSmall}`]: {
    paddingBottom: 1,
    [`& .${Gt.input}`]: {
      padding: "2.5px 4px"
    }
  },
  [`& .${Ht.hiddenLabel}`]: {
    paddingTop: 8
  },
  [`& .${Gt.root}.${Ht.hiddenLabel}`]: {
    paddingTop: 0,
    paddingBottom: 0,
    [`& .${_e.input}`]: {
      paddingTop: 16,
      paddingBottom: 17
    }
  },
  [`& .${Gt.root}.${Ht.hiddenLabel}.${Ht.sizeSmall}`]: {
    [`& .${_e.input}`]: {
      paddingTop: 8,
      paddingBottom: 9
    }
  },
  [`& .${_e.input}`]: {
    flexGrow: 1,
    textOverflow: "ellipsis",
    opacity: 0
  },
  variants: [{
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      [`& .${_e.tag}`]: {
        margin: 2,
        maxWidth: "calc(100% - 4px)"
      }
    }
  }, {
    props: {
      inputFocused: !0
    },
    style: {
      [`& .${_e.input}`]: {
        opacity: 1
      }
    }
  }, {
    props: {
      multiple: !0
    },
    style: {
      [`& .${_e.inputRoot}`]: {
        flexWrap: "wrap"
      }
    }
  }]
}), Rx = M("div", {
  name: "MuiAutocomplete",
  slot: "EndAdornment",
  overridesResolver: (e, o) => o.endAdornment
})({
  // We use a position absolute to support wrapping tags.
  position: "absolute",
  right: 0,
  top: "50%",
  transform: "translate(0, -50%)"
}), $x = M(Xo, {
  name: "MuiAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (e, o) => o.clearIndicator
})({
  marginRight: -2,
  padding: 4,
  visibility: "hidden"
}), kx = M(Xo, {
  name: "MuiAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.popupIndicator, n.popupOpen && o.popupIndicatorOpen];
  }
})({
  padding: 2,
  marginRight: -2,
  variants: [{
    props: {
      popupOpen: !0
    },
    style: {
      transform: "rotate(180deg)"
    }
  }]
}), Px = M(Gr, {
  name: "MuiAutocomplete",
  slot: "Popper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${_e.option}`]: o.option
    }, o.popper, n.disablePortal && o.popperDisablePortal];
  }
})(Q(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.modal,
  variants: [{
    props: {
      disablePortal: !0
    },
    style: {
      position: "absolute"
    }
  }]
}))), Nx = M(Qt, {
  name: "MuiAutocomplete",
  slot: "Paper",
  overridesResolver: (e, o) => o.paper
})(Q(({
  theme: e
}) => ({
  ...e.typography.body1,
  overflow: "auto"
}))), Ix = M("div", {
  name: "MuiAutocomplete",
  slot: "Loading",
  overridesResolver: (e, o) => o.loading
})(Q(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  padding: "14px 16px"
}))), jx = M("div", {
  name: "MuiAutocomplete",
  slot: "NoOptions",
  overridesResolver: (e, o) => o.noOptions
})(Q(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  padding: "14px 16px"
}))), Mx = M("ul", {
  name: "MuiAutocomplete",
  slot: "Listbox",
  overridesResolver: (e, o) => o.listbox
})(Q(({
  theme: e
}) => ({
  listStyle: "none",
  margin: 0,
  padding: "8px 0",
  maxHeight: "40vh",
  overflow: "auto",
  position: "relative",
  [`& .${_e.option}`]: {
    minHeight: 48,
    display: "flex",
    overflow: "hidden",
    justifyContent: "flex-start",
    alignItems: "center",
    cursor: "pointer",
    paddingTop: 6,
    boxSizing: "border-box",
    outline: "0",
    WebkitTapHighlightColor: "transparent",
    paddingBottom: 6,
    paddingLeft: 16,
    paddingRight: 16,
    [e.breakpoints.up("sm")]: {
      minHeight: "auto"
    },
    [`&.${_e.focused}`]: {
      backgroundColor: (e.vars || e).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    '&[aria-disabled="true"]': {
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`&.${_e.focusVisible}`]: {
      backgroundColor: (e.vars || e).palette.action.focus
    },
    '&[aria-selected="true"]': {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity),
      [`&.${_e.focused}`]: {
        backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (e.vars || e).palette.action.selected
        }
      },
      [`&.${_e.focusVisible}`]: {
        backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
      }
    }
  }
}))), Ax = M(qs, {
  name: "MuiAutocomplete",
  slot: "GroupLabel",
  overridesResolver: (e, o) => o.groupLabel
})(Q(({
  theme: e
}) => ({
  backgroundColor: (e.vars || e).palette.background.paper,
  top: -8
}))), Bx = M("ul", {
  name: "MuiAutocomplete",
  slot: "GroupUl",
  overridesResolver: (e, o) => o.groupUl
})({
  padding: 0,
  [`& .${_e.option}`]: {
    paddingLeft: 24
  }
}), Lx = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAutocomplete"
  }), {
    autoComplete: s = !1,
    autoHighlight: a = !1,
    autoSelect: i = !1,
    blurOnSelect: l = !1,
    ChipProps: c,
    className: p,
    clearIcon: u = pp || (pp = /* @__PURE__ */ x.jsx(bd, {
      fontSize: "small"
    })),
    clearOnBlur: f = !r.freeSolo,
    clearOnEscape: g = !1,
    clearText: b = "Clear",
    closeText: h = "Close",
    componentsProps: d,
    defaultValue: y = r.multiple ? [] : null,
    disableClearable: S = !1,
    disableCloseOnSelect: O = !1,
    disabled: C = !1,
    disabledItemsFocusable: T = !1,
    disableListWrap: w = !1,
    disablePortal: E = !1,
    filterOptions: $,
    filterSelectedOptions: P = !1,
    forcePopupIcon: N = "auto",
    freeSolo: v = !1,
    fullWidth: R = !1,
    getLimitTagsText: A = (Xe) => `+${Xe}`,
    getOptionDisabled: j,
    getOptionKey: k,
    getOptionLabel: D,
    isOptionEqualToValue: B,
    groupBy: _,
    handleHomeEndKeys: H = !r.freeSolo,
    id: U,
    includeInputInList: F = !1,
    inputValue: V,
    limitTags: me = -1,
    ListboxComponent: G,
    ListboxProps: X,
    loading: Y = !1,
    loadingText: q = "Loading…",
    multiple: ie = !1,
    noOptionsText: K = "No options",
    onChange: de,
    onClose: oe,
    onHighlightChange: he,
    onInputChange: z,
    onOpen: be,
    open: ye,
    openOnFocus: Pe = !1,
    openText: Te = "Open",
    options: Z,
    PaperComponent: $e,
    PopperComponent: Oe,
    popupIcon: Me = up || (up = /* @__PURE__ */ x.jsx(Sl, {})),
    readOnly: I = !1,
    renderGroup: J,
    renderInput: xe,
    renderOption: ke,
    renderTags: ee,
    selectOnFocus: ue = !r.freeSolo,
    size: te = "medium",
    slots: we = {},
    slotProps: Ce = {},
    value: ge,
    ...ve
  } = r, {
    getRootProps: Be,
    getInputProps: Ae,
    getInputLabelProps: Fe,
    getPopupIndicatorProps: Se,
    getClearProps: ne,
    getTagProps: Ee,
    getListboxProps: Ie,
    getOptionProps: Ve,
    value: Ke,
    dirty: St,
    expanded: He,
    id: tt,
    popupOpen: ht,
    focused: fo,
    focusedTag: It,
    anchorEl: Le,
    setAnchorEl: At,
    inputValue: On,
    groupedOptions: sn
  } = Gv({
    ...r,
    componentName: "Autocomplete"
  }), Xn = !S && !C && St && !I, Jn = (!v || N === !0) && N !== !1, {
    onMouseDown: ja
  } = Ae(), {
    ref: Ma,
    ...Aa
  } = Ie(), Zn = D || ((Xe) => Xe.label ?? Xe), jt = {
    ...r,
    disablePortal: E,
    expanded: He,
    focused: fo,
    fullWidth: R,
    getOptionLabel: Zn,
    hasClearIcon: Xn,
    hasPopupIcon: Jn,
    inputFocused: It === -1,
    popupOpen: ht,
    size: te
  }, Et = Ox(jt), bo = {
    slots: {
      paper: $e,
      popper: Oe,
      ...we
    },
    slotProps: {
      chip: c,
      listbox: X,
      ...d,
      ...Ce
    }
  }, [Xr, fe] = je("listbox", {
    elementType: Mx,
    externalForwardedProps: bo,
    ownerState: jt,
    className: Et.listbox,
    additionalProps: Aa,
    ref: Ma
  }), [se, Re] = je("paper", {
    elementType: Qt,
    externalForwardedProps: bo,
    ownerState: jt,
    className: Et.paper
  }), [De, We] = je("popper", {
    elementType: Gr,
    externalForwardedProps: bo,
    ownerState: jt,
    className: Et.popper,
    additionalProps: {
      disablePortal: E,
      style: {
        width: Le ? Le.clientWidth : null
      },
      role: "presentation",
      anchorEl: Le,
      open: ht
    }
  });
  let qe;
  if (ie && Ke.length > 0) {
    const Xe = (ho) => ({
      className: Et.tag,
      disabled: C,
      ...Ee(ho)
    });
    ee ? qe = ee(Ke, Xe, jt) : qe = Ke.map((ho, Wo) => {
      const {
        key: er,
        ...Af
      } = Xe({
        index: Wo
      });
      return /* @__PURE__ */ x.jsx(Rd, {
        label: Zn(ho),
        size: te,
        ...Af,
        ...bo.slotProps.chip
      }, er);
    });
  }
  if (me > -1 && Array.isArray(qe)) {
    const Xe = qe.length - me;
    !fo && Xe > 0 && (qe = qe.splice(0, me), qe.push(/* @__PURE__ */ x.jsx("span", {
      className: Et.tag,
      children: A(Xe)
    }, qe.length)));
  }
  const Bt = J || ((Xe) => /* @__PURE__ */ x.jsxs("li", {
    children: [/* @__PURE__ */ x.jsx(Ax, {
      className: Et.groupLabel,
      ownerState: jt,
      component: "div",
      children: Xe.group
    }), /* @__PURE__ */ x.jsx(Bx, {
      className: Et.groupUl,
      ownerState: jt,
      children: Xe.children
    })]
  }, Xe.key)), Mf = ke || ((Xe, ho) => {
    const {
      key: Wo,
      ...er
    } = Xe;
    return /* @__PURE__ */ x.jsx("li", {
      ...er,
      children: Zn(ho)
    }, Wo);
  }), zl = (Xe, ho) => {
    const Wo = Ve({
      option: Xe,
      index: ho
    });
    return Mf({
      ...Wo,
      className: Et.option
    }, Xe, {
      selected: Wo["aria-selected"],
      index: ho,
      inputValue: On
    }, jt);
  }, Jr = bo.slotProps.clearIndicator, Zr = bo.slotProps.popupIndicator;
  return /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ x.jsx(Ex, {
      ref: n,
      className: W(Et.root, p),
      ownerState: jt,
      ...Be(ve),
      children: xe({
        id: tt,
        disabled: C,
        fullWidth: !0,
        size: te === "small" ? "small" : void 0,
        InputLabelProps: Fe(),
        InputProps: {
          ref: At,
          className: Et.inputRoot,
          startAdornment: qe,
          onMouseDown: (Xe) => {
            Xe.target === Xe.currentTarget && ja(Xe);
          },
          ...(Xn || Jn) && {
            endAdornment: /* @__PURE__ */ x.jsxs(Rx, {
              className: Et.endAdornment,
              ownerState: jt,
              children: [Xn ? /* @__PURE__ */ x.jsx($x, {
                ...ne(),
                "aria-label": b,
                title: b,
                ownerState: jt,
                ...Jr,
                className: W(Et.clearIndicator, Jr == null ? void 0 : Jr.className),
                children: u
              }) : null, Jn ? /* @__PURE__ */ x.jsx(kx, {
                ...Se(),
                disabled: C,
                "aria-label": ht ? h : Te,
                title: ht ? h : Te,
                ownerState: jt,
                ...Zr,
                className: W(Et.popupIndicator, Zr == null ? void 0 : Zr.className),
                children: Me
              }) : null]
            })
          }
        },
        inputProps: {
          className: Et.input,
          disabled: C,
          readOnly: I,
          ...Ae()
        }
      })
    }), Le ? /* @__PURE__ */ x.jsx(Px, {
      as: De,
      ...We,
      children: /* @__PURE__ */ x.jsxs(Nx, {
        as: se,
        ...Re,
        children: [Y && sn.length === 0 ? /* @__PURE__ */ x.jsx(Ix, {
          className: Et.loading,
          ownerState: jt,
          children: q
        }) : null, sn.length === 0 && !v && !Y ? /* @__PURE__ */ x.jsx(jx, {
          className: Et.noOptions,
          ownerState: jt,
          role: "presentation",
          onMouseDown: (Xe) => {
            Xe.preventDefault();
          },
          children: K
        }) : null, sn.length > 0 ? /* @__PURE__ */ x.jsx(Xr, {
          as: G,
          ...fe,
          children: sn.map((Xe, ho) => _ ? Bt({
            key: Xe.key,
            group: Xe.group,
            children: Xe.options.map((Wo, er) => zl(Wo, Xe.index + er))
          }) : zl(Xe, ho))
        }) : null]
      })
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (Lx.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the portion of the selected suggestion that the user hasn't typed,
   * known as the completion string, appears inline after the input cursor in the textbox.
   * The inline completion string is visually highlighted and has a selected state.
   * @default false
   */
  autoComplete: t.bool,
  /**
   * If `true`, the first option is automatically highlighted.
   * @default false
   */
  autoHighlight: t.bool,
  /**
   * If `true`, the selected option becomes the value of the input
   * when the Autocomplete loses focus unless the user chooses
   * a different option or changes the character string in the input.
   *
   * When using the `freeSolo` mode, the typed value will be the input value
   * if the Autocomplete loses focus without highlighting an option.
   * @default false
   */
  autoSelect: t.bool,
  /**
   * Control if the input should be blurred when an option is selected:
   *
   * - `false` the input is not blurred.
   * - `true` the input is always blurred.
   * - `touch` the input is blurred after a touch event.
   * - `mouse` the input is blurred after a mouse event.
   * @default false
   */
  blurOnSelect: t.oneOfType([t.oneOf(["mouse", "touch"]), t.bool]),
  /**
   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.
   * @deprecated Use `slotProps.chip` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ChipProps: t.object,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display in place of the default clear icon.
   * @default <ClearIcon fontSize="small" />
   */
  clearIcon: t.node,
  /**
   * If `true`, the input's text is cleared on blur if no value is selected.
   *
   * Set it to `true` if you want to help the user enter a new value.
   * Set it to `false` if you want to help the user resume their search.
   * @default !props.freeSolo
   */
  clearOnBlur: t.bool,
  /**
   * If `true`, clear all values when the user presses escape and the popup is closed.
   * @default false
   */
  clearOnEscape: t.bool,
  /**
   * Override the default text for the *clear* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Clear'
   */
  clearText: t.string,
  /**
   * Override the default text for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: t.string,
  /**
   * The props used for each slot inside.
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  componentsProps: t.shape({
    clearIndicator: t.object,
    paper: t.object,
    popper: t.object,
    popupIndicator: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   * @default props.multiple ? [] : null
   */
  defaultValue: xt(t.any, (e) => e.multiple && e.defaultValue !== void 0 && !Array.isArray(e.defaultValue) ? new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${e.defaultValue} was provided.`].join(`
`)) : null),
  /**
   * If `true`, the input can't be cleared.
   * @default false
   */
  disableClearable: t.bool,
  /**
   * If `true`, the popup won't close when a value is selected.
   * @default false
   */
  disableCloseOnSelect: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: t.bool,
  /**
   * If `true`, the list box in the popup will not wrap focus.
   * @default false
   */
  disableListWrap: t.bool,
  /**
   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * A function that determines the filtered options to be rendered on search.
   *
   * @default createFilterOptions()
   * @param {Value[]} options The options to render.
   * @param {object} state The state of the component.
   * @returns {Value[]}
   */
  filterOptions: t.func,
  /**
   * If `true`, hide the selected options from the list box.
   * @default false
   */
  filterSelectedOptions: t.bool,
  /**
   * Force the visibility display of the popup icon.
   * @default 'auto'
   */
  forcePopupIcon: t.oneOfType([t.oneOf(["auto"]), t.bool]),
  /**
   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
   * @default false
   */
  freeSolo: t.bool,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The label to display when the tags are truncated (`limitTags`).
   *
   * @param {number} more The number of truncated tags.
   * @returns {ReactNode}
   * @default (more) => `+${more}`
   */
  getLimitTagsText: t.func,
  /**
   * Used to determine the disabled state for a given option.
   *
   * @param {Value} option The option to test.
   * @returns {boolean}
   */
  getOptionDisabled: t.func,
  /**
   * Used to determine the key for a given option.
   * This can be useful when the labels of options are not unique (since labels are used as keys by default).
   *
   * @param {Value} option The option to get the key for.
   * @returns {string | number}
   */
  getOptionKey: t.func,
  /**
   * Used to determine the string value for a given option.
   * It's used to fill the input (and the list box options if `renderOption` is not provided).
   *
   * If used in free solo mode, it must accept both the type of the options and a string.
   *
   * @param {Value} option
   * @returns {string}
   * @default (option) => option.label ?? option
   */
  getOptionLabel: t.func,
  /**
   * If provided, the options will be grouped under the returned string.
   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
   *
   * @param {Value} option The Autocomplete option.
   * @returns {string}
   */
  groupBy: t.func,
  /**
   * If `true`, the component handles the "Home" and "End" keys when the popup is open.
   * It should move focus to the first option and last option, respectively.
   * @default !props.freeSolo
   */
  handleHomeEndKeys: t.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide an id it will fall back to a randomly generated one.
   */
  id: t.string,
  /**
   * If `true`, the highlight can move to the input.
   * @default false
   */
  includeInputInList: t.bool,
  /**
   * The input value.
   */
  inputValue: t.string,
  /**
   * Used to determine if the option represents the given value.
   * Uses strict equality by default.
   * ⚠️ Both arguments need to be handled, an option can only match with one value.
   *
   * @param {Value} option The option to test.
   * @param {Value} value The value to test against.
   * @returns {boolean}
   */
  isOptionEqualToValue: t.func,
  /**
   * The maximum number of tags that will be visible when not focused.
   * Set `-1` to disable the limit.
   * @default -1
   */
  limitTags: mt,
  /**
   * The component used to render the listbox.
   * @default 'ul'
   * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ListboxComponent: t.elementType,
  /**
   * Props applied to the Listbox element.
   * @deprecated Use `slotProps.listbox` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ListboxProps: t.object,
  /**
   * If `true`, the component is in a loading state.
   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
   * @default false
   */
  loading: t.bool,
  /**
   * Text to display when in a loading state.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Loading…'
   */
  loadingText: t.node,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: t.bool,
  /**
   * Text to display when there are no options.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'No options'
   */
  noOptionsText: t.node,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value|Value[]} value The new value of the component.
   * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
   * @param {string} [details]
   */
  onChange: t.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
   */
  onClose: t.func,
  /**
   * Callback fired when the highlight option changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value} option The highlighted option.
   * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
   */
  onHighlightChange: t.func,
  /**
   * Callback fired when the input value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} value The new value of the text input.
   * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`, `"blur"`, `"selectOption"`, `"removeOption"`
   */
  onInputChange: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * If `true`, the popup will open on input focus.
   * @default false
   */
  openOnFocus: t.bool,
  /**
   * Override the default text for the *open popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Open'
   */
  openText: t.string,
  /**
   * A list of options that will be shown in the Autocomplete.
   */
  options: t.array.isRequired,
  /**
   * The component used to render the body of the popup.
   * @default Paper
   * @deprecated Use `slots.paper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PaperComponent: t.elementType,
  /**
   * The component used to position the popup.
   * @default Popper
   * @deprecated Use `slots.popper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PopperComponent: t.elementType,
  /**
   * The icon to display in place of the default popup icon.
   * @default <ArrowDropDownIcon />
   */
  popupIcon: t.node,
  /**
   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
   * @default false
   */
  readOnly: t.bool,
  /**
   * Render the group.
   *
   * @param {AutocompleteRenderGroupParams} params The group to render.
   * @returns {ReactNode}
   */
  renderGroup: t.func,
  /**
   * Render the input.
   *
   * @param {object} params
   * @returns {ReactNode}
   */
  renderInput: t.func.isRequired,
  /**
   * Render the option, use `getOptionLabel` by default.
   *
   * @param {object} props The props to apply on the li element.
   * @param {Value} option The option to render.
   * @param {object} state The state of each option.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderOption: t.func,
  /**
   * Render the selected value.
   *
   * @param {Value[]} value The `value` provided to the component.
   * @param {function} getTagProps A tag props getter.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderTags: t.func,
  /**
   * If `true`, the input's text is selected on focus.
   * It helps the user clear the selected value.
   * @default !props.freeSolo
   */
  selectOnFocus: t.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium"]), t.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    chip: t.oneOfType([t.func, t.object]),
    clearIndicator: t.oneOfType([t.func, t.object]),
    listbox: t.oneOfType([t.func, t.object]),
    paper: t.oneOfType([t.func, t.object]),
    popper: t.oneOfType([t.func, t.object]),
    popupIndicator: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    listbox: t.elementType,
    paper: t.elementType,
    popper: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the autocomplete.
   *
   * The value must have reference equality with the option in order to be selected.
   * You can customize the equality behavior with the `isOptionEqualToValue` prop.
   */
  value: xt(t.any, (e) => e.multiple && e.value !== void 0 && !Array.isArray(e.value) ? new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${e.value} was provided.`].join(`
`)) : null)
});
const Dx = at(/* @__PURE__ */ x.jsx("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");
function zx(e) {
  return ae("MuiAvatar", e);
}
const Fx = le("MuiAvatar", ["root", "colorDefault", "circular", "rounded", "square", "img", "fallback"]), Vx = (e) => {
  const {
    classes: o,
    variant: n,
    colorDefault: r
  } = e;
  return ce({
    root: ["root", n, r && "colorDefault"],
    img: ["img"],
    fallback: ["fallback"]
  }, zx, o);
}, _x = M("div", {
  name: "MuiAvatar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], n.colorDefault && o.colorDefault];
  }
})(Q(({
  theme: e
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0,
  width: 40,
  height: 40,
  fontFamily: e.typography.fontFamily,
  fontSize: e.typography.pxToRem(20),
  lineHeight: 1,
  borderRadius: "50%",
  overflow: "hidden",
  userSelect: "none",
  variants: [{
    props: {
      variant: "rounded"
    },
    style: {
      borderRadius: (e.vars || e).shape.borderRadius
    }
  }, {
    props: {
      variant: "square"
    },
    style: {
      borderRadius: 0
    }
  }, {
    props: {
      colorDefault: !0
    },
    style: {
      color: (e.vars || e).palette.background.default,
      ...e.vars ? {
        backgroundColor: e.vars.palette.Avatar.defaultBg
      } : {
        backgroundColor: e.palette.grey[400],
        ...e.applyStyles("dark", {
          backgroundColor: e.palette.grey[600]
        })
      }
    }
  }]
}))), Wx = M("img", {
  name: "MuiAvatar",
  slot: "Img",
  overridesResolver: (e, o) => o.img
})({
  width: "100%",
  height: "100%",
  textAlign: "center",
  // Handle non-square image.
  objectFit: "cover",
  // Hide alt text.
  color: "transparent",
  // Hide the image broken icon, only works on Chrome.
  textIndent: 1e4
}), Ux = M(Dx, {
  name: "MuiAvatar",
  slot: "Fallback",
  overridesResolver: (e, o) => o.fallback
})({
  width: "75%",
  height: "75%"
});
function Hx({
  crossOrigin: e,
  referrerPolicy: o,
  src: n,
  srcSet: r
}) {
  const [s, a] = m.useState(!1);
  return m.useEffect(() => {
    if (!n && !r)
      return;
    a(!1);
    let i = !0;
    const l = new Image();
    return l.onload = () => {
      i && a("loaded");
    }, l.onerror = () => {
      i && a("error");
    }, l.crossOrigin = e, l.referrerPolicy = o, l.src = n, r && (l.srcset = r), () => {
      i = !1;
    };
  }, [e, o, n, r]), s;
}
const kd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAvatar"
  }), {
    alt: s,
    children: a,
    className: i,
    component: l = "div",
    slots: c = {},
    slotProps: p = {},
    imgProps: u,
    sizes: f,
    src: g,
    srcSet: b,
    variant: h = "circular",
    ...d
  } = r;
  let y = null;
  const S = {
    ...r,
    component: l,
    variant: h
  }, O = Hx({
    ...u,
    ...typeof p.img == "function" ? p.img(S) : p.img,
    src: g,
    srcSet: b
  }), C = g || b, T = C && O !== "error";
  S.colorDefault = !T, delete S.ownerState;
  const w = Vx(S), [E, $] = je("img", {
    className: w.img,
    elementType: Wx,
    externalForwardedProps: {
      slots: c,
      slotProps: {
        img: {
          ...u,
          ...p.img
        }
      }
    },
    additionalProps: {
      alt: s,
      src: g,
      srcSet: b,
      sizes: f
    },
    ownerState: S
  });
  return T ? y = /* @__PURE__ */ x.jsx(E, {
    ...$
  }) : a || a === 0 ? y = a : C && s ? y = s[0] : y = /* @__PURE__ */ x.jsx(Ux, {
    ownerState: S,
    className: w.fallback
  }), /* @__PURE__ */ x.jsx(_x, {
    as: l,
    className: W(w.root, i),
    ref: n,
    ...d,
    ownerState: S,
    children: y
  });
});
process.env.NODE_ENV !== "production" && (kd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used in combination with `src` or `srcSet` to
   * provide an alt attribute for the rendered `img` element.
   */
  alt: t.string,
  /**
   * Used to render icon or text elements inside the Avatar if `src` is not set.
   * This can be an element, or just a string.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
   * It can be used to listen for the loading error event.
   * @deprecated Use `slotProps.img` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  imgProps: t.object,
  /**
   * The `sizes` attribute for the `img` element.
   */
  sizes: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    img: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    img: t.elementType
  }),
  /**
   * The `src` attribute for the `img` element.
   */
  src: t.string,
  /**
   * The `srcSet` attribute for the `img` element.
   * Use this attribute for responsive image display.
   */
  srcSet: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The shape of the avatar.
   * @default 'circular'
   */
  variant: t.oneOfType([t.oneOf(["circular", "rounded", "square"]), t.string])
});
function Gx(e) {
  return ae("MuiAvatarGroup", e);
}
const qx = le("MuiAvatarGroup", ["root", "avatar"]), dp = {
  small: -16,
  medium: -8
}, Yx = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    avatar: ["avatar"]
  }, Gx, o);
}, Kx = M("div", {
  name: "MuiAvatarGroup",
  slot: "Root",
  overridesResolver: (e, o) => [{
    [`& .${qx.avatar}`]: o.avatar
  }, o.root]
})(Q(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "row-reverse",
  [`& .${Fx.root}`]: {
    border: `2px solid ${(e.vars || e).palette.background.default}`,
    boxSizing: "content-box",
    marginLeft: "var(--AvatarGroup-spacing, -8px)",
    "&:last-child": {
      marginLeft: 0
    }
  }
}))), Xx = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiAvatarGroup"
  }), {
    children: s,
    className: a,
    component: i = "div",
    componentsProps: l,
    max: c = 5,
    renderSurplus: p,
    slotProps: u = {},
    slots: f = {},
    spacing: g = "medium",
    total: b,
    variant: h = "circular",
    ...d
  } = r;
  let y = c < 2 ? 2 : c;
  const S = {
    ...r,
    max: c,
    spacing: g,
    component: i,
    variant: h
  }, O = Yx(S), C = m.Children.toArray(s).filter((A) => (process.env.NODE_ENV !== "production" && Ft.isFragment(A) && console.error(["MUI: The AvatarGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ m.isValidElement(A))), T = b || C.length;
  T === y && (y += 1), y = Math.min(T + 1, y);
  const w = Math.min(C.length, y - 1), E = Math.max(T - y, T - w, 0), $ = p ? p(E) : `+${E}`, P = S.spacing && dp[S.spacing] !== void 0 ? dp[S.spacing] : -S.spacing || -8, N = {
    slots: f,
    slotProps: {
      surplus: u.additionalAvatar ?? (l == null ? void 0 : l.additionalAvatar),
      ...l,
      ...u
    }
  }, [v, R] = je("surplus", {
    elementType: kd,
    externalForwardedProps: N,
    className: O.avatar,
    ownerState: S,
    additionalProps: {
      variant: h
    }
  });
  return /* @__PURE__ */ x.jsxs(Kx, {
    as: i,
    ownerState: S,
    className: W(O.root, a),
    ref: n,
    ...d,
    style: {
      "--AvatarGroup-spacing": P ? `${P}px` : void 0,
      ...d.style
    },
    children: [E ? /* @__PURE__ */ x.jsx(v, {
      ...R,
      children: $
    }) : null, C.slice(0, w).reverse().map((A) => /* @__PURE__ */ m.cloneElement(A, {
      className: W(A.props.className, O.avatar),
      variant: A.props.variant || h
    }))]
  });
});
process.env.NODE_ENV !== "production" && (Xx.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The avatars to stack.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  componentsProps: t.shape({
    additionalAvatar: t.object
  }),
  /**
   * Max avatars to show before +x.
   * @default 5
   */
  max: xt(t.number, (e) => e.max < 2 ? new Error(["MUI: The prop `max` should be equal to 2 or above.", "A value below is clamped to 2."].join(`
`)) : null),
  /**
   * custom renderer of extraAvatars
   * @param {number} surplus number of extra avatars
   * @returns {React.ReactNode} custom element to display
   */
  renderSurplus: t.func,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    additionalAvatar: t.object,
    surplus: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    surplus: t.elementType
  }),
  /**
   * Spacing between avatars.
   * @default 'medium'
   */
  spacing: t.oneOfType([t.oneOf(["medium", "small"]), t.number]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The total number of avatars. Used for calculating the number of extra avatars.
   * @default children.length
   */
  total: t.number,
  /**
   * The variant to use.
   * @default 'circular'
   */
  variant: t.oneOfType([t.oneOf(["circular", "rounded", "square"]), t.string])
});
const Jx = {
  entering: {
    opacity: 1
  },
  entered: {
    opacity: 1
  }
}, Ks = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = Ot(), s = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: a,
    appear: i = !0,
    children: l,
    easing: c,
    in: p,
    onEnter: u,
    onEntered: f,
    onEntering: g,
    onExit: b,
    onExited: h,
    onExiting: d,
    style: y,
    timeout: S = s,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: O = Zt,
    ...C
  } = o, T = m.useRef(null), w = Ye(T, Vo(l), n), E = (k) => (D) => {
    if (k) {
      const B = T.current;
      D === void 0 ? k(B) : k(B, D);
    }
  }, $ = E(g), P = E((k, D) => {
    Sa(k);
    const B = mo({
      style: y,
      timeout: S,
      easing: c
    }, {
      mode: "enter"
    });
    k.style.webkitTransition = r.transitions.create("opacity", B), k.style.transition = r.transitions.create("opacity", B), u && u(k, D);
  }), N = E(f), v = E(d), R = E((k) => {
    const D = mo({
      style: y,
      timeout: S,
      easing: c
    }, {
      mode: "exit"
    });
    k.style.webkitTransition = r.transitions.create("opacity", D), k.style.transition = r.transitions.create("opacity", D), b && b(k);
  }), A = E(h), j = (k) => {
    a && a(T.current, k);
  };
  return /* @__PURE__ */ x.jsx(O, {
    appear: i,
    in: p,
    nodeRef: T,
    onEnter: P,
    onEntered: N,
    onEntering: $,
    onExit: R,
    onExited: A,
    onExiting: v,
    addEndListener: j,
    timeout: S,
    ...C,
    children: (k, {
      ownerState: D,
      ...B
    }) => /* @__PURE__ */ m.cloneElement(l, {
      style: {
        opacity: 0,
        visibility: k === "exited" && !p ? "hidden" : void 0,
        ...Jx[k],
        ...y,
        ...l.props.style
      },
      ref: w,
      ...B
    })
  });
});
process.env.NODE_ENV !== "production" && (Ks.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: Fo.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
function Zx(e) {
  return ae("MuiBackdrop", e);
}
const AP = le("MuiBackdrop", ["root", "invisible"]), Qx = (e) => {
  const {
    classes: o,
    invisible: n
  } = e;
  return ce({
    root: ["root", n && "invisible"]
  }, Zx, o);
}, eS = M("div", {
  name: "MuiBackdrop",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.invisible && o.invisible];
  }
})({
  position: "fixed",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)",
  WebkitTapHighlightColor: "transparent",
  variants: [{
    props: {
      invisible: !0
    },
    style: {
      backgroundColor: "transparent"
    }
  }]
}), Tl = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiBackdrop"
  }), {
    children: s,
    className: a,
    component: i = "div",
    invisible: l = !1,
    open: c,
    components: p = {},
    componentsProps: u = {},
    slotProps: f = {},
    slots: g = {},
    TransitionComponent: b,
    transitionDuration: h,
    ...d
  } = r, y = {
    ...r,
    component: i,
    invisible: l
  }, S = Qx(y), O = {
    transition: b,
    root: p.Root,
    ...g
  }, C = {
    ...u,
    ...f
  }, T = {
    slots: O,
    slotProps: C
  }, [w, E] = je("root", {
    elementType: eS,
    externalForwardedProps: T,
    className: W(S.root, a),
    ownerState: y
  }), [$, P] = je("transition", {
    elementType: Ks,
    externalForwardedProps: T,
    ownerState: y
  });
  return /* @__PURE__ */ x.jsx($, {
    in: c,
    timeout: h,
    ...d,
    ...P,
    children: /* @__PURE__ */ x.jsx(w, {
      "aria-hidden": !0,
      ...E,
      classes: S,
      ref: n,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (Tl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    root: t.object
  }),
  /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */
  invisible: t.bool,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    root: t.oneOfType([t.func, t.object]),
    transition: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    root: t.elementType,
    transition: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   * @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
function tS(e) {
  const {
    badgeContent: o,
    invisible: n = !1,
    max: r = 99,
    showZero: s = !1
  } = e, a = nl({
    badgeContent: o,
    max: r
  });
  let i = n;
  n === !1 && o === 0 && !s && (i = !0);
  const {
    badgeContent: l,
    max: c = r
  } = i ? a : e, p = l && Number(l) > c ? `${c}+` : l;
  return {
    badgeContent: l,
    invisible: i,
    max: c,
    displayValue: p
  };
}
function oS(e) {
  return ae("MuiBadge", e);
}
const Ho = le("MuiBadge", [
  "root",
  "badge",
  "dot",
  "standard",
  "anchorOriginTopRight",
  "anchorOriginBottomRight",
  "anchorOriginTopLeft",
  "anchorOriginBottomLeft",
  "invisible",
  "colorError",
  "colorInfo",
  "colorPrimary",
  "colorSecondary",
  "colorSuccess",
  "colorWarning",
  "overlapRectangular",
  "overlapCircular",
  // TODO: v6 remove the overlap value from these class keys
  "anchorOriginTopLeftCircular",
  "anchorOriginTopLeftRectangular",
  "anchorOriginTopRightCircular",
  "anchorOriginTopRightRectangular",
  "anchorOriginBottomLeftCircular",
  "anchorOriginBottomLeftRectangular",
  "anchorOriginBottomRightCircular",
  "anchorOriginBottomRightRectangular"
]), Ka = 10, Xa = 4, nS = (e) => {
  const {
    color: o,
    anchorOrigin: n,
    invisible: r,
    overlap: s,
    variant: a,
    classes: i = {}
  } = e, l = {
    root: ["root"],
    badge: ["badge", a, r && "invisible", `anchorOrigin${L(n.vertical)}${L(n.horizontal)}`, `anchorOrigin${L(n.vertical)}${L(n.horizontal)}${L(s)}`, `overlap${L(s)}`, o !== "default" && `color${L(o)}`]
  };
  return ce(l, oS, i);
}, rS = M("span", {
  name: "MuiBadge",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  position: "relative",
  display: "inline-flex",
  // For correct alignment with the text.
  verticalAlign: "middle",
  flexShrink: 0
}), sS = M("span", {
  name: "MuiBadge",
  slot: "Badge",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.badge, o[n.variant], o[`anchorOrigin${L(n.anchorOrigin.vertical)}${L(n.anchorOrigin.horizontal)}${L(n.overlap)}`], n.color !== "default" && o[`color${L(n.color)}`], n.invisible && o.invisible];
  }
})(Q(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "row",
  flexWrap: "wrap",
  justifyContent: "center",
  alignContent: "center",
  alignItems: "center",
  position: "absolute",
  boxSizing: "border-box",
  fontFamily: e.typography.fontFamily,
  fontWeight: e.typography.fontWeightMedium,
  fontSize: e.typography.pxToRem(12),
  minWidth: Ka * 2,
  lineHeight: 1,
  padding: "0 6px",
  height: Ka * 2,
  borderRadius: Ka,
  zIndex: 1,
  // Render the badge on top of potential ripples.
  transition: e.transitions.create("transform", {
    easing: e.transitions.easing.easeInOut,
    duration: e.transitions.duration.enteringScreen
  }),
  variants: [...Object.entries(e.palette).filter(Ue(["contrastText"])).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      backgroundColor: (e.vars || e).palette[o].main,
      color: (e.vars || e).palette[o].contrastText
    }
  })), {
    props: {
      variant: "dot"
    },
    style: {
      borderRadius: Xa,
      height: Xa * 2,
      minWidth: Xa * 2,
      padding: 0
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "top" && o.anchorOrigin.horizontal === "right" && o.overlap === "rectangular",
    style: {
      top: 0,
      right: 0,
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "bottom" && o.anchorOrigin.horizontal === "right" && o.overlap === "rectangular",
    style: {
      bottom: 0,
      right: 0,
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(50%, 50%)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "top" && o.anchorOrigin.horizontal === "left" && o.overlap === "rectangular",
    style: {
      top: 0,
      left: 0,
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(-50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "bottom" && o.anchorOrigin.horizontal === "left" && o.overlap === "rectangular",
    style: {
      bottom: 0,
      left: 0,
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(-50%, 50%)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "top" && o.anchorOrigin.horizontal === "right" && o.overlap === "circular",
    style: {
      top: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "bottom" && o.anchorOrigin.horizontal === "right" && o.overlap === "circular",
    style: {
      bottom: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(50%, 50%)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "top" && o.anchorOrigin.horizontal === "left" && o.overlap === "circular",
    style: {
      top: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(-50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "bottom" && o.anchorOrigin.horizontal === "left" && o.overlap === "circular",
    style: {
      bottom: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      [`&.${Ho.invisible}`]: {
        transform: "scale(0) translate(-50%, 50%)"
      }
    }
  }, {
    props: {
      invisible: !0
    },
    style: {
      transition: e.transitions.create("transform", {
        easing: e.transitions.easing.easeInOut,
        duration: e.transitions.duration.leavingScreen
      })
    }
  }]
})));
function fp(e) {
  return {
    vertical: (e == null ? void 0 : e.vertical) ?? "top",
    horizontal: (e == null ? void 0 : e.horizontal) ?? "right"
  };
}
const aS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiBadge"
  }), {
    anchorOrigin: s,
    className: a,
    classes: i,
    component: l,
    components: c = {},
    componentsProps: p = {},
    children: u,
    overlap: f = "rectangular",
    color: g = "default",
    invisible: b = !1,
    max: h = 99,
    badgeContent: d,
    slots: y,
    slotProps: S,
    showZero: O = !1,
    variant: C = "standard",
    ...T
  } = r, {
    badgeContent: w,
    invisible: E,
    max: $,
    displayValue: P
  } = tS({
    max: h,
    invisible: b,
    badgeContent: d,
    showZero: O
  }), N = nl({
    anchorOrigin: fp(s),
    color: g,
    overlap: f,
    variant: C,
    badgeContent: d
  }), v = E || w == null && C !== "dot", {
    color: R = g,
    overlap: A = f,
    anchorOrigin: j,
    variant: k = C
  } = v ? N : r, D = fp(j), B = k !== "dot" ? P : void 0, _ = {
    ...r,
    badgeContent: w,
    invisible: v,
    max: $,
    displayValue: B,
    showZero: O,
    anchorOrigin: D,
    color: R,
    overlap: A,
    variant: k
  }, H = nS(_), U = (y == null ? void 0 : y.root) ?? c.Root ?? rS, F = (y == null ? void 0 : y.badge) ?? c.Badge ?? sS, V = (S == null ? void 0 : S.root) ?? p.root, me = (S == null ? void 0 : S.badge) ?? p.badge, G = Tt({
    elementType: U,
    externalSlotProps: V,
    externalForwardedProps: T,
    additionalProps: {
      ref: n,
      as: l
    },
    ownerState: _,
    className: W(V == null ? void 0 : V.className, H.root, a)
  }), X = Tt({
    elementType: F,
    externalSlotProps: me,
    ownerState: _,
    className: W(H.badge, me == null ? void 0 : me.className)
  });
  return /* @__PURE__ */ x.jsxs(U, {
    ...G,
    children: [u, /* @__PURE__ */ x.jsx(F, {
      ...X,
      children: B
    })]
  });
});
process.env.NODE_ENV !== "production" && (aS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */
  anchorOrigin: t.shape({
    horizontal: t.oneOf(["left", "right"]),
    vertical: t.oneOf(["bottom", "top"])
  }),
  /**
   * The content rendered within the badge.
   */
  badgeContent: t.node,
  /**
   * The badge will be added relative to this node.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Badge: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    badge: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: t.bool,
  /**
   * Max count to show.
   * @default 99
   */
  max: t.number,
  /**
   * Wrapped shape the badge should overlap.
   * @default 'rectangular'
   */
  overlap: t.oneOf(["circular", "rectangular"]),
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: t.bool,
  /**
   * The props used for each slot inside the Badge.
   * @default {}
   */
  slotProps: t.shape({
    badge: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Badge.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    badge: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: t.oneOfType([t.oneOf(["dot", "standard"]), t.string])
});
function iS(e) {
  return ae("MuiBottomNavigation", e);
}
const BP = le("MuiBottomNavigation", ["root"]), lS = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, iS, o);
}, cS = M("div", {
  name: "MuiBottomNavigation",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => ({
  display: "flex",
  justifyContent: "center",
  height: 56,
  backgroundColor: (e.vars || e).palette.background.paper
}))), pS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiBottomNavigation"
  }), {
    children: s,
    className: a,
    component: i = "div",
    onChange: l,
    showLabels: c = !1,
    value: p,
    ...u
  } = r, f = {
    ...r,
    component: i,
    showLabels: c
  }, g = lS(f);
  return /* @__PURE__ */ x.jsx(cS, {
    as: i,
    className: W(g.root, a),
    ref: n,
    ownerState: f,
    ...u,
    children: m.Children.map(s, (b, h) => {
      if (!/* @__PURE__ */ m.isValidElement(b))
        return null;
      process.env.NODE_ENV !== "production" && Ft.isFragment(b) && console.error(["MUI: The BottomNavigation component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`));
      const d = b.props.value === void 0 ? h : b.props.value;
      return /* @__PURE__ */ m.cloneElement(b, {
        selected: d === p,
        showLabel: b.props.showLabel !== void 0 ? b.props.showLabel : c,
        value: d,
        onChange: l
      });
    })
  });
});
process.env.NODE_ENV !== "production" && (pS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {any} value We default to the index of the child.
   */
  onChange: t.func,
  /**
   * If `true`, all `BottomNavigationAction`s will show their labels.
   * By default, only the selected `BottomNavigationAction` will show its label.
   * @default false
   */
  showLabels: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the currently selected `BottomNavigationAction`.
   */
  value: t.any
});
function uS(e) {
  return ae("MuiBottomNavigationAction", e);
}
const Pd = le("MuiBottomNavigationAction", ["root", "iconOnly", "selected", "label"]), dS = (e) => {
  const {
    classes: o,
    showLabel: n,
    selected: r
  } = e;
  return ce({
    root: ["root", !n && !r && "iconOnly", r && "selected"],
    label: ["label", !n && !r && "iconOnly", r && "selected"]
  }, uS, o);
}, fS = M(wt, {
  name: "MuiBottomNavigationAction",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.showLabel && !n.selected && o.iconOnly];
  }
})(Q(({
  theme: e
}) => ({
  transition: e.transitions.create(["color", "padding-top"], {
    duration: e.transitions.duration.short
  }),
  padding: "0px 12px",
  minWidth: 80,
  maxWidth: 168,
  color: (e.vars || e).palette.text.secondary,
  flexDirection: "column",
  flex: "1",
  [`&.${Pd.selected}`]: {
    color: (e.vars || e).palette.primary.main
  },
  variants: [{
    props: ({
      showLabel: o,
      selected: n
    }) => !o && !n,
    style: {
      paddingTop: 14
    }
  }, {
    props: ({
      showLabel: o,
      selected: n,
      label: r
    }) => !o && !n && !r,
    style: {
      paddingTop: 0
    }
  }]
}))), mS = M("span", {
  name: "MuiBottomNavigationAction",
  slot: "Label",
  overridesResolver: (e, o) => o.label
})(Q(({
  theme: e
}) => ({
  fontFamily: e.typography.fontFamily,
  fontSize: e.typography.pxToRem(12),
  opacity: 1,
  transition: "font-size 0.2s, opacity 0.2s",
  transitionDelay: "0.1s",
  [`&.${Pd.selected}`]: {
    fontSize: e.typography.pxToRem(14)
  },
  variants: [{
    props: ({
      showLabel: o,
      selected: n
    }) => !o && !n,
    style: {
      opacity: 0,
      transitionDelay: "0s"
    }
  }]
}))), gS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiBottomNavigationAction"
  }), {
    className: s,
    icon: a,
    label: i,
    onChange: l,
    onClick: c,
    // eslint-disable-next-line react/prop-types -- private, always overridden by BottomNavigation
    selected: p,
    showLabel: u,
    value: f,
    ...g
  } = r, b = r, h = dS(b), d = (y) => {
    l && l(y, f), c && c(y);
  };
  return /* @__PURE__ */ x.jsxs(fS, {
    ref: n,
    className: W(h.root, s),
    focusRipple: !0,
    onClick: d,
    ownerState: b,
    ...g,
    children: [a, /* @__PURE__ */ x.jsx(mS, {
      className: h.label,
      ownerState: b,
      children: i
    })]
  });
});
process.env.NODE_ENV !== "production" && (gS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: ol,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display.
   */
  icon: t.node,
  /**
   * The label element.
   */
  label: t.node,
  /**
   * @ignore
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * If `true`, the `BottomNavigationAction` will show its label.
   * By default, only the selected `BottomNavigationAction`
   * inside `BottomNavigation` will show its label.
   *
   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.
   */
  showLabel: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * You can provide your own value. Otherwise, we fallback to the child position index.
   */
  value: t.any
});
const bS = le("MuiBox", ["root"]), hS = va(), yS = fb({
  themeId: so,
  defaultTheme: hS,
  defaultClassName: bS.root,
  generateClassName: Zi.generate
});
process.env.NODE_ENV !== "production" && (yS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const vS = at(/* @__PURE__ */ x.jsx("path", {
  d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "MoreHoriz"), xS = M(wt)(Q(({
  theme: e
}) => ({
  display: "flex",
  marginLeft: `calc(${e.spacing(1)} * 0.5)`,
  marginRight: `calc(${e.spacing(1)} * 0.5)`,
  ...e.palette.mode === "light" ? {
    backgroundColor: e.palette.grey[100],
    color: e.palette.grey[700]
  } : {
    backgroundColor: e.palette.grey[700],
    color: e.palette.grey[100]
  },
  borderRadius: 2,
  "&:hover, &:focus": {
    ...e.palette.mode === "light" ? {
      backgroundColor: e.palette.grey[200]
    } : {
      backgroundColor: e.palette.grey[600]
    }
  },
  "&:active": {
    boxShadow: e.shadows[0],
    ...e.palette.mode === "light" ? {
      backgroundColor: kr(e.palette.grey[200], 0.12)
    } : {
      backgroundColor: kr(e.palette.grey[600], 0.12)
    }
  }
}))), SS = M(vS)({
  width: 24,
  height: 16
});
function Nd(e) {
  const {
    slots: o = {},
    slotProps: n = {},
    ...r
  } = e, s = e;
  return /* @__PURE__ */ x.jsx("li", {
    children: /* @__PURE__ */ x.jsx(xS, {
      focusRipple: !0,
      ...r,
      ownerState: s,
      children: /* @__PURE__ */ x.jsx(SS, {
        as: o.CollapsedIcon,
        ownerState: s,
        ...n.collapsedIcon
      })
    })
  });
}
process.env.NODE_ENV !== "production" && (Nd.propTypes = {
  /**
   * The props used for the CollapsedIcon slot.
   * @default {}
   */
  slotProps: t.shape({
    collapsedIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the BreadcumbCollapsed.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    CollapsedIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.object
});
function TS(e) {
  return ae("MuiBreadcrumbs", e);
}
const CS = le("MuiBreadcrumbs", ["root", "ol", "li", "separator"]), wS = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    li: ["li"],
    ol: ["ol"],
    separator: ["separator"]
  }, TS, o);
}, OS = M(kt, {
  name: "MuiBreadcrumbs",
  slot: "Root",
  overridesResolver: (e, o) => [{
    [`& .${CS.li}`]: o.li
  }, o.root]
})({}), ES = M("ol", {
  name: "MuiBreadcrumbs",
  slot: "Ol",
  overridesResolver: (e, o) => o.ol
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  padding: 0,
  margin: 0,
  listStyle: "none"
}), RS = M("li", {
  name: "MuiBreadcrumbs",
  slot: "Separator",
  overridesResolver: (e, o) => o.separator
})({
  display: "flex",
  userSelect: "none",
  marginLeft: 8,
  marginRight: 8
});
function $S(e, o, n, r) {
  return e.reduce((s, a, i) => (i < e.length - 1 ? s = s.concat(a, /* @__PURE__ */ x.jsx(RS, {
    "aria-hidden": !0,
    className: o,
    ownerState: r,
    children: n
  }, `separator-${i}`)) : s.push(a), s), []);
}
const kS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiBreadcrumbs"
  }), {
    children: s,
    className: a,
    component: i = "nav",
    slots: l = {},
    slotProps: c = {},
    expandText: p = "Show path",
    itemsAfterCollapse: u = 1,
    itemsBeforeCollapse: f = 1,
    maxItems: g = 8,
    separator: b = "/",
    ...h
  } = r, [d, y] = m.useState(!1), S = {
    ...r,
    component: i,
    expanded: d,
    expandText: p,
    itemsAfterCollapse: u,
    itemsBeforeCollapse: f,
    maxItems: g,
    separator: b
  }, O = wS(S), C = Tt({
    elementType: l.CollapsedIcon,
    externalSlotProps: c.collapsedIcon,
    ownerState: S
  }), T = m.useRef(null), w = ($) => {
    const P = () => {
      y(!0);
      const N = T.current.querySelector("a[href],button,[tabindex]");
      N && N.focus();
    };
    return f + u >= $.length ? (process.env.NODE_ENV !== "production" && console.error(["MUI: You have provided an invalid combination of props to the Breadcrumbs.", `itemsAfterCollapse={${u}} + itemsBeforeCollapse={${f}} >= maxItems={${g}}`].join(`
`)), $) : [...$.slice(0, f), /* @__PURE__ */ x.jsx(Nd, {
      "aria-label": p,
      slots: {
        CollapsedIcon: l.CollapsedIcon
      },
      slotProps: {
        collapsedIcon: C
      },
      onClick: P
    }, "ellipsis"), ...$.slice($.length - u, $.length)];
  }, E = m.Children.toArray(s).filter(($) => (process.env.NODE_ENV !== "production" && Ft.isFragment($) && console.error(["MUI: The Breadcrumbs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ m.isValidElement($))).map(($, P) => /* @__PURE__ */ x.jsx("li", {
    className: O.li,
    children: $
  }, `child-${P}`));
  return /* @__PURE__ */ x.jsx(OS, {
    ref: n,
    component: i,
    color: "textSecondary",
    className: W(O.root, a),
    ownerState: S,
    ...h,
    children: /* @__PURE__ */ x.jsx(ES, {
      className: O.ol,
      ref: T,
      ownerState: S,
      children: $S(d || g && E.length <= g ? E : w(E), O.separator, b, S)
    })
  });
});
process.env.NODE_ENV !== "production" && (kS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Override the default label for the expand button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Show path'
   */
  expandText: t.string,
  /**
   * If max items is exceeded, the number of items to show after the ellipsis.
   * @default 1
   */
  itemsAfterCollapse: mt,
  /**
   * If max items is exceeded, the number of items to show before the ellipsis.
   * @default 1
   */
  itemsBeforeCollapse: mt,
  /**
   * Specifies the maximum number of breadcrumbs to display. When there are more
   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
   * will be shown, with an ellipsis in between.
   * @default 8
   */
  maxItems: mt,
  /**
   * Custom separator node.
   * @default '/'
   */
  separator: t.node,
  /**
   * The props used for each slot inside the Breadcumb.
   * @default {}
   */
  slotProps: t.shape({
    collapsedIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Breadcumb.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    CollapsedIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function PS(e) {
  return ae("MuiButton", e);
}
const an = le("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorSuccess", "colorError", "colorInfo", "colorWarning", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "icon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge", "loading", "loadingWrapper", "loadingIconPlaceholder", "loadingIndicator", "loadingPositionCenter", "loadingPositionStart", "loadingPositionEnd"]), Cl = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (Cl.displayName = "ButtonGroupContext");
const wl = /* @__PURE__ */ m.createContext(void 0);
process.env.NODE_ENV !== "production" && (wl.displayName = "ButtonGroupButtonContext");
const NS = (e) => {
  const {
    color: o,
    disableElevation: n,
    fullWidth: r,
    size: s,
    variant: a,
    loading: i,
    loadingPosition: l,
    classes: c
  } = e, p = {
    root: ["root", i && "loading", a, `${a}${L(o)}`, `size${L(s)}`, `${a}Size${L(s)}`, `color${L(o)}`, n && "disableElevation", r && "fullWidth", i && `loadingPosition${L(l)}`],
    startIcon: ["icon", "startIcon", `iconSize${L(s)}`],
    endIcon: ["icon", "endIcon", `iconSize${L(s)}`],
    loadingIndicator: ["loadingIndicator"],
    loadingWrapper: ["loadingWrapper"]
  }, u = ce(p, PS, c);
  return {
    ...c,
    // forward the focused, disabled, etc. classes to the ButtonBase
    ...u
  };
}, Id = [{
  props: {
    size: "small"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }
}, {
  props: {
    size: "medium"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }
}, {
  props: {
    size: "large"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  }
}], IS = M(wt, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`${n.variant}${L(n.color)}`], o[`size${L(n.size)}`], o[`${n.variant}Size${L(n.size)}`], n.color === "inherit" && o.colorInherit, n.disableElevation && o.disableElevation, n.fullWidth && o.fullWidth, n.loading && o.loading];
  }
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? e.palette.grey[300] : e.palette.grey[800], n = e.palette.mode === "light" ? e.palette.grey.A100 : e.palette.grey[700];
  return {
    ...e.typography.button,
    minWidth: 64,
    padding: "6px 16px",
    border: 0,
    borderRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
      duration: e.transitions.duration.short
    }),
    "&:hover": {
      textDecoration: "none"
    },
    [`&.${an.disabled}`]: {
      color: (e.vars || e).palette.action.disabled
    },
    variants: [{
      props: {
        variant: "contained"
      },
      style: {
        color: "var(--variant-containedColor)",
        backgroundColor: "var(--variant-containedBg)",
        boxShadow: (e.vars || e).shadows[2],
        "&:hover": {
          boxShadow: (e.vars || e).shadows[4],
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            boxShadow: (e.vars || e).shadows[2]
          }
        },
        "&:active": {
          boxShadow: (e.vars || e).shadows[8]
        },
        [`&.${an.focusVisible}`]: {
          boxShadow: (e.vars || e).shadows[6]
        },
        [`&.${an.disabled}`]: {
          color: (e.vars || e).palette.action.disabled,
          boxShadow: (e.vars || e).shadows[0],
          backgroundColor: (e.vars || e).palette.action.disabledBackground
        }
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        padding: "5px 15px",
        border: "1px solid currentColor",
        borderColor: "var(--variant-outlinedBorder, currentColor)",
        backgroundColor: "var(--variant-outlinedBg)",
        color: "var(--variant-outlinedColor)",
        [`&.${an.disabled}`]: {
          border: `1px solid ${(e.vars || e).palette.action.disabledBackground}`
        }
      }
    }, {
      props: {
        variant: "text"
      },
      style: {
        padding: "6px 8px",
        color: "var(--variant-textColor)",
        backgroundColor: "var(--variant-textBg)"
      }
    }, ...Object.entries(e.palette).filter(Ue()).map(([r]) => ({
      props: {
        color: r
      },
      style: {
        "--variant-textColor": (e.vars || e).palette[r].main,
        "--variant-outlinedColor": (e.vars || e).palette[r].main,
        "--variant-outlinedBorder": e.vars ? `rgba(${e.vars.palette[r].mainChannel} / 0.5)` : Ne(e.palette[r].main, 0.5),
        "--variant-containedColor": (e.vars || e).palette[r].contrastText,
        "--variant-containedBg": (e.vars || e).palette[r].main,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": (e.vars || e).palette[r].dark,
            "--variant-textBg": e.vars ? `rgba(${e.vars.palette[r].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette[r].main, e.palette.action.hoverOpacity),
            "--variant-outlinedBorder": (e.vars || e).palette[r].main,
            "--variant-outlinedBg": e.vars ? `rgba(${e.vars.palette[r].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette[r].main, e.palette.action.hoverOpacity)
          }
        }
      }
    })), {
      props: {
        color: "inherit"
      },
      style: {
        color: "inherit",
        borderColor: "currentColor",
        "--variant-containedBg": e.vars ? e.vars.palette.Button.inheritContainedBg : o,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": e.vars ? e.vars.palette.Button.inheritContainedHoverBg : n,
            "--variant-textBg": e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette.text.primary, e.palette.action.hoverOpacity),
            "--variant-outlinedBg": e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette.text.primary, e.palette.action.hoverOpacity)
          }
        }
      }
    }, {
      props: {
        size: "small",
        variant: "text"
      },
      style: {
        padding: "4px 5px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "text"
      },
      style: {
        padding: "8px 11px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "outlined"
      },
      style: {
        padding: "3px 9px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "outlined"
      },
      style: {
        padding: "7px 21px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "contained"
      },
      style: {
        padding: "4px 10px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "contained"
      },
      style: {
        padding: "8px 22px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        disableElevation: !0
      },
      style: {
        boxShadow: "none",
        "&:hover": {
          boxShadow: "none"
        },
        [`&.${an.focusVisible}`]: {
          boxShadow: "none"
        },
        "&:active": {
          boxShadow: "none"
        },
        [`&.${an.disabled}`]: {
          boxShadow: "none"
        }
      }
    }, {
      props: {
        fullWidth: !0
      },
      style: {
        width: "100%"
      }
    }, {
      props: {
        loadingPosition: "center"
      },
      style: {
        transition: e.transitions.create(["background-color", "box-shadow", "border-color"], {
          duration: e.transitions.duration.short
        }),
        [`&.${an.loading}`]: {
          color: "transparent"
        }
      }
    }]
  };
})), jS = M("span", {
  name: "MuiButton",
  slot: "StartIcon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.startIcon, n.loading && o.startIconLoadingStart, o[`iconSize${L(n.size)}`]];
  }
})(({
  theme: e
}) => ({
  display: "inherit",
  marginRight: 8,
  marginLeft: -4,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginLeft: -2
    }
  }, {
    props: {
      loadingPosition: "start",
      loading: !0
    },
    style: {
      transition: e.transitions.create(["opacity"], {
        duration: e.transitions.duration.short
      }),
      opacity: 0
    }
  }, {
    props: {
      loadingPosition: "start",
      loading: !0,
      fullWidth: !0
    },
    style: {
      marginRight: -8
    }
  }, ...Id]
})), MS = M("span", {
  name: "MuiButton",
  slot: "EndIcon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.endIcon, n.loading && o.endIconLoadingEnd, o[`iconSize${L(n.size)}`]];
  }
})(({
  theme: e
}) => ({
  display: "inherit",
  marginRight: -4,
  marginLeft: 8,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginRight: -2
    }
  }, {
    props: {
      loadingPosition: "end",
      loading: !0
    },
    style: {
      transition: e.transitions.create(["opacity"], {
        duration: e.transitions.duration.short
      }),
      opacity: 0
    }
  }, {
    props: {
      loadingPosition: "end",
      loading: !0,
      fullWidth: !0
    },
    style: {
      marginLeft: -8
    }
  }, ...Id]
})), AS = M("span", {
  name: "MuiButton",
  slot: "LoadingIndicator",
  overridesResolver: (e, o) => o.loadingIndicator
})(({
  theme: e
}) => ({
  display: "none",
  position: "absolute",
  visibility: "visible",
  variants: [{
    props: {
      loading: !0
    },
    style: {
      display: "flex"
    }
  }, {
    props: {
      loadingPosition: "start"
    },
    style: {
      left: 14
    }
  }, {
    props: {
      loadingPosition: "start",
      size: "small"
    },
    style: {
      left: 10
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "start"
    },
    style: {
      left: 6
    }
  }, {
    props: {
      loadingPosition: "center"
    },
    style: {
      left: "50%",
      transform: "translate(-50%)",
      color: (e.vars || e).palette.action.disabled
    }
  }, {
    props: {
      loadingPosition: "end"
    },
    style: {
      right: 14
    }
  }, {
    props: {
      loadingPosition: "end",
      size: "small"
    },
    style: {
      right: 10
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "end"
    },
    style: {
      right: 6
    }
  }, {
    props: {
      loadingPosition: "start",
      fullWidth: !0
    },
    style: {
      position: "relative",
      left: -10
    }
  }, {
    props: {
      loadingPosition: "end",
      fullWidth: !0
    },
    style: {
      position: "relative",
      right: -10
    }
  }]
})), mp = M("span", {
  name: "MuiButton",
  slot: "LoadingIconPlaceholder",
  overridesResolver: (e, o) => o.loadingIconPlaceholder
})({
  display: "inline-block",
  width: "1em",
  height: "1em"
}), BS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = m.useContext(Cl), s = m.useContext(wl), a = Dn(r, o), i = pe({
    props: a,
    name: "MuiButton"
  }), {
    children: l,
    color: c = "primary",
    component: p = "button",
    className: u,
    disabled: f = !1,
    disableElevation: g = !1,
    disableFocusRipple: b = !1,
    endIcon: h,
    focusVisibleClassName: d,
    fullWidth: y = !1,
    id: S,
    loading: O = null,
    loadingIndicator: C,
    loadingPosition: T = "center",
    size: w = "medium",
    startIcon: E,
    type: $,
    variant: P = "text",
    ...N
  } = i, v = io(S), R = C ?? /* @__PURE__ */ x.jsx(fl, {
    "aria-labelledby": v,
    color: "inherit",
    size: 16
  }), A = {
    ...i,
    color: c,
    component: p,
    disabled: f,
    disableElevation: g,
    disableFocusRipple: b,
    fullWidth: y,
    loading: O,
    loadingIndicator: R,
    loadingPosition: T,
    size: w,
    type: $,
    variant: P
  }, j = NS(A), k = (E || O && T === "start") && /* @__PURE__ */ x.jsx(jS, {
    className: j.startIcon,
    ownerState: A,
    children: E || /* @__PURE__ */ x.jsx(mp, {
      className: j.loadingIconPlaceholder,
      ownerState: A
    })
  }), D = (h || O && T === "end") && /* @__PURE__ */ x.jsx(MS, {
    className: j.endIcon,
    ownerState: A,
    children: h || /* @__PURE__ */ x.jsx(mp, {
      className: j.loadingIconPlaceholder,
      ownerState: A
    })
  }), B = s || "", _ = typeof O == "boolean" ? (
    // use plain HTML span to minimize the runtime overhead
    /* @__PURE__ */ x.jsx("span", {
      className: j.loadingWrapper,
      style: {
        display: "contents"
      },
      children: O && /* @__PURE__ */ x.jsx(AS, {
        className: j.loadingIndicator,
        ownerState: A,
        children: R
      })
    })
  ) : null;
  return /* @__PURE__ */ x.jsxs(IS, {
    ownerState: A,
    className: W(r.className, j.root, u, B),
    component: p,
    disabled: f || O,
    focusRipple: !b,
    focusVisibleClassName: W(j.focusVisible, d),
    ref: n,
    type: $,
    id: v,
    ...N,
    classes: j,
    children: [k, T !== "end" && _, l, T === "end" && _, D]
  });
});
process.env.NODE_ENV !== "production" && (BS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * Element placed after the children.
   */
  endIcon: t.node,
  /**
   * @ignore
   */
  focusVisibleClassName: t.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: t.string,
  /**
   * @ignore
   */
  id: t.string,
  /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */
  loading: t.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: t.node,
  /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */
  loadingPosition: t.oneOf(["center", "end", "start"]),
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * Element placed before the children.
   */
  startIcon: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @ignore
   */
  type: t.oneOfType([t.oneOf(["button", "reset", "submit"]), t.string]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["contained", "outlined", "text"]), t.string])
});
function LS(e) {
  return ae("MuiButtonGroup", e);
}
const ze = le("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "firstButton", "fullWidth", "horizontal", "vertical", "colorPrimary", "colorSecondary", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary", "lastButton", "middleButton"]), DS = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [{
    [`& .${ze.grouped}`]: o.grouped
  }, {
    [`& .${ze.grouped}`]: o[`grouped${L(n.orientation)}`]
  }, {
    [`& .${ze.grouped}`]: o[`grouped${L(n.variant)}`]
  }, {
    [`& .${ze.grouped}`]: o[`grouped${L(n.variant)}${L(n.orientation)}`]
  }, {
    [`& .${ze.grouped}`]: o[`grouped${L(n.variant)}${L(n.color)}`]
  }, {
    [`& .${ze.firstButton}`]: o.firstButton
  }, {
    [`& .${ze.lastButton}`]: o.lastButton
  }, {
    [`& .${ze.middleButton}`]: o.middleButton
  }, o.root, o[n.variant], n.disableElevation === !0 && o.disableElevation, n.fullWidth && o.fullWidth, n.orientation === "vertical" && o.vertical];
}, zS = (e) => {
  const {
    classes: o,
    color: n,
    disabled: r,
    disableElevation: s,
    fullWidth: a,
    orientation: i,
    variant: l
  } = e, c = {
    root: ["root", l, i, a && "fullWidth", s && "disableElevation", `color${L(n)}`],
    grouped: ["grouped", `grouped${L(i)}`, `grouped${L(l)}`, `grouped${L(l)}${L(i)}`, `grouped${L(l)}${L(n)}`, r && "disabled"],
    firstButton: ["firstButton"],
    lastButton: ["lastButton"],
    middleButton: ["middleButton"]
  };
  return ce(c, LS, o);
}, FS = M("div", {
  name: "MuiButtonGroup",
  slot: "Root",
  overridesResolver: DS
})(Q(({
  theme: e
}) => ({
  display: "inline-flex",
  borderRadius: (e.vars || e).shape.borderRadius,
  variants: [{
    props: {
      variant: "contained"
    },
    style: {
      boxShadow: (e.vars || e).shadows[2]
    }
  }, {
    props: {
      disableElevation: !0
    },
    style: {
      boxShadow: "none"
    }
  }, {
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      flexDirection: "column",
      [`& .${ze.lastButton},& .${ze.middleButton}`]: {
        borderTopRightRadius: 0,
        borderTopLeftRadius: 0
      },
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderBottomRightRadius: 0,
        borderBottomLeftRadius: 0
      }
    }
  }, {
    props: {
      orientation: "horizontal"
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      },
      [`& .${ze.lastButton},& .${ze.middleButton}`]: {
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      }
    }
  }, {
    props: {
      variant: "text",
      orientation: "horizontal"
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderRight: e.vars ? `1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
        [`&.${ze.disabled}`]: {
          borderRight: `1px solid ${(e.vars || e).palette.action.disabled}`
        }
      }
    }
  }, {
    props: {
      variant: "text",
      orientation: "vertical"
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderBottom: e.vars ? `1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
        [`&.${ze.disabled}`]: {
          borderBottom: `1px solid ${(e.vars || e).palette.action.disabled}`
        }
      }
    }
  }, ...Object.entries(e.palette).filter(Ue()).flatMap(([o]) => [{
    props: {
      variant: "text",
      color: o
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / 0.5)` : Ne(e.palette[o].main, 0.5)
      }
    }
  }]), {
    props: {
      variant: "outlined",
      orientation: "horizontal"
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderRightColor: "transparent",
        "&:hover": {
          borderRightColor: "currentColor"
        }
      },
      [`& .${ze.lastButton},& .${ze.middleButton}`]: {
        marginLeft: -1
      }
    }
  }, {
    props: {
      variant: "outlined",
      orientation: "vertical"
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderBottomColor: "transparent",
        "&:hover": {
          borderBottomColor: "currentColor"
        }
      },
      [`& .${ze.lastButton},& .${ze.middleButton}`]: {
        marginTop: -1
      }
    }
  }, {
    props: {
      variant: "contained",
      orientation: "horizontal"
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderRight: `1px solid ${(e.vars || e).palette.grey[400]}`,
        [`&.${ze.disabled}`]: {
          borderRight: `1px solid ${(e.vars || e).palette.action.disabled}`
        }
      }
    }
  }, {
    props: {
      variant: "contained",
      orientation: "vertical"
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderBottom: `1px solid ${(e.vars || e).palette.grey[400]}`,
        [`&.${ze.disabled}`]: {
          borderBottom: `1px solid ${(e.vars || e).palette.action.disabled}`
        }
      }
    }
  }, ...Object.entries(e.palette).filter(Ue(["dark"])).map(([o]) => ({
    props: {
      variant: "contained",
      color: o
    },
    style: {
      [`& .${ze.firstButton},& .${ze.middleButton}`]: {
        borderColor: (e.vars || e).palette[o].dark
      }
    }
  }))],
  [`& .${ze.grouped}`]: {
    minWidth: 40,
    boxShadow: "none",
    props: {
      variant: "contained"
    },
    style: {
      "&:hover": {
        boxShadow: "none"
      }
    }
  }
}))), VS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiButtonGroup"
  }), {
    children: s,
    className: a,
    color: i = "primary",
    component: l = "div",
    disabled: c = !1,
    disableElevation: p = !1,
    disableFocusRipple: u = !1,
    disableRipple: f = !1,
    fullWidth: g = !1,
    orientation: b = "horizontal",
    size: h = "medium",
    variant: d = "outlined",
    ...y
  } = r, S = {
    ...r,
    color: i,
    component: l,
    disabled: c,
    disableElevation: p,
    disableFocusRipple: u,
    disableRipple: f,
    fullWidth: g,
    orientation: b,
    size: h,
    variant: d
  }, O = zS(S), C = m.useMemo(() => ({
    className: O.grouped,
    color: i,
    disabled: c,
    disableElevation: p,
    disableFocusRipple: u,
    disableRipple: f,
    fullWidth: g,
    size: h,
    variant: d
  }), [i, c, p, u, f, g, h, d, O.grouped]), T = Wu(s), w = T.length, E = ($) => {
    const P = $ === 0, N = $ === w - 1;
    return P && N ? "" : P ? O.firstButton : N ? O.lastButton : O.middleButton;
  };
  return /* @__PURE__ */ x.jsx(FS, {
    as: l,
    role: "group",
    className: W(O.root, a),
    ref: n,
    ownerState: S,
    ...y,
    children: /* @__PURE__ */ x.jsx(Cl.Provider, {
      value: C,
      children: T.map(($, P) => /* @__PURE__ */ x.jsx(wl.Provider, {
        value: E(P),
        children: $
      }, P))
    })
  });
});
process.env.NODE_ENV !== "production" && (VS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: t.bool,
  /**
   * If `true`, the button keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the button ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If `true`, the buttons will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOfType([t.oneOf(["contained", "outlined", "text"]), t.string])
});
function _S(e) {
  return ae("MuiCard", e);
}
const LP = le("MuiCard", ["root"]), WS = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, _S, o);
}, US = M(Qt, {
  name: "MuiCard",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  overflow: "hidden"
}), HS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCard"
  }), {
    className: s,
    raised: a = !1,
    ...i
  } = r, l = {
    ...r,
    raised: a
  }, c = WS(l);
  return /* @__PURE__ */ x.jsx(US, {
    className: W(c.root, s),
    elevation: a ? 8 : void 0,
    ref: n,
    ownerState: l,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (HS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the card will use raised styling.
   * @default false
   */
  raised: xt(t.bool, (e) => e.raised && e.variant === "outlined" ? new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.') : null),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function GS(e) {
  return ae("MuiCardActionArea", e);
}
const Ja = le("MuiCardActionArea", ["root", "focusVisible", "focusHighlight"]), qS = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    focusHighlight: ["focusHighlight"]
  }, GS, o);
}, YS = M(wt, {
  name: "MuiCardActionArea",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => ({
  display: "block",
  textAlign: "inherit",
  borderRadius: "inherit",
  // for Safari to work https://github.com/mui/material-ui/issues/36285.
  width: "100%",
  [`&:hover .${Ja.focusHighlight}`]: {
    opacity: (e.vars || e).palette.action.hoverOpacity,
    "@media (hover: none)": {
      opacity: 0
    }
  },
  [`&.${Ja.focusVisible} .${Ja.focusHighlight}`]: {
    opacity: (e.vars || e).palette.action.focusOpacity
  }
}))), KS = M("span", {
  name: "MuiCardActionArea",
  slot: "FocusHighlight",
  overridesResolver: (e, o) => o.focusHighlight
})(Q(({
  theme: e
}) => ({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit",
  opacity: 0,
  backgroundColor: "currentcolor",
  transition: e.transitions.create("opacity", {
    duration: e.transitions.duration.short
  })
}))), XS = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCardActionArea"
  }), {
    children: s,
    className: a,
    focusVisibleClassName: i,
    ...l
  } = r, c = r, p = qS(c);
  return /* @__PURE__ */ x.jsxs(YS, {
    className: W(p.root, a),
    focusVisibleClassName: W(i, p.focusVisible),
    ref: n,
    ownerState: c,
    ...l,
    children: [s, /* @__PURE__ */ x.jsx(KS, {
      className: p.focusHighlight,
      ownerState: c
    })]
  });
});
process.env.NODE_ENV !== "production" && (XS.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  focusVisibleClassName: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function JS(e) {
  return ae("MuiCardActions", e);
}
const DP = le("MuiCardActions", ["root", "spacing"]), ZS = (e) => {
  const {
    classes: o,
    disableSpacing: n
  } = e;
  return ce({
    root: ["root", !n && "spacing"]
  }, JS, o);
}, QS = M("div", {
  name: "MuiCardActions",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableSpacing && o.spacing];
  }
})({
  display: "flex",
  alignItems: "center",
  padding: 8,
  variants: [{
    props: {
      disableSpacing: !1
    },
    style: {
      "& > :not(style) ~ :not(style)": {
        marginLeft: 8
      }
    }
  }]
}), eT = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCardActions"
  }), {
    disableSpacing: s = !1,
    className: a,
    ...i
  } = r, l = {
    ...r,
    disableSpacing: s
  }, c = ZS(l);
  return /* @__PURE__ */ x.jsx(QS, {
    className: W(c.root, a),
    ownerState: l,
    ref: n,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (eT.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function tT(e) {
  return ae("MuiCardContent", e);
}
const zP = le("MuiCardContent", ["root"]), oT = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, tT, o);
}, nT = M("div", {
  name: "MuiCardContent",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  padding: 16,
  "&:last-child": {
    paddingBottom: 24
  }
}), rT = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCardContent"
  }), {
    className: s,
    component: a = "div",
    ...i
  } = r, l = {
    ...r,
    component: a
  }, c = oT(l);
  return /* @__PURE__ */ x.jsx(nT, {
    as: a,
    className: W(c.root, s),
    ownerState: l,
    ref: n,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (rT.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function sT(e) {
  return ae("MuiCardHeader", e);
}
const Xs = le("MuiCardHeader", ["root", "avatar", "action", "content", "title", "subheader"]), aT = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    avatar: ["avatar"],
    action: ["action"],
    content: ["content"],
    title: ["title"],
    subheader: ["subheader"]
  }, sT, o);
}, iT = M("div", {
  name: "MuiCardHeader",
  slot: "Root",
  overridesResolver: (e, o) => [{
    [`& .${Xs.title}`]: o.title
  }, {
    [`& .${Xs.subheader}`]: o.subheader
  }, o.root]
})({
  display: "flex",
  alignItems: "center",
  padding: 16
}), lT = M("div", {
  name: "MuiCardHeader",
  slot: "Avatar",
  overridesResolver: (e, o) => o.avatar
})({
  display: "flex",
  flex: "0 0 auto",
  marginRight: 16
}), cT = M("div", {
  name: "MuiCardHeader",
  slot: "Action",
  overridesResolver: (e, o) => o.action
})({
  flex: "0 0 auto",
  alignSelf: "flex-start",
  marginTop: -4,
  marginRight: -8,
  marginBottom: -4
}), pT = M("div", {
  name: "MuiCardHeader",
  slot: "Content",
  overridesResolver: (e, o) => o.content
})({
  flex: "1 1 auto",
  [`.${Us.root}:where(& .${Xs.title})`]: {
    display: "block"
  },
  [`.${Us.root}:where(& .${Xs.subheader})`]: {
    display: "block"
  }
}), uT = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCardHeader"
  }), {
    action: s,
    avatar: a,
    component: i = "div",
    disableTypography: l = !1,
    subheader: c,
    subheaderTypographyProps: p,
    title: u,
    titleTypographyProps: f,
    slots: g = {},
    slotProps: b = {},
    ...h
  } = r, d = {
    ...r,
    component: i,
    disableTypography: l
  }, y = aT(d), S = {
    slots: g,
    slotProps: {
      title: f,
      subheader: p,
      ...b
    }
  };
  let O = u;
  const [C, T] = je("title", {
    className: y.title,
    elementType: kt,
    externalForwardedProps: S,
    ownerState: d,
    additionalProps: {
      variant: a ? "body2" : "h5",
      component: "span"
    }
  });
  O != null && O.type !== kt && !l && (O = /* @__PURE__ */ x.jsx(C, {
    ...T,
    children: O
  }));
  let w = c;
  const [E, $] = je("subheader", {
    className: y.subheader,
    elementType: kt,
    externalForwardedProps: S,
    ownerState: d,
    additionalProps: {
      variant: a ? "body2" : "body1",
      color: "textSecondary",
      component: "span"
    }
  });
  w != null && w.type !== kt && !l && (w = /* @__PURE__ */ x.jsx(E, {
    ...$,
    children: w
  }));
  const [P, N] = je("root", {
    ref: n,
    className: y.root,
    elementType: iT,
    externalForwardedProps: {
      ...S,
      ...h,
      component: i
    },
    ownerState: d
  }), [v, R] = je("avatar", {
    className: y.avatar,
    elementType: lT,
    externalForwardedProps: S,
    ownerState: d
  }), [A, j] = je("content", {
    className: y.content,
    elementType: pT,
    externalForwardedProps: S,
    ownerState: d
  }), [k, D] = je("action", {
    className: y.action,
    elementType: cT,
    externalForwardedProps: S,
    ownerState: d
  });
  return /* @__PURE__ */ x.jsxs(P, {
    ...N,
    children: [a && /* @__PURE__ */ x.jsx(v, {
      ...R,
      children: a
    }), /* @__PURE__ */ x.jsxs(A, {
      ...j,
      children: [O, w]
    }), s && /* @__PURE__ */ x.jsx(k, {
      ...D,
      children: s
    })]
  });
});
process.env.NODE_ENV !== "production" && (uT.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display in the card header.
   */
  action: t.node,
  /**
   * The Avatar element to display.
   */
  avatar: t.node,
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `title` text, and optional `subheader` text
   * with the Typography component.
   * @default false
   */
  disableTypography: t.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    action: t.oneOfType([t.func, t.object]),
    avatar: t.oneOfType([t.func, t.object]),
    content: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object]),
    subheader: t.oneOfType([t.func, t.object]),
    title: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    action: t.elementType,
    avatar: t.elementType,
    content: t.elementType,
    root: t.elementType,
    subheader: t.elementType,
    title: t.elementType
  }),
  /**
   * The content of the component.
   */
  subheader: t.node,
  /**
   * These props will be forwarded to the subheader
   * (as long as disableTypography is not `true`).
   * @deprecated Use `slotProps.subheader` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  subheaderTypographyProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The content of the component.
   */
  title: t.node,
  /**
   * These props will be forwarded to the title
   * (as long as disableTypography is not `true`).
   * @deprecated Use `slotProps.title` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  titleTypographyProps: t.object
});
function dT(e) {
  return ae("MuiCardMedia", e);
}
const FP = le("MuiCardMedia", ["root", "media", "img"]), fT = (e) => {
  const {
    classes: o,
    isMediaComponent: n,
    isImageComponent: r
  } = e;
  return ce({
    root: ["root", n && "media", r && "img"]
  }, dT, o);
}, mT = M("div", {
  name: "MuiCardMedia",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      isMediaComponent: r,
      isImageComponent: s
    } = n;
    return [o.root, r && o.media, s && o.img];
  }
})({
  display: "block",
  backgroundSize: "cover",
  backgroundRepeat: "no-repeat",
  backgroundPosition: "center",
  variants: [{
    props: {
      isMediaComponent: !0
    },
    style: {
      width: "100%"
    }
  }, {
    props: {
      isImageComponent: !0
    },
    style: {
      objectFit: "cover"
    }
  }]
}), gT = ["video", "audio", "picture", "iframe", "img"], bT = ["picture", "img"], hT = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCardMedia"
  }), {
    children: s,
    className: a,
    component: i = "div",
    image: l,
    src: c,
    style: p,
    ...u
  } = r, f = gT.includes(i), g = !f && l ? {
    backgroundImage: `url("${l}")`,
    ...p
  } : p, b = {
    ...r,
    component: i,
    isMediaComponent: f,
    isImageComponent: bT.includes(i)
  }, h = fT(b);
  return /* @__PURE__ */ x.jsx(mT, {
    className: W(h.root, a),
    as: i,
    role: !f && l ? "img" : void 0,
    ref: n,
    style: g,
    ownerState: b,
    src: f ? l || c : void 0,
    ...u,
    children: s
  });
});
process.env.NODE_ENV !== "production" && (hT.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: xt(t.node, (e) => !e.children && !e.image && !e.src && !e.component ? new Error("MUI: Either `children`, `image`, `src` or `component` prop must be specified.") : null),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Image to be displayed as a background image.
   * Either `image` or `src` prop must be specified.
   * Note that caller must specify height otherwise the image will not be visible.
   */
  image: t.string,
  /**
   * An alias for `image` property.
   * Available only with media components.
   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
   */
  src: t.string,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function yT(e) {
  return ae("PrivateSwitchBase", e);
}
le("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
const vT = (e) => {
  const {
    classes: o,
    checked: n,
    disabled: r,
    edge: s
  } = e, a = {
    root: ["root", n && "checked", r && "disabled", s && `edge${L(s)}`],
    input: ["input"]
  };
  return ce(a, yT, o);
}, xT = M(wt)({
  padding: 9,
  borderRadius: "50%",
  variants: [{
    props: {
      edge: "start",
      size: "small"
    },
    style: {
      marginLeft: -3
    }
  }, {
    props: ({
      edge: e,
      ownerState: o
    }) => e === "start" && o.size !== "small",
    style: {
      marginLeft: -12
    }
  }, {
    props: {
      edge: "end",
      size: "small"
    },
    style: {
      marginRight: -3
    }
  }, {
    props: ({
      edge: e,
      ownerState: o
    }) => e === "end" && o.size !== "small",
    style: {
      marginRight: -12
    }
  }]
}), ST = M("input", {
  shouldForwardProp: bt
})({
  cursor: "inherit",
  position: "absolute",
  opacity: 0,
  width: "100%",
  height: "100%",
  top: 0,
  left: 0,
  margin: 0,
  padding: 0,
  zIndex: 1
}), $a = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    autoFocus: r,
    checked: s,
    checkedIcon: a,
    className: i,
    defaultChecked: l,
    disabled: c,
    disableFocusRipple: p = !1,
    edge: u = !1,
    icon: f,
    id: g,
    inputProps: b,
    inputRef: h,
    name: d,
    onBlur: y,
    onChange: S,
    onFocus: O,
    readOnly: C,
    required: T = !1,
    tabIndex: w,
    type: E,
    value: $,
    ...P
  } = o, [N, v] = Kt({
    controlled: s,
    default: !!l,
    name: "SwitchBase",
    state: "checked"
  }), R = uo(), A = (U) => {
    O && O(U), R && R.onFocus && R.onFocus(U);
  }, j = (U) => {
    y && y(U), R && R.onBlur && R.onBlur(U);
  }, k = (U) => {
    if (U.nativeEvent.defaultPrevented)
      return;
    const F = U.target.checked;
    v(F), S && S(U, F);
  };
  let D = c;
  R && typeof D > "u" && (D = R.disabled);
  const B = E === "checkbox" || E === "radio", _ = {
    ...o,
    checked: N,
    disabled: D,
    disableFocusRipple: p,
    edge: u
  }, H = vT(_);
  return /* @__PURE__ */ x.jsxs(xT, {
    component: "span",
    className: W(H.root, i),
    centerRipple: !0,
    focusRipple: !p,
    disabled: D,
    tabIndex: null,
    role: void 0,
    onFocus: A,
    onBlur: j,
    ownerState: _,
    ref: n,
    ...P,
    children: [/* @__PURE__ */ x.jsx(ST, {
      autoFocus: r,
      checked: s,
      defaultChecked: l,
      className: H.input,
      disabled: D,
      id: B ? g : void 0,
      name: d,
      onChange: k,
      readOnly: C,
      ref: h,
      required: T,
      ownerState: _,
      tabIndex: w,
      type: E,
      ...E === "checkbox" && $ === void 0 ? {} : {
        value: $
      },
      ...b
    }), N ? a : f]
  });
});
process.env.NODE_ENV !== "production" && ($a.propTypes = {
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: t.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  defaultChecked: t.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: t.oneOf(["end", "start", !1]),
  /**
   * The icon to display when the component is unchecked.
   */
  icon: t.node.isRequired,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /*
   * @ignore
   */
  name: t.string,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.object,
  /**
   * @ignore
   */
  tabIndex: t.oneOfType([t.number, t.string]),
  /**
   * The input component prop `type`.
   */
  type: t.string.isRequired,
  /**
   * The value of the component.
   */
  value: t.any
});
const TT = at(/* @__PURE__ */ x.jsx("path", {
  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
}), "CheckBoxOutlineBlank"), CT = at(/* @__PURE__ */ x.jsx("path", {
  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), "CheckBox"), wT = at(/* @__PURE__ */ x.jsx("path", {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
}), "IndeterminateCheckBox");
function OT(e) {
  return ae("MuiCheckbox", e);
}
const Za = le("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]), ET = (e) => {
  const {
    classes: o,
    indeterminate: n,
    color: r,
    size: s
  } = e, a = {
    root: ["root", n && "indeterminate", `color${L(r)}`, `size${L(s)}`]
  }, i = ce(a, OT, o);
  return {
    ...o,
    // forward the disabled and checked classes to the SwitchBase
    ...i
  };
}, RT = M($a, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiCheckbox",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.indeterminate && o.indeterminate, o[`size${L(n.size)}`], n.color !== "default" && o[`color${L(n.color)}`]];
  }
})(Q(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  variants: [{
    props: {
      color: "default",
      disableRipple: !1
    },
    style: {
      "&:hover": {
        backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette.action.active, e.palette.action.hoverOpacity)
      }
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o,
      disableRipple: !1
    },
    style: {
      "&:hover": {
        backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette[o].main, e.palette.action.hoverOpacity)
      }
    }
  })), ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      [`&.${Za.checked}, &.${Za.indeterminate}`]: {
        color: (e.vars || e).palette[o].main
      },
      [`&.${Za.disabled}`]: {
        color: (e.vars || e).palette.action.disabled
      }
    }
  })), {
    // Should be last to override other colors
    props: {
      disableRipple: !1
    },
    style: {
      // Reset on touch devices, it doesn't add specificity
      "&:hover": {
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }]
}))), $T = /* @__PURE__ */ x.jsx(CT, {}), kT = /* @__PURE__ */ x.jsx(TT, {}), PT = /* @__PURE__ */ x.jsx(wT, {}), NT = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiCheckbox"
  }), {
    checkedIcon: s = $T,
    color: a = "primary",
    icon: i = kT,
    indeterminate: l = !1,
    indeterminateIcon: c = PT,
    inputProps: p,
    size: u = "medium",
    disableRipple: f = !1,
    className: g,
    ...b
  } = r, h = l ? c : i, d = l ? c : s, y = {
    ...r,
    disableRipple: f,
    color: a,
    indeterminate: l,
    size: u
  }, S = ET(y);
  return /* @__PURE__ */ x.jsx(RT, {
    type: "checkbox",
    inputProps: {
      "data-indeterminate": l,
      ...p
    },
    icon: /* @__PURE__ */ m.cloneElement(h, {
      fontSize: h.props.fontSize ?? u
    }),
    checkedIcon: /* @__PURE__ */ m.cloneElement(d, {
      fontSize: d.props.fontSize ?? u
    }),
    ownerState: y,
    ref: n,
    className: W(S.root, g),
    disableRipple: f,
    ...b,
    classes: S
  });
});
process.env.NODE_ENV !== "production" && (NT.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   * @default <CheckBoxIcon />
   */
  checkedIcon: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * The icon to display when the component is unchecked.
   * @default <CheckBoxOutlineBlankIcon />
   */
  icon: t.node,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: t.bool,
  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateCheckBoxIcon />
   */
  indeterminateIcon: t.node,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense checkbox styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: t.any
});
function gp(e) {
  return e.substring(2).toLowerCase();
}
function IT(e, o) {
  return o.documentElement.clientWidth < e.clientX || o.documentElement.clientHeight < e.clientY;
}
function Js(e) {
  const {
    children: o,
    disableReactTree: n = !1,
    mouseEvent: r = "onClick",
    onClickAway: s,
    touchEvent: a = "onTouchEnd"
  } = e, i = m.useRef(!1), l = m.useRef(null), c = m.useRef(!1), p = m.useRef(!1);
  m.useEffect(() => (setTimeout(() => {
    c.current = !0;
  }, 0), () => {
    c.current = !1;
  }), []);
  const u = Ye(Vo(o), l), f = pt((h) => {
    const d = p.current;
    p.current = !1;
    const y = lt(l.current);
    if (!c.current || !l.current || "clientX" in h && IT(h, y))
      return;
    if (i.current) {
      i.current = !1;
      return;
    }
    let S;
    h.composedPath ? S = h.composedPath().includes(l.current) : S = !y.documentElement.contains(
      // @ts-expect-error returns `false` as intended when not dispatched from a Node
      h.target
    ) || l.current.contains(
      // @ts-expect-error returns `false` as intended when not dispatched from a Node
      h.target
    ), !S && (n || !d) && s(h);
  }), g = (h) => (d) => {
    p.current = !0;
    const y = o.props[h];
    y && y(d);
  }, b = {
    ref: u
  };
  return a !== !1 && (b[a] = g(a)), m.useEffect(() => {
    if (a !== !1) {
      const h = gp(a), d = lt(l.current), y = () => {
        i.current = !0;
      };
      return d.addEventListener(h, f), d.addEventListener("touchmove", y), () => {
        d.removeEventListener(h, f), d.removeEventListener("touchmove", y);
      };
    }
  }, [f, a]), r !== !1 && (b[r] = g(r)), m.useEffect(() => {
    if (r !== !1) {
      const h = gp(r), d = lt(l.current);
      return d.addEventListener(h, f), () => {
        d.removeEventListener(h, f);
      };
    }
  }, [f, r]), /* @__PURE__ */ m.cloneElement(o, b);
}
process.env.NODE_ENV !== "production" && (Js.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The wrapped element.
   */
  children: Fo.isRequired,
  /**
   * If `true`, the React tree is ignored and only the DOM tree is considered.
   * This prop changes how portaled elements are handled.
   * @default false
   */
  disableReactTree: t.bool,
  /**
   * The mouse event to listen to. You can disable the listener by providing `false`.
   * @default 'onClick'
   */
  mouseEvent: t.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", !1]),
  /**
   * Callback fired when a "click away" event is detected.
   */
  onClickAway: t.func.isRequired,
  /**
   * The touch event to listen to. You can disable the listener by providing `false`.
   * @default 'onTouchEnd'
   */
  touchEvent: t.oneOf(["onTouchEnd", "onTouchStart", !1])
});
process.env.NODE_ENV !== "production" && (Js.propTypes = Cn(Js.propTypes));
const jT = sh({
  createStyledComponent: M("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (e, o) => {
      const {
        ownerState: n
      } = e;
      return [o.root, o[`maxWidth${L(String(n.maxWidth))}`], n.fixed && o.fixed, n.disableGutters && o.disableGutters];
    }
  }),
  useThemeProps: (e) => pe({
    props: e,
    name: "MuiContainer"
  })
});
process.env.NODE_ENV !== "production" && (jT.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: t.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl", !1]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function VP(e) {
  return ae("MuiContainer", e);
}
const _P = le("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]), $i = typeof cl({}) == "function", jd = (e, o) => ({
  WebkitFontSmoothing: "antialiased",
  // Antialiasing.
  MozOsxFontSmoothing: "grayscale",
  // Antialiasing.
  // Change from `box-sizing: content-box` so that `width`
  // is not affected by `padding` or `border`.
  boxSizing: "border-box",
  // Fix font resize problem in iOS
  WebkitTextSizeAdjust: "100%",
  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.
  ...o && !e.vars && {
    colorScheme: e.palette.mode
  }
}), Md = (e) => ({
  color: (e.vars || e).palette.text.primary,
  ...e.typography.body1,
  backgroundColor: (e.vars || e).palette.background.default,
  "@media print": {
    // Save printer ink.
    backgroundColor: (e.vars || e).palette.common.white
  }
}), Ad = (e, o = !1) => {
  var a, i;
  const n = {};
  o && e.colorSchemes && typeof e.getColorSchemeSelector == "function" && Object.entries(e.colorSchemes).forEach(([l, c]) => {
    var u, f;
    const p = e.getColorSchemeSelector(l);
    p.startsWith("@") ? n[p] = {
      ":root": {
        colorScheme: (u = c.palette) == null ? void 0 : u.mode
      }
    } : n[p.replace(/\s*&/, "")] = {
      colorScheme: (f = c.palette) == null ? void 0 : f.mode
    };
  });
  let r = {
    html: jd(e, o),
    "*, *::before, *::after": {
      boxSizing: "inherit"
    },
    "strong, b": {
      fontWeight: e.typography.fontWeightBold
    },
    body: {
      margin: 0,
      // Remove the margin in all browsers.
      ...Md(e),
      // Add support for document.body.requestFullScreen().
      // Other elements, if background transparent, are not supported.
      "&::backdrop": {
        backgroundColor: (e.vars || e).palette.background.default
      }
    },
    ...n
  };
  const s = (i = (a = e.components) == null ? void 0 : a.MuiCssBaseline) == null ? void 0 : i.styleOverrides;
  return s && (r = [r, s]), r;
}, Is = "mui-ecs", MT = (e) => {
  const o = Ad(e, !1), n = Array.isArray(o) ? o[0] : o;
  return !e.vars && n && (n.html[`:root:has(${Is})`] = {
    colorScheme: e.palette.mode
  }), e.colorSchemes && Object.entries(e.colorSchemes).forEach(([r, s]) => {
    var i, l;
    const a = e.getColorSchemeSelector(r);
    a.startsWith("@") ? n[a] = {
      [`:root:not(:has(.${Is}))`]: {
        colorScheme: (i = s.palette) == null ? void 0 : i.mode
      }
    } : n[a.replace(/\s*&/, "")] = {
      [`&:not(:has(.${Is}))`]: {
        colorScheme: (l = s.palette) == null ? void 0 : l.mode
      }
    };
  }), o;
}, AT = cl($i ? ({
  theme: e,
  enableColorScheme: o
}) => Ad(e, o) : ({
  theme: e
}) => MT(e));
function BT(e) {
  const o = pe({
    props: e,
    name: "MuiCssBaseline"
  }), {
    children: n,
    enableColorScheme: r = !1
  } = o;
  return /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [$i && /* @__PURE__ */ x.jsx(AT, {
      enableColorScheme: r
    }), !$i && !r && /* @__PURE__ */ x.jsx("span", {
      className: Is,
      style: {
        display: "none"
      }
    }), n]
  });
}
process.env.NODE_ENV !== "production" && (BT.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: t.node,
  /**
   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */
  enableColorScheme: t.bool
});
const LT = {
  track: "#2b2b2b",
  thumb: "#6b6b6b",
  active: "#959595"
};
function WP(e = LT) {
  return {
    scrollbarColor: `${e.thumb} ${e.track}`,
    "&::-webkit-scrollbar, & *::-webkit-scrollbar": {
      backgroundColor: e.track
    },
    "&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb": {
      borderRadius: 8,
      backgroundColor: e.thumb,
      minHeight: 24,
      border: `3px solid ${e.track}`
    },
    "&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus": {
      backgroundColor: e.active
    },
    "&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active": {
      backgroundColor: e.active
    },
    "&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover": {
      backgroundColor: e.active
    },
    "&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner": {
      backgroundColor: e.track
    }
  };
}
function DT(e) {
  const o = lt(e);
  return o.body === e ? Pt(e).innerWidth > o.documentElement.clientWidth : e.scrollHeight > e.clientHeight;
}
function Cr(e, o) {
  o ? e.setAttribute("aria-hidden", "true") : e.removeAttribute("aria-hidden");
}
function bp(e) {
  return parseInt(Pt(e).getComputedStyle(e).paddingRight, 10) || 0;
}
function zT(e) {
  const n = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"].includes(e.tagName), r = e.tagName === "INPUT" && e.getAttribute("type") === "hidden";
  return n || r;
}
function hp(e, o, n, r, s) {
  const a = [o, n, ...r];
  [].forEach.call(e.children, (i) => {
    const l = !a.includes(i), c = !zT(i);
    l && c && Cr(i, s);
  });
}
function Qa(e, o) {
  let n = -1;
  return e.some((r, s) => o(r) ? (n = s, !0) : !1), n;
}
function FT(e, o) {
  const n = [], r = e.container;
  if (!o.disableScrollLock) {
    if (DT(r)) {
      const i = _u(Pt(r));
      n.push({
        value: r.style.paddingRight,
        property: "padding-right",
        el: r
      }), r.style.paddingRight = `${bp(r) + i}px`;
      const l = lt(r).querySelectorAll(".mui-fixed");
      [].forEach.call(l, (c) => {
        n.push({
          value: c.style.paddingRight,
          property: "padding-right",
          el: c
        }), c.style.paddingRight = `${bp(c) + i}px`;
      });
    }
    let a;
    if (r.parentNode instanceof DocumentFragment)
      a = lt(r).body;
    else {
      const i = r.parentElement, l = Pt(r);
      a = (i == null ? void 0 : i.nodeName) === "HTML" && l.getComputedStyle(i).overflowY === "scroll" ? i : r;
    }
    n.push({
      value: a.style.overflow,
      property: "overflow",
      el: a
    }, {
      value: a.style.overflowX,
      property: "overflow-x",
      el: a
    }, {
      value: a.style.overflowY,
      property: "overflow-y",
      el: a
    }), a.style.overflow = "hidden";
  }
  return () => {
    n.forEach(({
      value: a,
      el: i,
      property: l
    }) => {
      a ? i.style.setProperty(l, a) : i.style.removeProperty(l);
    });
  };
}
function VT(e) {
  const o = [];
  return [].forEach.call(e.children, (n) => {
    n.getAttribute("aria-hidden") === "true" && o.push(n);
  }), o;
}
class _T {
  constructor() {
    this.modals = [], this.containers = [];
  }
  add(o, n) {
    let r = this.modals.indexOf(o);
    if (r !== -1)
      return r;
    r = this.modals.length, this.modals.push(o), o.modalRef && Cr(o.modalRef, !1);
    const s = VT(n);
    hp(n, o.mount, o.modalRef, s, !0);
    const a = Qa(this.containers, (i) => i.container === n);
    return a !== -1 ? (this.containers[a].modals.push(o), r) : (this.containers.push({
      modals: [o],
      container: n,
      restore: null,
      hiddenSiblings: s
    }), r);
  }
  mount(o, n) {
    const r = Qa(this.containers, (a) => a.modals.includes(o)), s = this.containers[r];
    s.restore || (s.restore = FT(s, n));
  }
  remove(o, n = !0) {
    const r = this.modals.indexOf(o);
    if (r === -1)
      return r;
    const s = Qa(this.containers, (i) => i.modals.includes(o)), a = this.containers[s];
    if (a.modals.splice(a.modals.indexOf(o), 1), this.modals.splice(r, 1), a.modals.length === 0)
      a.restore && a.restore(), o.modalRef && Cr(o.modalRef, n), hp(a.container, o.mount, o.modalRef, a.hiddenSiblings, !1), this.containers.splice(s, 1);
    else {
      const i = a.modals[a.modals.length - 1];
      i.modalRef && Cr(i.modalRef, !1);
    }
    return r;
  }
  isTopModal(o) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === o;
  }
}
const WT = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
function UT(e) {
  const o = parseInt(e.getAttribute("tabindex") || "", 10);
  return Number.isNaN(o) ? e.contentEditable === "true" || (e.nodeName === "AUDIO" || e.nodeName === "VIDEO" || e.nodeName === "DETAILS") && e.getAttribute("tabindex") === null ? 0 : e.tabIndex : o;
}
function HT(e) {
  if (e.tagName !== "INPUT" || e.type !== "radio" || !e.name)
    return !1;
  const o = (r) => e.ownerDocument.querySelector(`input[type="radio"]${r}`);
  let n = o(`[name="${e.name}"]:checked`);
  return n || (n = o(`[name="${e.name}"]`)), n !== e;
}
function GT(e) {
  return !(e.disabled || e.tagName === "INPUT" && e.type === "hidden" || HT(e));
}
function qT(e) {
  const o = [], n = [];
  return Array.from(e.querySelectorAll(WT)).forEach((r, s) => {
    const a = UT(r);
    a === -1 || !GT(r) || (a === 0 ? o.push(r) : n.push({
      documentOrder: s,
      tabIndex: a,
      node: r
    }));
  }), n.sort((r, s) => r.tabIndex === s.tabIndex ? r.documentOrder - s.documentOrder : r.tabIndex - s.tabIndex).map((r) => r.node).concat(o);
}
function YT() {
  return !0;
}
function Zs(e) {
  const {
    children: o,
    disableAutoFocus: n = !1,
    disableEnforceFocus: r = !1,
    disableRestoreFocus: s = !1,
    getTabbable: a = qT,
    isEnabled: i = YT,
    open: l
  } = e, c = m.useRef(!1), p = m.useRef(null), u = m.useRef(null), f = m.useRef(null), g = m.useRef(null), b = m.useRef(!1), h = m.useRef(null), d = Ye(Vo(o), h), y = m.useRef(null);
  m.useEffect(() => {
    !l || !h.current || (b.current = !n);
  }, [n, l]), m.useEffect(() => {
    if (!l || !h.current)
      return;
    const C = lt(h.current);
    return h.current.contains(C.activeElement) || (h.current.hasAttribute("tabIndex") || (process.env.NODE_ENV !== "production" && console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join(`
`)), h.current.setAttribute("tabIndex", "-1")), b.current && h.current.focus()), () => {
      s || (f.current && f.current.focus && (c.current = !0, f.current.focus()), f.current = null);
    };
  }, [l]), m.useEffect(() => {
    if (!l || !h.current)
      return;
    const C = lt(h.current), T = ($) => {
      y.current = $, !(r || !i() || $.key !== "Tab") && C.activeElement === h.current && $.shiftKey && (c.current = !0, u.current && u.current.focus());
    }, w = () => {
      var N, v;
      const $ = h.current;
      if ($ === null)
        return;
      if (!C.hasFocus() || !i() || c.current) {
        c.current = !1;
        return;
      }
      if ($.contains(C.activeElement) || r && C.activeElement !== p.current && C.activeElement !== u.current)
        return;
      if (C.activeElement !== g.current)
        g.current = null;
      else if (g.current !== null)
        return;
      if (!b.current)
        return;
      let P = [];
      if ((C.activeElement === p.current || C.activeElement === u.current) && (P = a(h.current)), P.length > 0) {
        const R = !!((N = y.current) != null && N.shiftKey && ((v = y.current) == null ? void 0 : v.key) === "Tab"), A = P[0], j = P[P.length - 1];
        typeof A != "string" && typeof j != "string" && (R ? j.focus() : A.focus());
      } else
        $.focus();
    };
    C.addEventListener("focusin", w), C.addEventListener("keydown", T, !0);
    const E = setInterval(() => {
      C.activeElement && C.activeElement.tagName === "BODY" && w();
    }, 50);
    return () => {
      clearInterval(E), C.removeEventListener("focusin", w), C.removeEventListener("keydown", T, !0);
    };
  }, [n, r, s, i, l, a]);
  const S = (C) => {
    f.current === null && (f.current = C.relatedTarget), b.current = !0, g.current = C.target;
    const T = o.props.onFocus;
    T && T(C);
  }, O = (C) => {
    f.current === null && (f.current = C.relatedTarget), b.current = !0;
  };
  return /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ x.jsx("div", {
      tabIndex: l ? 0 : -1,
      onFocus: O,
      ref: p,
      "data-testid": "sentinelStart"
    }), /* @__PURE__ */ m.cloneElement(o, {
      ref: d,
      onFocus: S
    }), /* @__PURE__ */ x.jsx("div", {
      tabIndex: l ? 0 : -1,
      onFocus: O,
      ref: u,
      "data-testid": "sentinelEnd"
    })]
  });
}
process.env.NODE_ENV !== "production" && (Zs.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  children: Fo,
  /**
   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: t.bool,
  /**
   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: t.bool,
  /**
   * If `true`, the focus trap will not restore focus to previously focused element once
   * focus trap is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: t.bool,
  /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */
  getTabbable: t.func,
  /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple focus trap mounted at the same time.
   * @default function defaultIsEnabled(): boolean {
   *   return true;
   * }
   */
  isEnabled: t.func,
  /**
   * If `true`, focus is locked.
   */
  open: t.bool.isRequired
});
process.env.NODE_ENV !== "production" && (Zs.propTypes = Cn(Zs.propTypes));
function KT(e) {
  return typeof e == "function" ? e() : e;
}
function XT(e) {
  return e ? e.props.hasOwnProperty("in") : !1;
}
const yp = () => {
}, us = new _T();
function JT(e) {
  const {
    container: o,
    disableEscapeKeyDown: n = !1,
    disableScrollLock: r = !1,
    closeAfterTransition: s = !1,
    onTransitionEnter: a,
    onTransitionExited: i,
    children: l,
    onClose: c,
    open: p,
    rootRef: u
  } = e, f = m.useRef({}), g = m.useRef(null), b = m.useRef(null), h = Ye(b, u), [d, y] = m.useState(!p), S = XT(l);
  let O = !0;
  (e["aria-hidden"] === "false" || e["aria-hidden"] === !1) && (O = !1);
  const C = () => lt(g.current), T = () => (f.current.modalRef = b.current, f.current.mount = g.current, f.current), w = () => {
    us.mount(T(), {
      disableScrollLock: r
    }), b.current && (b.current.scrollTop = 0);
  }, E = pt(() => {
    const D = KT(o) || C().body;
    us.add(T(), D), b.current && w();
  }), $ = () => us.isTopModal(T()), P = pt((D) => {
    g.current = D, D && (p && $() ? w() : b.current && Cr(b.current, O));
  }), N = m.useCallback(() => {
    us.remove(T(), O);
  }, [O]);
  m.useEffect(() => () => {
    N();
  }, [N]), m.useEffect(() => {
    p ? E() : (!S || !s) && N();
  }, [p, N, S, s, E]);
  const v = (D) => (B) => {
    var _;
    (_ = D.onKeyDown) == null || _.call(D, B), !(B.key !== "Escape" || B.which === 229 || // Wait until IME is settled.
    !$()) && (n || (B.stopPropagation(), c && c(B, "escapeKeyDown")));
  }, R = (D) => (B) => {
    var _;
    (_ = D.onClick) == null || _.call(D, B), B.target === B.currentTarget && c && c(B, "backdropClick");
  };
  return {
    getRootProps: (D = {}) => {
      const B = vn(e);
      delete B.onTransitionEnter, delete B.onTransitionExited;
      const _ = {
        ...B,
        ...D
      };
      return {
        /*
         * Marking an element with the role presentation indicates to assistive technology
         * that this element should be ignored; it exists to support the web application and
         * is not meant for humans to interact with directly.
         * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md
         */
        role: "presentation",
        ..._,
        onKeyDown: v(_),
        ref: h
      };
    },
    getBackdropProps: (D = {}) => {
      const B = D;
      return {
        "aria-hidden": !0,
        ...B,
        onClick: R(B),
        open: p
      };
    },
    getTransitionProps: () => {
      const D = () => {
        y(!1), a && a();
      }, B = () => {
        y(!0), i && i(), s && N();
      };
      return {
        onEnter: yi(D, (l == null ? void 0 : l.props.onEnter) ?? yp),
        onExited: yi(B, (l == null ? void 0 : l.props.onExited) ?? yp)
      };
    },
    rootRef: h,
    portalRef: P,
    isTopModal: $,
    exited: d,
    hasTransition: S
  };
}
function ZT(e) {
  return ae("MuiModal", e);
}
const UP = le("MuiModal", ["root", "hidden", "backdrop"]), QT = (e) => {
  const {
    open: o,
    exited: n,
    classes: r
  } = e;
  return ce({
    root: ["root", !o && n && "hidden"],
    backdrop: ["backdrop"]
  }, ZT, r);
}, eC = M("div", {
  name: "MuiModal",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.open && n.exited && o.hidden];
  }
})(Q(({
  theme: e
}) => ({
  position: "fixed",
  zIndex: (e.vars || e).zIndex.modal,
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  variants: [{
    props: ({
      ownerState: o
    }) => !o.open && o.exited,
    style: {
      visibility: "hidden"
    }
  }]
}))), tC = M(Tl, {
  name: "MuiModal",
  slot: "Backdrop",
  overridesResolver: (e, o) => o.backdrop
})({
  zIndex: -1
}), ka = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    name: "MuiModal",
    props: o
  }), {
    BackdropComponent: s = tC,
    BackdropProps: a,
    classes: i,
    className: l,
    closeAfterTransition: c = !1,
    children: p,
    container: u,
    component: f,
    components: g = {},
    componentsProps: b = {},
    disableAutoFocus: h = !1,
    disableEnforceFocus: d = !1,
    disableEscapeKeyDown: y = !1,
    disablePortal: S = !1,
    disableRestoreFocus: O = !1,
    disableScrollLock: C = !1,
    hideBackdrop: T = !1,
    keepMounted: w = !1,
    onBackdropClick: E,
    onClose: $,
    onTransitionEnter: P,
    onTransitionExited: N,
    open: v,
    slotProps: R = {},
    slots: A = {},
    // eslint-disable-next-line react/prop-types
    theme: j,
    ...k
  } = r, D = {
    ...r,
    closeAfterTransition: c,
    disableAutoFocus: h,
    disableEnforceFocus: d,
    disableEscapeKeyDown: y,
    disablePortal: S,
    disableRestoreFocus: O,
    disableScrollLock: C,
    hideBackdrop: T,
    keepMounted: w
  }, {
    getRootProps: B,
    getBackdropProps: _,
    getTransitionProps: H,
    portalRef: U,
    isTopModal: F,
    exited: V,
    hasTransition: me
  } = JT({
    ...D,
    rootRef: n
  }), G = {
    ...D,
    exited: V
  }, X = QT(G), Y = {};
  if (p.props.tabIndex === void 0 && (Y.tabIndex = "-1"), me) {
    const {
      onEnter: z,
      onExited: be
    } = H();
    Y.onEnter = z, Y.onExited = be;
  }
  const q = {
    ...k,
    slots: {
      root: g.Root,
      backdrop: g.Backdrop,
      ...A
    },
    slotProps: {
      ...b,
      ...R
    }
  }, [ie, K] = je("root", {
    elementType: eC,
    externalForwardedProps: q,
    getSlotProps: B,
    additionalProps: {
      ref: n,
      as: f
    },
    ownerState: G,
    className: W(l, X == null ? void 0 : X.root, !G.open && G.exited && (X == null ? void 0 : X.hidden))
  }), [de, oe] = je("backdrop", {
    elementType: s,
    externalForwardedProps: q,
    additionalProps: a,
    getSlotProps: (z) => _({
      ...z,
      onClick: (be) => {
        E && E(be), z != null && z.onClick && z.onClick(be);
      }
    }),
    className: W(a == null ? void 0 : a.className, X == null ? void 0 : X.backdrop),
    ownerState: G
  }), he = Ye(a == null ? void 0 : a.ref, oe.ref);
  return !w && !v && (!me || V) ? null : /* @__PURE__ */ x.jsx(Mr, {
    ref: U,
    container: u,
    disablePortal: S,
    children: /* @__PURE__ */ x.jsxs(ie, {
      ...K,
      children: [!T && s ? /* @__PURE__ */ x.jsx(de, {
        ...oe,
        ref: he
      }) : null, /* @__PURE__ */ x.jsx(Zs, {
        disableEnforceFocus: d,
        disableAutoFocus: h,
        disableRestoreFocus: O,
        isEnabled: F,
        open: v,
        children: /* @__PURE__ */ m.cloneElement(p, Y)
      })]
    })
  });
});
process.env.NODE_ENV !== "production" && (ka.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: t.elementType,
  /**
   * Props applied to the [`Backdrop`](https://mui.com/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead.
   */
  BackdropProps: t.object,
  /**
   * A single child content element.
   */
  children: Fo.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */
  closeAfterTransition: t.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Backdrop: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    backdrop: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([$o, t.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: t.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: t.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: t.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: t.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: t.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: t.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */
  keepMounted: t.bool,
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: t.func,
  /**
   * A function called when a transition enters.
   */
  onTransitionEnter: t.func,
  /**
   * A function called when a transition has exited.
   */
  onTransitionExited: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * The props used for each slot inside the Modal.
   * @default {}
   */
  slotProps: t.shape({
    backdrop: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    backdrop: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function oC(e) {
  return ae("MuiDialog", e);
}
const ei = le("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]), Ol = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (Ol.displayName = "DialogContext");
const nC = M(Tl, {
  name: "MuiDialog",
  slot: "Backdrop",
  overrides: (e, o) => o.backdrop
})({
  // Improve scrollable dialog support.
  zIndex: -1
}), rC = (e) => {
  const {
    classes: o,
    scroll: n,
    maxWidth: r,
    fullWidth: s,
    fullScreen: a
  } = e, i = {
    root: ["root"],
    container: ["container", `scroll${L(n)}`],
    paper: ["paper", `paperScroll${L(n)}`, `paperWidth${L(String(r))}`, s && "paperFullWidth", a && "paperFullScreen"]
  };
  return ce(i, oC, o);
}, sC = M(ka, {
  name: "MuiDialog",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  "@media print": {
    // Use !important to override the Modal inline-style.
    position: "absolute !important"
  }
}), aC = M("div", {
  name: "MuiDialog",
  slot: "Container",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.container, o[`scroll${L(n.scroll)}`]];
  }
})({
  height: "100%",
  "@media print": {
    height: "auto"
  },
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  variants: [{
    props: {
      scroll: "paper"
    },
    style: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    }
  }, {
    props: {
      scroll: "body"
    },
    style: {
      overflowY: "auto",
      overflowX: "hidden",
      textAlign: "center",
      "&::after": {
        content: '""',
        display: "inline-block",
        verticalAlign: "middle",
        height: "100%",
        width: "0"
      }
    }
  }]
}), iC = M(Qt, {
  name: "MuiDialog",
  slot: "Paper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.paper, o[`scrollPaper${L(n.scroll)}`], o[`paperWidth${L(String(n.maxWidth))}`], n.fullWidth && o.paperFullWidth, n.fullScreen && o.paperFullScreen];
  }
})(Q(({
  theme: e
}) => ({
  margin: 32,
  position: "relative",
  overflowY: "auto",
  "@media print": {
    overflowY: "visible",
    boxShadow: "none"
  },
  variants: [{
    props: {
      scroll: "paper"
    },
    style: {
      display: "flex",
      flexDirection: "column",
      maxHeight: "calc(100% - 64px)"
    }
  }, {
    props: {
      scroll: "body"
    },
    style: {
      display: "inline-block",
      verticalAlign: "middle",
      textAlign: "initial"
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.maxWidth,
    style: {
      maxWidth: "calc(100% - 64px)"
    }
  }, {
    props: {
      maxWidth: "xs"
    },
    style: {
      maxWidth: e.breakpoints.unit === "px" ? Math.max(e.breakpoints.values.xs, 444) : `max(${e.breakpoints.values.xs}${e.breakpoints.unit}, 444px)`,
      [`&.${ei.paperScrollBody}`]: {
        [e.breakpoints.down(Math.max(e.breakpoints.values.xs, 444) + 32 * 2)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }
  }, ...Object.keys(e.breakpoints.values).filter((o) => o !== "xs").map((o) => ({
    props: {
      maxWidth: o
    },
    style: {
      maxWidth: `${e.breakpoints.values[o]}${e.breakpoints.unit}`,
      [`&.${ei.paperScrollBody}`]: {
        [e.breakpoints.down(e.breakpoints.values[o] + 32 * 2)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }
  })), {
    props: ({
      ownerState: o
    }) => o.fullWidth,
    style: {
      width: "calc(100% - 64px)"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.fullScreen,
    style: {
      margin: 0,
      width: "100%",
      maxWidth: "100%",
      height: "100%",
      maxHeight: "none",
      borderRadius: 0,
      [`&.${ei.paperScrollBody}`]: {
        margin: 0,
        maxWidth: "100%"
      }
    }
  }]
}))), lC = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiDialog"
  }), s = Ot(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    "aria-describedby": i,
    "aria-labelledby": l,
    "aria-modal": c = !0,
    BackdropComponent: p,
    BackdropProps: u,
    children: f,
    className: g,
    disableEscapeKeyDown: b = !1,
    fullScreen: h = !1,
    fullWidth: d = !1,
    maxWidth: y = "sm",
    onBackdropClick: S,
    onClick: O,
    onClose: C,
    open: T,
    PaperComponent: w = Qt,
    PaperProps: E = {},
    scroll: $ = "paper",
    slots: P = {},
    slotProps: N = {},
    TransitionComponent: v = Ks,
    transitionDuration: R = a,
    TransitionProps: A,
    ...j
  } = r, k = {
    ...r,
    disableEscapeKeyDown: b,
    fullScreen: h,
    fullWidth: d,
    maxWidth: y,
    scroll: $
  }, D = rC(k), B = m.useRef(), _ = (ye) => {
    B.current = ye.target === ye.currentTarget;
  }, H = (ye) => {
    O && O(ye), B.current && (B.current = null, S && S(ye), C && C(ye, "backdropClick"));
  }, U = io(l), F = m.useMemo(() => ({
    titleId: U
  }), [U]), V = {
    transition: v,
    ...P
  }, me = {
    transition: A,
    paper: E,
    backdrop: u,
    ...N
  }, G = {
    slots: V,
    slotProps: me
  }, [X, Y] = je("root", {
    elementType: sC,
    shouldForwardComponentProp: !0,
    externalForwardedProps: G,
    ownerState: k,
    className: W(D.root, g),
    ref: n
  }), [q, ie] = je("backdrop", {
    elementType: nC,
    shouldForwardComponentProp: !0,
    externalForwardedProps: G,
    ownerState: k
  }), [K, de] = je("paper", {
    elementType: iC,
    shouldForwardComponentProp: !0,
    externalForwardedProps: G,
    ownerState: k,
    className: W(D.paper, E.className)
  }), [oe, he] = je("container", {
    elementType: aC,
    externalForwardedProps: G,
    ownerState: k,
    className: W(D.container)
  }), [z, be] = je("transition", {
    elementType: Ks,
    externalForwardedProps: G,
    ownerState: k,
    additionalProps: {
      appear: !0,
      in: T,
      timeout: R,
      role: "presentation"
    }
  });
  return /* @__PURE__ */ x.jsx(X, {
    closeAfterTransition: !0,
    slots: {
      backdrop: q
    },
    slotProps: {
      backdrop: {
        transitionDuration: R,
        as: p,
        ...ie
      }
    },
    disableEscapeKeyDown: b,
    onClose: C,
    open: T,
    onClick: H,
    ...Y,
    ...j,
    children: /* @__PURE__ */ x.jsx(z, {
      ...be,
      children: /* @__PURE__ */ x.jsx(oe, {
        onMouseDown: _,
        ...he,
        children: /* @__PURE__ */ x.jsx(K, {
          as: w,
          elevation: 24,
          role: "dialog",
          "aria-describedby": i,
          "aria-labelledby": U,
          "aria-modal": c,
          ...de,
          children: /* @__PURE__ */ x.jsx(Ol.Provider, {
            value: F,
            children: f
          })
        })
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (lC.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The id(s) of the element(s) that describe the dialog.
   */
  "aria-describedby": t.string,
  /**
   * The id(s) of the element(s) that label the dialog.
   */
  "aria-labelledby": t.string,
  /**
   * Informs assistive technologies that the element is modal.
   * It's added on the element with role="dialog".
   * @default true
   */
  "aria-modal": t.oneOfType([t.oneOf(["false", "true"]), t.bool]),
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: t.elementType,
  /**
   * @ignore
   */
  BackdropProps: t.object,
  /**
   * Dialog children, usually the included sub-components.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: t.bool,
  /**
   * If `true`, the dialog is full-screen.
   * @default false
   */
  fullScreen: t.bool,
  /**
   * If `true`, the dialog stretches to `maxWidth`.
   *
   * Notice that the dialog width grow is limited by the default margin.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * Determine the max-width of the dialog.
   * The dialog width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'sm'
   */
  maxWidth: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl", !1]), t.string]),
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * The component used to render the body of the dialog.
   * @default Paper
   */
  PaperComponent: t.elementType,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   * @default {}
   * @deprecated Use `slotProps.paper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PaperProps: t.object,
  /**
   * Determine the container for scrolling the dialog.
   * @default 'paper'
   */
  scroll: t.oneOf(["body", "paper"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    backdrop: t.oneOfType([t.func, t.object]),
    container: t.oneOfType([t.func, t.object]),
    paper: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object]),
    transition: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    backdrop: t.elementType,
    container: t.elementType,
    paper: t.elementType,
    root: t.elementType,
    transition: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   * @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionProps: t.object
});
function cC(e) {
  return ae("MuiDialogActions", e);
}
const HP = le("MuiDialogActions", ["root", "spacing"]), pC = (e) => {
  const {
    classes: o,
    disableSpacing: n
  } = e;
  return ce({
    root: ["root", !n && "spacing"]
  }, cC, o);
}, uC = M("div", {
  name: "MuiDialogActions",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableSpacing && o.spacing];
  }
})({
  display: "flex",
  alignItems: "center",
  padding: 8,
  justifyContent: "flex-end",
  flex: "0 0 auto",
  variants: [{
    props: ({
      ownerState: e
    }) => !e.disableSpacing,
    style: {
      "& > :not(style) ~ :not(style)": {
        marginLeft: 8
      }
    }
  }]
}), dC = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiDialogActions"
  }), {
    className: s,
    disableSpacing: a = !1,
    ...i
  } = r, l = {
    ...r,
    disableSpacing: a
  }, c = pC(l);
  return /* @__PURE__ */ x.jsx(uC, {
    className: W(c.root, s),
    ownerState: l,
    ref: n,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (dC.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function fC(e) {
  return ae("MuiDialogContent", e);
}
const GP = le("MuiDialogContent", ["root", "dividers"]);
function mC(e) {
  return ae("MuiDialogTitle", e);
}
const gC = le("MuiDialogTitle", ["root"]), bC = (e) => {
  const {
    classes: o,
    dividers: n
  } = e;
  return ce({
    root: ["root", n && "dividers"]
  }, fC, o);
}, hC = M("div", {
  name: "MuiDialogContent",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.dividers && o.dividers];
  }
})(Q(({
  theme: e
}) => ({
  flex: "1 1 auto",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  overflowY: "auto",
  padding: "20px 24px",
  variants: [{
    props: ({
      ownerState: o
    }) => o.dividers,
    style: {
      padding: "16px 24px",
      borderTop: `1px solid ${(e.vars || e).palette.divider}`,
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.dividers,
    style: {
      [`.${gC.root} + &`]: {
        paddingTop: 0
      }
    }
  }]
}))), yC = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiDialogContent"
  }), {
    className: s,
    dividers: a = !1,
    ...i
  } = r, l = {
    ...r,
    dividers: a
  }, c = bC(l);
  return /* @__PURE__ */ x.jsx(hC, {
    className: W(c.root, s),
    ownerState: l,
    ref: n,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (yC.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Display the top and bottom dividers.
   * @default false
   */
  dividers: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function vC(e) {
  return ae("MuiDialogContentText", e);
}
const qP = le("MuiDialogContentText", ["root"]), xC = (e) => {
  const {
    classes: o
  } = e, r = ce({
    root: ["root"]
  }, vC, o);
  return {
    ...o,
    // forward classes to the Typography
    ...r
  };
}, SC = M(kt, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiDialogContentText",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), TC = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiDialogContentText"
  }), {
    children: s,
    className: a,
    ...i
  } = r, l = xC(i);
  return /* @__PURE__ */ x.jsx(SC, {
    component: "p",
    variant: "body1",
    color: "textSecondary",
    ref: n,
    ownerState: i,
    className: W(l.root, a),
    ...r,
    classes: l
  });
});
process.env.NODE_ENV !== "production" && (TC.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const CC = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, mC, o);
}, wC = M(kt, {
  name: "MuiDialogTitle",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  padding: "16px 24px",
  flex: "0 0 auto"
}), OC = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiDialogTitle"
  }), {
    className: s,
    id: a,
    ...i
  } = r, l = r, c = CC(l), {
    titleId: p = a
  } = m.useContext(Ol);
  return /* @__PURE__ */ x.jsx(wC, {
    component: "h2",
    className: W(c.root, s),
    ownerState: l,
    ref: n,
    variant: "h6",
    id: a ?? p,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (OC.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  id: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function EC(e) {
  return ae("MuiDivider", e);
}
const vp = le("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]), RC = (e) => {
  const {
    absolute: o,
    children: n,
    classes: r,
    flexItem: s,
    light: a,
    orientation: i,
    textAlign: l,
    variant: c
  } = e;
  return ce({
    root: ["root", o && "absolute", c, a && "light", i === "vertical" && "vertical", s && "flexItem", n && "withChildren", n && i === "vertical" && "withChildrenVertical", l === "right" && i !== "vertical" && "textAlignRight", l === "left" && i !== "vertical" && "textAlignLeft"],
    wrapper: ["wrapper", i === "vertical" && "wrapperVertical"]
  }, EC, r);
}, $C = M("div", {
  name: "MuiDivider",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.absolute && o.absolute, o[n.variant], n.light && o.light, n.orientation === "vertical" && o.vertical, n.flexItem && o.flexItem, n.children && o.withChildren, n.children && n.orientation === "vertical" && o.withChildrenVertical, n.textAlign === "right" && n.orientation !== "vertical" && o.textAlignRight, n.textAlign === "left" && n.orientation !== "vertical" && o.textAlignLeft];
  }
})(Q(({
  theme: e
}) => ({
  margin: 0,
  // Reset browser default style.
  flexShrink: 0,
  borderWidth: 0,
  borderStyle: "solid",
  borderColor: (e.vars || e).palette.divider,
  borderBottomWidth: "thin",
  variants: [{
    props: {
      absolute: !0
    },
    style: {
      position: "absolute",
      bottom: 0,
      left: 0,
      width: "100%"
    }
  }, {
    props: {
      light: !0
    },
    style: {
      borderColor: e.vars ? `rgba(${e.vars.palette.dividerChannel} / 0.08)` : Ne(e.palette.divider, 0.08)
    }
  }, {
    props: {
      variant: "inset"
    },
    style: {
      marginLeft: 72
    }
  }, {
    props: {
      variant: "middle",
      orientation: "horizontal"
    },
    style: {
      marginLeft: e.spacing(2),
      marginRight: e.spacing(2)
    }
  }, {
    props: {
      variant: "middle",
      orientation: "vertical"
    },
    style: {
      marginTop: e.spacing(1),
      marginBottom: e.spacing(1)
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      height: "100%",
      borderBottomWidth: 0,
      borderRightWidth: "thin"
    }
  }, {
    props: {
      flexItem: !0
    },
    style: {
      alignSelf: "stretch",
      height: "auto"
    }
  }, {
    props: ({
      ownerState: o
    }) => !!o.children,
    style: {
      display: "flex",
      textAlign: "center",
      border: 0,
      borderTopStyle: "solid",
      borderLeftStyle: "solid",
      "&::before, &::after": {
        content: '""',
        alignSelf: "center"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.children && o.orientation !== "vertical",
    style: {
      "&::before, &::after": {
        width: "100%",
        borderTop: `thin solid ${(e.vars || e).palette.divider}`,
        borderTopStyle: "inherit"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.orientation === "vertical" && o.children,
    style: {
      flexDirection: "column",
      "&::before, &::after": {
        height: "100%",
        borderLeft: `thin solid ${(e.vars || e).palette.divider}`,
        borderLeftStyle: "inherit"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.textAlign === "right" && o.orientation !== "vertical",
    style: {
      "&::before": {
        width: "90%"
      },
      "&::after": {
        width: "10%"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.textAlign === "left" && o.orientation !== "vertical",
    style: {
      "&::before": {
        width: "10%"
      },
      "&::after": {
        width: "90%"
      }
    }
  }]
}))), kC = M("span", {
  name: "MuiDivider",
  slot: "Wrapper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.wrapper, n.orientation === "vertical" && o.wrapperVertical];
  }
})(Q(({
  theme: e
}) => ({
  display: "inline-block",
  paddingLeft: `calc(${e.spacing(1)} * 1.2)`,
  paddingRight: `calc(${e.spacing(1)} * 1.2)`,
  whiteSpace: "nowrap",
  variants: [{
    props: {
      orientation: "vertical"
    },
    style: {
      paddingTop: `calc(${e.spacing(1)} * 1.2)`,
      paddingBottom: `calc(${e.spacing(1)} * 1.2)`
    }
  }]
}))), ki = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiDivider"
  }), {
    absolute: s = !1,
    children: a,
    className: i,
    orientation: l = "horizontal",
    component: c = a || l === "vertical" ? "div" : "hr",
    flexItem: p = !1,
    light: u = !1,
    role: f = c !== "hr" ? "separator" : void 0,
    textAlign: g = "center",
    variant: b = "fullWidth",
    ...h
  } = r, d = {
    ...r,
    absolute: s,
    component: c,
    flexItem: p,
    light: u,
    orientation: l,
    role: f,
    textAlign: g,
    variant: b
  }, y = RC(d);
  return /* @__PURE__ */ x.jsx($C, {
    as: c,
    className: W(y.root, i),
    role: f,
    ref: n,
    ownerState: d,
    "aria-orientation": f === "separator" && (c !== "hr" || l === "vertical") ? l : void 0,
    ...h,
    children: a ? /* @__PURE__ */ x.jsx(kC, {
      className: y.wrapper,
      ownerState: d,
      children: a
    }) : null
  });
});
ki && (ki.muiSkipListHighlight = !0);
process.env.NODE_ENV !== "production" && (ki.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Absolutely position the element.
   * @default false
   */
  absolute: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, a vertical divider will have the correct height when used in flex container.
   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
   * @default false
   */
  flexItem: t.bool,
  /**
   * If `true`, the divider will have a lighter color.
   * @default false
   * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  light: t.bool,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The text alignment.
   * @default 'center'
   */
  textAlign: t.oneOf(["center", "left", "right"]),
  /**
   * The variant to use.
   * @default 'fullWidth'
   */
  variant: t.oneOfType([t.oneOf(["fullWidth", "inset", "middle"]), t.string])
});
function PC(e, o, n) {
  const r = o.getBoundingClientRect(), s = n && n.getBoundingClientRect(), a = Pt(o);
  let i;
  if (o.fakeTransform)
    i = o.fakeTransform;
  else {
    const p = a.getComputedStyle(o);
    i = p.getPropertyValue("-webkit-transform") || p.getPropertyValue("transform");
  }
  let l = 0, c = 0;
  if (i && i !== "none" && typeof i == "string") {
    const p = i.split("(")[1].split(")")[0].split(",");
    l = parseInt(p[4], 10), c = parseInt(p[5], 10);
  }
  return e === "left" ? s ? `translateX(${s.right + l - r.left}px)` : `translateX(${a.innerWidth + l - r.left}px)` : e === "right" ? s ? `translateX(-${r.right - s.left - l}px)` : `translateX(-${r.left + r.width - l}px)` : e === "up" ? s ? `translateY(${s.bottom + c - r.top}px)` : `translateY(${a.innerHeight + c - r.top}px)` : s ? `translateY(-${r.top - s.top + r.height - c}px)` : `translateY(-${r.top + r.height - c}px)`;
}
function Bd(e) {
  return typeof e == "function" ? e() : e;
}
function ds(e, o, n) {
  const r = Bd(n), s = PC(e, o, r);
  s && (o.style.webkitTransform = s, o.style.transform = s);
}
const Ld = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = Ot(), s = {
    enter: r.transitions.easing.easeOut,
    exit: r.transitions.easing.sharp
  }, a = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: i,
    appear: l = !0,
    children: c,
    container: p,
    direction: u = "down",
    easing: f = s,
    in: g,
    onEnter: b,
    onEntered: h,
    onEntering: d,
    onExit: y,
    onExited: S,
    onExiting: O,
    style: C,
    timeout: T = a,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: w = Zt,
    ...E
  } = o, $ = m.useRef(null), P = Ye(Vo(c), $, n), N = (H) => (U) => {
    H && (U === void 0 ? H($.current) : H($.current, U));
  }, v = N((H, U) => {
    ds(u, H, p), Sa(H), b && b(H, U);
  }), R = N((H, U) => {
    const F = mo({
      timeout: T,
      style: C,
      easing: f
    }, {
      mode: "enter"
    });
    H.style.webkitTransition = r.transitions.create("-webkit-transform", {
      ...F
    }), H.style.transition = r.transitions.create("transform", {
      ...F
    }), H.style.webkitTransform = "none", H.style.transform = "none", d && d(H, U);
  }), A = N(h), j = N(O), k = N((H) => {
    const U = mo({
      timeout: T,
      style: C,
      easing: f
    }, {
      mode: "exit"
    });
    H.style.webkitTransition = r.transitions.create("-webkit-transform", U), H.style.transition = r.transitions.create("transform", U), ds(u, H, p), y && y(H);
  }), D = N((H) => {
    H.style.webkitTransition = "", H.style.transition = "", S && S(H);
  }), B = (H) => {
    i && i($.current, H);
  }, _ = m.useCallback(() => {
    $.current && ds(u, $.current, p);
  }, [u, p]);
  return m.useEffect(() => {
    if (g || u === "down" || u === "right")
      return;
    const H = Wr(() => {
      $.current && ds(u, $.current, p);
    }), U = Pt($.current);
    return U.addEventListener("resize", H), () => {
      H.clear(), U.removeEventListener("resize", H);
    };
  }, [u, g, p]), m.useEffect(() => {
    g || _();
  }, [g, _]), /* @__PURE__ */ x.jsx(w, {
    nodeRef: $,
    onEnter: v,
    onEntered: A,
    onEntering: R,
    onExit: k,
    onExited: D,
    onExiting: j,
    addEndListener: B,
    appear: l,
    in: g,
    timeout: T,
    ...E,
    children: (H, {
      ownerState: U,
      ...F
    }) => /* @__PURE__ */ m.cloneElement(c, {
      ref: P,
      style: {
        visibility: H === "exited" && !g ? "hidden" : void 0,
        ...C,
        ...c.props.style
      },
      ...F
    })
  });
});
process.env.NODE_ENV !== "production" && (Ld.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: Fo.isRequired,
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the container the Slide is transitioning from.
   */
  container: xt(t.oneOfType([$o, t.func]), (e) => {
    if (e.open) {
      const o = Bd(e.container);
      if (o && o.nodeType === 1) {
        const n = o.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else if (!o || typeof o.getBoundingClientRect != "function" || o.contextElement != null && o.contextElement.nodeType !== 1)
        return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join(`
`));
    }
    return null;
  }),
  /**
   * Direction the child node will enter from.
   * @default 'down'
   */
  direction: t.oneOf(["down", "left", "right", "up"]),
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   * @default {
   *   enter: theme.transitions.easing.easeOut,
   *   exit: theme.transitions.easing.sharp,
   * }
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
function NC(e) {
  return ae("MuiDrawer", e);
}
const YP = le("MuiDrawer", ["root", "docked", "paper", "anchorLeft", "anchorRight", "anchorTop", "anchorBottom", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]), Dd = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, (n.variant === "permanent" || n.variant === "persistent") && o.docked, o.modal];
}, IC = (e) => {
  const {
    classes: o,
    anchor: n,
    variant: r
  } = e, s = {
    root: ["root", `anchor${L(n)}`],
    docked: [(r === "permanent" || r === "persistent") && "docked"],
    modal: ["modal"],
    paper: ["paper", `paperAnchor${L(n)}`, r !== "temporary" && `paperAnchorDocked${L(n)}`]
  };
  return ce(s, NC, o);
}, jC = M(ka, {
  name: "MuiDrawer",
  slot: "Root",
  overridesResolver: Dd
})(Q(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.drawer
}))), xp = M("div", {
  shouldForwardProp: bt,
  name: "MuiDrawer",
  slot: "Docked",
  skipVariantsResolver: !1,
  overridesResolver: Dd
})({
  flex: "0 0 auto"
}), MC = M(Qt, {
  name: "MuiDrawer",
  slot: "Paper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.paper, o[`paperAnchor${L(n.anchor)}`], n.variant !== "temporary" && o[`paperAnchorDocked${L(n.anchor)}`]];
  }
})(Q(({
  theme: e
}) => ({
  overflowY: "auto",
  display: "flex",
  flexDirection: "column",
  height: "100%",
  flex: "1 0 auto",
  zIndex: (e.vars || e).zIndex.drawer,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  // temporary style
  position: "fixed",
  top: 0,
  // We disable the focus ring for mouse, touch and keyboard users.
  // At some point, it would be better to keep it for keyboard users.
  // :focus-ring CSS pseudo-class will help.
  outline: 0,
  variants: [{
    props: {
      anchor: "left"
    },
    style: {
      left: 0
    }
  }, {
    props: {
      anchor: "top"
    },
    style: {
      top: 0,
      left: 0,
      right: 0,
      height: "auto",
      maxHeight: "100%"
    }
  }, {
    props: {
      anchor: "right"
    },
    style: {
      right: 0
    }
  }, {
    props: {
      anchor: "bottom"
    },
    style: {
      top: "auto",
      left: 0,
      bottom: 0,
      right: 0,
      height: "auto",
      maxHeight: "100%"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchor === "left" && o.variant !== "temporary",
    style: {
      borderRight: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchor === "top" && o.variant !== "temporary",
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchor === "right" && o.variant !== "temporary",
    style: {
      borderLeft: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchor === "bottom" && o.variant !== "temporary",
    style: {
      borderTop: `1px solid ${(e.vars || e).palette.divider}`
    }
  }]
}))), zd = {
  left: "right",
  right: "left",
  top: "down",
  bottom: "up"
};
function gn(e) {
  return ["left", "right"].includes(e);
}
function yr({
  direction: e
}, o) {
  return e === "rtl" && gn(o) ? zd[o] : o;
}
const Fd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiDrawer"
  }), s = Ot(), a = go(), i = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    anchor: l = "left",
    BackdropProps: c,
    children: p,
    className: u,
    elevation: f = 16,
    hideBackdrop: g = !1,
    ModalProps: {
      BackdropProps: b,
      ...h
    } = {},
    onClose: d,
    open: y = !1,
    PaperProps: S = {},
    SlideProps: O,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: C = Ld,
    transitionDuration: T = i,
    variant: w = "temporary",
    ...E
  } = r, $ = m.useRef(!1);
  m.useEffect(() => {
    $.current = !0;
  }, []);
  const P = yr({
    direction: a ? "rtl" : "ltr"
  }, l), v = {
    ...r,
    anchor: l,
    elevation: f,
    open: y,
    variant: w,
    ...E
  }, R = IC(v), A = /* @__PURE__ */ x.jsx(MC, {
    elevation: w === "temporary" ? f : 0,
    square: !0,
    ...S,
    className: W(R.paper, S.className),
    ownerState: v,
    children: p
  });
  if (w === "permanent")
    return /* @__PURE__ */ x.jsx(xp, {
      className: W(R.root, R.docked, u),
      ownerState: v,
      ref: n,
      ...E,
      children: A
    });
  const j = /* @__PURE__ */ x.jsx(C, {
    in: y,
    direction: zd[P],
    timeout: T,
    appear: $.current,
    ...O,
    children: A
  });
  return w === "persistent" ? /* @__PURE__ */ x.jsx(xp, {
    className: W(R.root, R.docked, u),
    ownerState: v,
    ref: n,
    ...E,
    children: j
  }) : /* @__PURE__ */ x.jsx(jC, {
    BackdropProps: {
      ...c,
      ...b,
      transitionDuration: T
    },
    className: W(R.root, R.modal, u),
    open: y,
    ownerState: v,
    onClose: d,
    hideBackdrop: g,
    ref: n,
    ...E,
    ...h,
    children: j
  });
});
process.env.NODE_ENV !== "production" && (Fd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Side from which the drawer will appear.
   * @default 'left'
   */
  anchor: t.oneOf(["bottom", "left", "right", "top"]),
  /**
   * @ignore
   */
  BackdropProps: t.object,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The elevation of the drawer.
   * @default 16
   */
  elevation: mt,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: t.bool,
  /**
   * Props applied to the [`Modal`](https://mui.com/material-ui/api/modal/) element.
   * @default {}
   */
  ModalProps: t.object,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   * @default false
   */
  open: t.bool,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   * @default {}
   */
  PaperProps: t.object,
  /**
   * Props applied to the [`Slide`](https://mui.com/material-ui/api/slide/) element.
   */
  SlideProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * The variant to use.
   * @default 'temporary'
   */
  variant: t.oneOf(["permanent", "persistent", "temporary"])
});
function AC(e) {
  return ae("MuiFab", e);
}
const Sp = le("MuiFab", ["root", "primary", "secondary", "extended", "circular", "focusVisible", "disabled", "colorInherit", "sizeSmall", "sizeMedium", "sizeLarge", "info", "error", "warning", "success"]), BC = (e) => {
  const {
    color: o,
    variant: n,
    classes: r,
    size: s
  } = e, a = {
    root: ["root", n, `size${L(s)}`, o === "inherit" ? "colorInherit" : o]
  }, i = ce(a, AC, r);
  return {
    ...r,
    // forward the focused, disabled, etc. classes to the ButtonBase
    ...i
  };
}, LC = M(wt, {
  name: "MuiFab",
  slot: "Root",
  shouldForwardProp: (e) => bt(e) || e === "classes",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`size${L(n.size)}`], n.color === "inherit" && o.colorInherit, o[L(n.size)], o[n.color]];
  }
})(Q(({
  theme: e
}) => {
  var o, n;
  return {
    ...e.typography.button,
    minHeight: 36,
    transition: e.transitions.create(["background-color", "box-shadow", "border-color"], {
      duration: e.transitions.duration.short
    }),
    borderRadius: "50%",
    padding: 0,
    minWidth: 0,
    width: 56,
    height: 56,
    zIndex: (e.vars || e).zIndex.fab,
    boxShadow: (e.vars || e).shadows[6],
    "&:active": {
      boxShadow: (e.vars || e).shadows[12]
    },
    color: e.vars ? e.vars.palette.text.primary : (n = (o = e.palette).getContrastText) == null ? void 0 : n.call(o, e.palette.grey[300]),
    backgroundColor: (e.vars || e).palette.grey[300],
    "&:hover": {
      backgroundColor: (e.vars || e).palette.grey.A100,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (e.vars || e).palette.grey[300]
      },
      textDecoration: "none"
    },
    [`&.${Sp.focusVisible}`]: {
      boxShadow: (e.vars || e).shadows[6]
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        width: 40,
        height: 40
      }
    }, {
      props: {
        size: "medium"
      },
      style: {
        width: 48,
        height: 48
      }
    }, {
      props: {
        variant: "extended"
      },
      style: {
        borderRadius: 48 / 2,
        padding: "0 16px",
        width: "auto",
        minHeight: "auto",
        minWidth: 48,
        height: 48
      }
    }, {
      props: {
        variant: "extended",
        size: "small"
      },
      style: {
        width: "auto",
        padding: "0 8px",
        borderRadius: 34 / 2,
        minWidth: 34,
        height: 34
      }
    }, {
      props: {
        variant: "extended",
        size: "medium"
      },
      style: {
        width: "auto",
        padding: "0 16px",
        borderRadius: 40 / 2,
        minWidth: 40,
        height: 40
      }
    }, {
      props: {
        color: "inherit"
      },
      style: {
        color: "inherit"
      }
    }]
  };
}), Q(({
  theme: e
}) => ({
  variants: [...Object.entries(e.palette).filter(Ue(["dark", "contrastText"])).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      color: (e.vars || e).palette[o].contrastText,
      backgroundColor: (e.vars || e).palette[o].main,
      "&:hover": {
        backgroundColor: (e.vars || e).palette[o].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (e.vars || e).palette[o].main
        }
      }
    }
  }))]
})), Q(({
  theme: e
}) => ({
  [`&.${Sp.disabled}`]: {
    color: (e.vars || e).palette.action.disabled,
    boxShadow: (e.vars || e).shadows[0],
    backgroundColor: (e.vars || e).palette.action.disabledBackground
  }
}))), El = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiFab"
  }), {
    children: s,
    className: a,
    color: i = "default",
    component: l = "button",
    disabled: c = !1,
    disableFocusRipple: p = !1,
    focusVisibleClassName: u,
    size: f = "large",
    variant: g = "circular",
    ...b
  } = r, h = {
    ...r,
    color: i,
    component: l,
    disabled: c,
    disableFocusRipple: p,
    size: f,
    variant: g
  }, d = BC(h);
  return /* @__PURE__ */ x.jsx(LC, {
    className: W(d.root, a),
    component: l,
    disabled: c,
    focusRipple: !p,
    focusVisibleClassName: W(d.focusVisible, u),
    ownerState: h,
    ref: n,
    ...b,
    classes: d,
    children: s
  });
});
process.env.NODE_ENV !== "production" && (El.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["default", "error", "info", "inherit", "primary", "secondary", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   */
  disableRipple: t.bool,
  /**
   * @ignore
   */
  focusVisibleClassName: t.string,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: t.string,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'large'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'circular'
   */
  variant: t.oneOfType([t.oneOf(["circular", "extended"]), t.string])
});
const DC = (e) => {
  const {
    classes: o,
    disableUnderline: n,
    startAdornment: r,
    endAdornment: s,
    size: a,
    hiddenLabel: i,
    multiline: l
  } = e, c = {
    root: ["root", !n && "underline", r && "adornedStart", s && "adornedEnd", a === "small" && `size${L(a)}`, i && "hiddenLabel", l && "multiline"],
    input: ["input"]
  }, p = ce(c, Cx, o);
  return {
    ...o,
    // forward classes to the InputBase
    ...p
  };
}, zC = M(Ea, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiFilledInput",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [...wa(e, o), !n.disableUnderline && o.underline];
  }
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light", n = o ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)", r = o ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)", s = o ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)", a = o ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
  return {
    position: "relative",
    backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r,
    borderTopLeftRadius: (e.vars || e).shape.borderRadius,
    borderTopRightRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create("background-color", {
      duration: e.transitions.duration.shorter,
      easing: e.transitions.easing.easeOut
    }),
    "&:hover": {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.hoverBg : s,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
      }
    },
    [`&.${Gt.focused}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
    },
    [`&.${Gt.disabled}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.disabledBg : a
    },
    variants: [{
      props: ({
        ownerState: i
      }) => !i.disableUnderline,
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${Gt.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${Gt.error}`]: {
          "&::before, &::after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})` : n}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${Gt.disabled}, .${Gt.error}):before`]: {
          borderBottom: `1px solid ${(e.vars || e).palette.text.primary}`
        },
        [`&.${Gt.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }, ...Object.entries(e.palette).filter(Ue()).map(([i]) => {
      var l;
      return {
        props: {
          disableUnderline: !1,
          color: i
        },
        style: {
          "&::after": {
            borderBottom: `2px solid ${(l = (e.vars || e).palette[i]) == null ? void 0 : l.main}`
          }
        }
      };
    }), {
      props: ({
        ownerState: i
      }) => i.startAdornment,
      style: {
        paddingLeft: 12
      }
    }, {
      props: ({
        ownerState: i
      }) => i.endAdornment,
      style: {
        paddingRight: 12
      }
    }, {
      props: ({
        ownerState: i
      }) => i.multiline,
      style: {
        padding: "25px 12px 8px"
      }
    }, {
      props: ({
        ownerState: i,
        size: l
      }) => i.multiline && l === "small",
      style: {
        paddingTop: 21,
        paddingBottom: 4
      }
    }, {
      props: ({
        ownerState: i
      }) => i.multiline && i.hiddenLabel,
      style: {
        paddingTop: 16,
        paddingBottom: 17
      }
    }, {
      props: ({
        ownerState: i
      }) => i.multiline && i.hiddenLabel && i.size === "small",
      style: {
        paddingTop: 8,
        paddingBottom: 9
      }
    }]
  };
})), FC = M(Ra, {
  name: "MuiFilledInput",
  slot: "Input",
  overridesResolver: Oa
})(Q(({
  theme: e
}) => ({
  paddingTop: 25,
  paddingRight: 12,
  paddingBottom: 8,
  paddingLeft: 12,
  ...!e.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
      caretColor: e.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  },
  ...e.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [e.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      paddingTop: 21,
      paddingBottom: 4
    }
  }, {
    props: ({
      ownerState: o
    }) => o.hiddenLabel,
    style: {
      paddingTop: 16,
      paddingBottom: 17
    }
  }, {
    props: ({
      ownerState: o
    }) => o.startAdornment,
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      ownerState: o
    }) => o.endAdornment,
    style: {
      paddingRight: 0
    }
  }, {
    props: ({
      ownerState: o
    }) => o.hiddenLabel && o.size === "small",
    style: {
      paddingTop: 8,
      paddingBottom: 9
    }
  }, {
    props: ({
      ownerState: o
    }) => o.multiline,
    style: {
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    }
  }]
}))), Pa = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiFilledInput"
  }), {
    disableUnderline: s = !1,
    components: a = {},
    componentsProps: i,
    fullWidth: l = !1,
    hiddenLabel: c,
    // declare here to prevent spreading to DOM
    inputComponent: p = "input",
    multiline: u = !1,
    slotProps: f,
    slots: g = {},
    type: b = "text",
    ...h
  } = r, d = {
    ...r,
    disableUnderline: s,
    fullWidth: l,
    inputComponent: p,
    multiline: u,
    type: b
  }, y = DC(r), S = {
    root: {
      ownerState: d
    },
    input: {
      ownerState: d
    }
  }, O = f ?? i ? Ct(S, f ?? i) : S, C = g.root ?? a.Root ?? zC, T = g.input ?? a.Input ?? FC;
  return /* @__PURE__ */ x.jsx(Yr, {
    slots: {
      root: C,
      input: T
    },
    slotProps: O,
    fullWidth: l,
    inputComponent: p,
    multiline: u,
    ref: n,
    type: b,
    ...h,
    classes: y
  });
});
process.env.NODE_ENV !== "production" && (Pa.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * If `true`, the input will not have an underline.
   * @default false
   */
  disableUnderline: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
Pa.muiName = "Input";
function VC(e) {
  return ae("MuiFormControl", e);
}
const KP = le("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]), _C = (e) => {
  const {
    classes: o,
    margin: n,
    fullWidth: r
  } = e, s = {
    root: ["root", n !== "none" && `margin${L(n)}`, r && "fullWidth"]
  };
  return ce(s, VC, o);
}, WC = M("div", {
  name: "MuiFormControl",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`margin${L(n.margin)}`], n.fullWidth && o.fullWidth];
  }
})({
  display: "inline-flex",
  flexDirection: "column",
  position: "relative",
  // Reset fieldset default style.
  minWidth: 0,
  padding: 0,
  margin: 0,
  border: 0,
  verticalAlign: "top",
  // Fix alignment issue on Safari.
  variants: [{
    props: {
      margin: "normal"
    },
    style: {
      marginTop: 16,
      marginBottom: 8
    }
  }, {
    props: {
      margin: "dense"
    },
    style: {
      marginTop: 8,
      marginBottom: 4
    }
  }, {
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }]
}), Vd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiFormControl"
  }), {
    children: s,
    className: a,
    color: i = "primary",
    component: l = "div",
    disabled: c = !1,
    error: p = !1,
    focused: u,
    fullWidth: f = !1,
    hiddenLabel: g = !1,
    margin: b = "none",
    required: h = !1,
    size: d = "medium",
    variant: y = "outlined",
    ...S
  } = r, O = {
    ...r,
    color: i,
    component: l,
    disabled: c,
    error: p,
    fullWidth: f,
    hiddenLabel: g,
    margin: b,
    required: h,
    size: d,
    variant: y
  }, C = _C(O), [T, w] = m.useState(() => {
    let B = !1;
    return s && m.Children.forEach(s, (_) => {
      if (!Bo(_, ["Input", "Select"]))
        return;
      const H = Bo(_, ["Select"]) ? _.props.input : _;
      H && yx(H.props) && (B = !0);
    }), B;
  }), [E, $] = m.useState(() => {
    let B = !1;
    return s && m.Children.forEach(s, (_) => {
      Bo(_, ["Input", "Select"]) && (Ys(_.props, !0) || Ys(_.props.inputProps, !0)) && (B = !0);
    }), B;
  }), [P, N] = m.useState(!1);
  c && P && N(!1);
  const v = u !== void 0 && !c ? u : P;
  let R;
  const A = m.useRef(!1);
  process.env.NODE_ENV !== "production" && (R = () => (A.current && console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join(`
`)), A.current = !0, () => {
    A.current = !1;
  }));
  const j = m.useCallback(() => {
    $(!0);
  }, []), k = m.useCallback(() => {
    $(!1);
  }, []), D = m.useMemo(() => ({
    adornedStart: T,
    setAdornedStart: w,
    color: i,
    disabled: c,
    error: p,
    filled: E,
    focused: v,
    fullWidth: f,
    hiddenLabel: g,
    size: d,
    onBlur: () => {
      N(!1);
    },
    onFocus: () => {
      N(!0);
    },
    onEmpty: k,
    onFilled: j,
    registerEffect: R,
    required: h,
    variant: y
  }), [T, i, c, p, E, v, f, g, R, k, j, h, d, y]);
  return /* @__PURE__ */ x.jsx(qr.Provider, {
    value: D,
    children: /* @__PURE__ */ x.jsx(WC, {
      as: l,
      ownerState: O,
      className: W(C.root, a),
      ref: n,
      ...S,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (Vd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: t.bool,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: t.bool,
  /**
   * If `true`, the component will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: t.bool,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: t.oneOf(["dense", "none", "normal"]),
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
function UC(e) {
  return ae("MuiFormControlLabel", e);
}
const vr = le("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]), HC = (e) => {
  const {
    classes: o,
    disabled: n,
    labelPlacement: r,
    error: s,
    required: a
  } = e, i = {
    root: ["root", n && "disabled", `labelPlacement${L(r)}`, s && "error", a && "required"],
    label: ["label", n && "disabled"],
    asterisk: ["asterisk", s && "error"]
  };
  return ce(i, UC, o);
}, GC = M("label", {
  name: "MuiFormControlLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${vr.label}`]: o.label
    }, o.root, o[`labelPlacement${L(n.labelPlacement)}`]];
  }
})(Q(({
  theme: e
}) => ({
  display: "inline-flex",
  alignItems: "center",
  cursor: "pointer",
  // For correct alignment with the text.
  verticalAlign: "middle",
  WebkitTapHighlightColor: "transparent",
  marginLeft: -11,
  marginRight: 16,
  // used for row presentation of radio/checkbox
  [`&.${vr.disabled}`]: {
    cursor: "default"
  },
  [`& .${vr.label}`]: {
    [`&.${vr.disabled}`]: {
      color: (e.vars || e).palette.text.disabled
    }
  },
  variants: [{
    props: {
      labelPlacement: "start"
    },
    style: {
      flexDirection: "row-reverse",
      marginRight: -11
    }
  }, {
    props: {
      labelPlacement: "top"
    },
    style: {
      flexDirection: "column-reverse"
    }
  }, {
    props: {
      labelPlacement: "bottom"
    },
    style: {
      flexDirection: "column"
    }
  }, {
    props: ({
      labelPlacement: o
    }) => o === "start" || o === "top" || o === "bottom",
    style: {
      marginLeft: 16
      // used for row presentation of radio/checkbox
    }
  }]
}))), qC = M("span", {
  name: "MuiFormControlLabel",
  slot: "Asterisk",
  overridesResolver: (e, o) => o.asterisk
})(Q(({
  theme: e
}) => ({
  [`&.${vr.error}`]: {
    color: (e.vars || e).palette.error.main
  }
}))), YC = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiFormControlLabel"
  }), {
    checked: s,
    className: a,
    componentsProps: i = {},
    control: l,
    disabled: c,
    disableTypography: p,
    inputRef: u,
    label: f,
    labelPlacement: g = "end",
    name: b,
    onChange: h,
    required: d,
    slots: y = {},
    slotProps: S = {},
    value: O,
    ...C
  } = r, T = uo(), w = c ?? l.props.disabled ?? (T == null ? void 0 : T.disabled), E = d ?? l.props.required, $ = {
    disabled: w,
    required: E
  };
  ["checked", "name", "onChange", "value", "inputRef"].forEach((D) => {
    typeof l.props[D] > "u" && typeof r[D] < "u" && ($[D] = r[D]);
  });
  const P = _o({
    props: r,
    muiFormControl: T,
    states: ["error"]
  }), N = {
    ...r,
    disabled: w,
    labelPlacement: g,
    required: E,
    error: P.error
  }, v = HC(N), R = {
    slots: y,
    slotProps: {
      ...i,
      ...S
    }
  }, [A, j] = je("typography", {
    elementType: kt,
    externalForwardedProps: R,
    ownerState: N
  });
  let k = f;
  return k != null && k.type !== kt && !p && (k = /* @__PURE__ */ x.jsx(A, {
    component: "span",
    ...j,
    className: W(v.label, j == null ? void 0 : j.className),
    children: k
  })), /* @__PURE__ */ x.jsxs(GC, {
    className: W(v.root, a),
    ownerState: N,
    ref: n,
    ...C,
    children: [/* @__PURE__ */ m.cloneElement(l, $), E ? /* @__PURE__ */ x.jsxs("div", {
      children: [k, /* @__PURE__ */ x.jsxs(qC, {
        ownerState: N,
        "aria-hidden": !0,
        className: v.asterisk,
        children: [" ", "*"]
      })]
    }) : k]
  });
});
process.env.NODE_ENV !== "production" && (YC.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component appears selected.
   */
  checked: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  componentsProps: t.shape({
    typography: t.object
  }),
  /**
   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
   */
  control: t.element.isRequired,
  /**
   * If `true`, the control is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the label is rendered as it is passed without an additional typography node.
   */
  disableTypography: t.bool,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * A text or an element to be used in an enclosing label element.
   */
  label: t.node,
  /**
   * The position of the label.
   * @default 'end'
   */
  labelPlacement: t.oneOf(["bottom", "end", "start", "top"]),
  /**
   * @ignore
   */
  name: t.string,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: t.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    typography: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    typography: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component.
   */
  value: t.any
});
function KC(e) {
  return ae("MuiFormGroup", e);
}
const XP = le("MuiFormGroup", ["root", "row", "error"]), XC = (e) => {
  const {
    classes: o,
    row: n,
    error: r
  } = e;
  return ce({
    root: ["root", n && "row", r && "error"]
  }, KC, o);
}, JC = M("div", {
  name: "MuiFormGroup",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.row && o.row];
  }
})({
  display: "flex",
  flexDirection: "column",
  flexWrap: "wrap",
  variants: [{
    props: {
      row: !0
    },
    style: {
      flexDirection: "row"
    }
  }]
}), _d = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiFormGroup"
  }), {
    className: s,
    row: a = !1,
    ...i
  } = r, l = uo(), c = _o({
    props: r,
    muiFormControl: l,
    states: ["error"]
  }), p = {
    ...r,
    row: a,
    error: c.error
  }, u = XC(p);
  return /* @__PURE__ */ x.jsx(JC, {
    className: W(u.root, s),
    ownerState: p,
    ref: n,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (_d.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Display group of elements in a compact row.
   * @default false
   */
  row: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function ZC(e) {
  return ae("MuiFormHelperText", e);
}
const Tp = le("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
var Cp;
const QC = (e) => {
  const {
    classes: o,
    contained: n,
    size: r,
    disabled: s,
    error: a,
    filled: i,
    focused: l,
    required: c
  } = e, p = {
    root: ["root", s && "disabled", a && "error", r && `size${L(r)}`, n && "contained", l && "focused", i && "filled", c && "required"]
  };
  return ce(p, ZC, o);
}, ew = M("p", {
  name: "MuiFormHelperText",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.size && o[`size${L(n.size)}`], n.contained && o.contained, n.filled && o.filled];
  }
})(Q(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  ...e.typography.caption,
  textAlign: "left",
  marginTop: 3,
  marginRight: 0,
  marginBottom: 0,
  marginLeft: 0,
  [`&.${Tp.disabled}`]: {
    color: (e.vars || e).palette.text.disabled
  },
  [`&.${Tp.error}`]: {
    color: (e.vars || e).palette.error.main
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginTop: 4
    }
  }, {
    props: ({
      ownerState: o
    }) => o.contained,
    style: {
      marginLeft: 14,
      marginRight: 14
    }
  }]
}))), Wd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiFormHelperText"
  }), {
    children: s,
    className: a,
    component: i = "p",
    disabled: l,
    error: c,
    filled: p,
    focused: u,
    margin: f,
    required: g,
    variant: b,
    ...h
  } = r, d = uo(), y = _o({
    props: r,
    muiFormControl: d,
    states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
  }), S = {
    ...r,
    component: i,
    contained: y.variant === "filled" || y.variant === "outlined",
    variant: y.variant,
    size: y.size,
    disabled: y.disabled,
    error: y.error,
    filled: y.filled,
    focused: y.focused,
    required: y.required
  };
  delete S.ownerState;
  const O = QC(S);
  return /* @__PURE__ */ x.jsx(ew, {
    as: i,
    className: W(O.root, a),
    ref: n,
    ...h,
    ownerState: S,
    children: s === " " ? (
      // notranslate needed while Google Translate will not fix zero-width space issue
      Cp || (Cp = /* @__PURE__ */ x.jsx("span", {
        className: "notranslate",
        "aria-hidden": !0,
        children: "​"
      }))
    ) : s
  });
});
process.env.NODE_ENV !== "production" && (Wd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the helper text should be displayed in a disabled state.
   */
  disabled: t.bool,
  /**
   * If `true`, helper text should be displayed in an error state.
   */
  error: t.bool,
  /**
   * If `true`, the helper text should use filled classes key.
   */
  filled: t.bool,
  /**
   * If `true`, the helper text should use focused classes key.
   */
  focused: t.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: t.oneOf(["dense"]),
  /**
   * If `true`, the helper text should use required classes key.
   */
  required: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   */
  variant: t.oneOfType([t.oneOf(["filled", "outlined", "standard"]), t.string])
});
function tw(e) {
  return ae("MuiFormLabel", e);
}
const wr = le("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]), ow = (e) => {
  const {
    classes: o,
    color: n,
    focused: r,
    disabled: s,
    error: a,
    filled: i,
    required: l
  } = e, c = {
    root: ["root", `color${L(n)}`, s && "disabled", a && "error", i && "filled", r && "focused", l && "required"],
    asterisk: ["asterisk", a && "error"]
  };
  return ce(c, tw, o);
}, nw = M("label", {
  name: "MuiFormLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color === "secondary" && o.colorSecondary, n.filled && o.filled];
  }
})(Q(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  ...e.typography.body1,
  lineHeight: "1.4375em",
  padding: 0,
  position: "relative",
  variants: [...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      [`&.${wr.focused}`]: {
        color: (e.vars || e).palette[o].main
      }
    }
  })), {
    props: {},
    style: {
      [`&.${wr.disabled}`]: {
        color: (e.vars || e).palette.text.disabled
      },
      [`&.${wr.error}`]: {
        color: (e.vars || e).palette.error.main
      }
    }
  }]
}))), rw = M("span", {
  name: "MuiFormLabel",
  slot: "Asterisk",
  overridesResolver: (e, o) => o.asterisk
})(Q(({
  theme: e
}) => ({
  [`&.${wr.error}`]: {
    color: (e.vars || e).palette.error.main
  }
}))), Ud = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiFormLabel"
  }), {
    children: s,
    className: a,
    color: i,
    component: l = "label",
    disabled: c,
    error: p,
    filled: u,
    focused: f,
    required: g,
    ...b
  } = r, h = uo(), d = _o({
    props: r,
    muiFormControl: h,
    states: ["color", "required", "focused", "disabled", "error", "filled"]
  }), y = {
    ...r,
    color: d.color || "primary",
    component: l,
    disabled: d.disabled,
    error: d.error,
    filled: d.filled,
    focused: d.focused,
    required: d.required
  }, S = ow(y);
  return /* @__PURE__ */ x.jsxs(nw, {
    as: l,
    ownerState: y,
    className: W(S.root, a),
    ref: n,
    ...b,
    children: [s, d.required && /* @__PURE__ */ x.jsxs(rw, {
      ownerState: y,
      "aria-hidden": !0,
      className: S.asterisk,
      children: [" ", "*"]
    })]
  });
});
process.env.NODE_ENV !== "production" && (Ud.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: t.oneOfType([t.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the label should be displayed in a disabled state.
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: t.bool,
  /**
   * If `true`, the label should use filled classes key.
   */
  filled: t.bool,
  /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */
  focused: t.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Pi = /* @__PURE__ */ m.createContext();
process.env.NODE_ENV !== "production" && (Pi.displayName = "GridContext");
function sw(e) {
  return ae("MuiGrid", e);
}
const aw = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], iw = ["column-reverse", "column", "row-reverse", "row"], lw = ["nowrap", "wrap-reverse", "wrap"], ar = ["auto", !0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], Ar = le("MuiGrid", [
  "root",
  "container",
  "item",
  "zeroMinWidth",
  // spacings
  ...aw.map((e) => `spacing-xs-${e}`),
  // direction values
  ...iw.map((e) => `direction-xs-${e}`),
  // wrap values
  ...lw.map((e) => `wrap-xs-${e}`),
  // grid sizes for all breakpoints
  ...ar.map((e) => `grid-xs-${e}`),
  ...ar.map((e) => `grid-sm-${e}`),
  ...ar.map((e) => `grid-md-${e}`),
  ...ar.map((e) => `grid-lg-${e}`),
  ...ar.map((e) => `grid-xl-${e}`)
]);
function cw({
  theme: e,
  ownerState: o
}) {
  let n;
  return e.breakpoints.keys.reduce((r, s) => {
    let a = {};
    if (o[s] && (n = o[s]), !n)
      return r;
    if (n === !0)
      a = {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: "100%"
      };
    else if (n === "auto")
      a = {
        flexBasis: "auto",
        flexGrow: 0,
        flexShrink: 0,
        maxWidth: "none",
        width: "auto"
      };
    else {
      const i = yn({
        values: o.columns,
        breakpoints: e.breakpoints.values
      }), l = typeof i == "object" ? i[s] : i;
      if (l == null)
        return r;
      const c = `${Math.round(n / l * 1e8) / 1e6}%`;
      let p = {};
      if (o.container && o.item && o.columnSpacing !== 0) {
        const u = e.spacing(o.columnSpacing);
        if (u !== "0px") {
          const f = `calc(${c} + ${u})`;
          p = {
            flexBasis: f,
            maxWidth: f
          };
        }
      }
      a = {
        flexBasis: c,
        flexGrow: 0,
        maxWidth: c,
        ...p
      };
    }
    return e.breakpoints.values[s] === 0 ? Object.assign(r, a) : r[e.breakpoints.up(s)] = a, r;
  }, {});
}
function pw({
  theme: e,
  ownerState: o
}) {
  const n = yn({
    values: o.direction,
    breakpoints: e.breakpoints.values
  });
  return Ut({
    theme: e
  }, n, (r) => {
    const s = {
      flexDirection: r
    };
    return r.startsWith("column") && (s[`& > .${Ar.item}`] = {
      maxWidth: "none"
    }), s;
  });
}
function Hd({
  breakpoints: e,
  values: o
}) {
  let n = "";
  Object.keys(o).forEach((s) => {
    n === "" && o[s] !== 0 && (n = s);
  });
  const r = Object.keys(e).sort((s, a) => e[s] - e[a]);
  return r.slice(0, r.indexOf(n));
}
function uw({
  theme: e,
  ownerState: o
}) {
  const {
    container: n,
    rowSpacing: r
  } = o;
  let s = {};
  if (n && r !== 0) {
    const a = yn({
      values: r,
      breakpoints: e.breakpoints.values
    });
    let i;
    typeof a == "object" && (i = Hd({
      breakpoints: e.breakpoints.values,
      values: a
    })), s = Ut({
      theme: e
    }, a, (l, c) => {
      const p = e.spacing(l);
      return p !== "0px" ? {
        marginTop: `calc(-1 * ${p})`,
        [`& > .${Ar.item}`]: {
          paddingTop: p
        }
      } : i != null && i.includes(c) ? {} : {
        marginTop: 0,
        [`& > .${Ar.item}`]: {
          paddingTop: 0
        }
      };
    });
  }
  return s;
}
function dw({
  theme: e,
  ownerState: o
}) {
  const {
    container: n,
    columnSpacing: r
  } = o;
  let s = {};
  if (n && r !== 0) {
    const a = yn({
      values: r,
      breakpoints: e.breakpoints.values
    });
    let i;
    typeof a == "object" && (i = Hd({
      breakpoints: e.breakpoints.values,
      values: a
    })), s = Ut({
      theme: e
    }, a, (l, c) => {
      const p = e.spacing(l);
      if (p !== "0px") {
        const u = `calc(-1 * ${p})`;
        return {
          width: `calc(100% + ${p})`,
          marginLeft: u,
          [`& > .${Ar.item}`]: {
            paddingLeft: p
          }
        };
      }
      return i != null && i.includes(c) ? {} : {
        width: "100%",
        marginLeft: 0,
        [`& > .${Ar.item}`]: {
          paddingLeft: 0
        }
      };
    });
  }
  return s;
}
function fw(e, o, n = {}) {
  if (!e || e <= 0)
    return [];
  if (typeof e == "string" && !Number.isNaN(Number(e)) || typeof e == "number")
    return [n[`spacing-xs-${String(e)}`]];
  const r = [];
  return o.forEach((s) => {
    const a = e[s];
    Number(a) > 0 && r.push(n[`spacing-${s}-${String(a)}`]);
  }), r;
}
const mw = M("div", {
  name: "MuiGrid",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      container: r,
      direction: s,
      item: a,
      spacing: i,
      wrap: l,
      zeroMinWidth: c,
      breakpoints: p
    } = n;
    let u = [];
    r && (u = fw(i, p, o));
    const f = [];
    return p.forEach((g) => {
      const b = n[g];
      b && f.push(o[`grid-${g}-${String(b)}`]);
    }), [o.root, r && o.container, a && o.item, c && o.zeroMinWidth, ...u, s !== "row" && o[`direction-xs-${String(s)}`], l !== "wrap" && o[`wrap-xs-${String(l)}`], ...f];
  }
})(
  // FIXME(romgrk): Can't use memoTheme here
  ({
    ownerState: e
  }) => ({
    boxSizing: "border-box",
    ...e.container && {
      display: "flex",
      flexWrap: "wrap",
      width: "100%"
    },
    ...e.item && {
      margin: 0
      // For instance, it's useful when used with a `figure` element.
    },
    ...e.zeroMinWidth && {
      minWidth: 0
    },
    ...e.wrap !== "wrap" && {
      flexWrap: e.wrap
    }
  }),
  pw,
  uw,
  dw,
  cw
);
function gw(e, o) {
  if (!e || e <= 0)
    return [];
  if (typeof e == "string" && !Number.isNaN(Number(e)) || typeof e == "number")
    return [`spacing-xs-${String(e)}`];
  const n = [];
  return o.forEach((r) => {
    const s = e[r];
    if (Number(s) > 0) {
      const a = `spacing-${r}-${String(s)}`;
      n.push(a);
    }
  }), n;
}
const bw = (e) => {
  const {
    classes: o,
    container: n,
    direction: r,
    item: s,
    spacing: a,
    wrap: i,
    zeroMinWidth: l,
    breakpoints: c
  } = e;
  let p = [];
  n && (p = gw(a, c));
  const u = [];
  c.forEach((g) => {
    const b = e[g];
    b && u.push(`grid-${g}-${String(b)}`);
  });
  const f = {
    root: ["root", n && "container", s && "item", l && "zeroMinWidth", ...p, r !== "row" && `direction-xs-${String(r)}`, i !== "wrap" && `wrap-xs-${String(i)}`, ...u]
  };
  return ce(f, sw, o);
}, js = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiGrid"
  }), {
    breakpoints: s
  } = Ot(), a = _r(r), {
    className: i,
    columns: l,
    columnSpacing: c,
    component: p = "div",
    container: u = !1,
    direction: f = "row",
    item: g = !1,
    rowSpacing: b,
    spacing: h = 0,
    wrap: d = "wrap",
    zeroMinWidth: y = !1,
    ...S
  } = a, O = b || h, C = c || h, T = m.useContext(Pi), w = u ? l || 12 : T, E = {}, $ = {
    ...S
  };
  s.keys.forEach((v) => {
    S[v] != null && (E[v] = S[v], delete $[v]);
  });
  const P = {
    ...a,
    columns: w,
    container: u,
    direction: f,
    item: g,
    rowSpacing: O,
    columnSpacing: C,
    wrap: d,
    zeroMinWidth: y,
    spacing: h,
    ...E,
    breakpoints: s.keys
  }, N = bw(P);
  return /* @__PURE__ */ x.jsx(Pi.Provider, {
    value: w,
    children: /* @__PURE__ */ x.jsx(mw, {
      ownerState: P,
      className: W(N.root, i),
      as: p,
      ref: n,
      ...$
    })
  });
});
process.env.NODE_ENV !== "production" && (js.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The number of columns.
   * @default 12
   */
  columns: t.oneOfType([t.arrayOf(t.number), t.number, t.object]),
  /**
   * Defines the horizontal space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  columnSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component will have the flex *container* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */
  container: t.bool,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'row'
   */
  direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
  /**
   * If `true`, the component will have the flex *item* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */
  item: t.bool,
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
   * @default false
   */
  lg: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `md` breakpoint and wider screens if not overridden.
   * @default false
   */
  md: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * Defines the vertical space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  rowSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
   * @default false
   */
  sm: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   * @default 'wrap'
   */
  wrap: t.oneOf(["nowrap", "wrap-reverse", "wrap"]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
   * @default false
   */
  xl: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for all the screen sizes with the lowest priority.
   * @default false
   */
  xs: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * If `true`, it sets `min-width: 0` on the item.
   * Refer to the limitations section of the documentation to better understand the use case.
   * @default false
   */
  zeroMinWidth: t.bool
});
if (process.env.NODE_ENV !== "production") {
  const e = Fu("Grid", js);
  js.propTypes = {
    // eslint-disable-next-line react/forbid-foreign-prop-types
    ...js.propTypes,
    direction: e("container"),
    lg: e("item"),
    md: e("item"),
    sm: e("item"),
    spacing: e("container"),
    wrap: e("container"),
    xs: e("item"),
    zeroMinWidth: e("item")
  };
}
const Gd = xh({
  createStyledComponent: M("div", {
    name: "MuiGrid2",
    slot: "Root",
    overridesResolver: (e, o) => {
      const {
        ownerState: n
      } = e;
      return [o.root, n.container && o.container];
    }
  }),
  componentName: "MuiGrid2",
  useThemeProps: (e) => pe({
    props: e,
    name: "MuiGrid2"
  }),
  useTheme: Ot
});
process.env.NODE_ENV !== "production" && (Gd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * The number of columns.
   * @default 12
   */
  columns: t.oneOfType([t.arrayOf(t.number), t.number, t.object]),
  /**
   * Defines the horizontal space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  columnSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * If `true`, the component will have the flex *container* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */
  container: t.bool,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'row'
   */
  direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
  /**
   * Defines the offset value for the type `item` components.
   */
  offset: t.oneOfType([t.string, t.number, t.arrayOf(t.oneOfType([t.string, t.number])), t.object]),
  /**
   * Defines the vertical space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  rowSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * Defines the size of the the type `item` components.
   */
  size: t.oneOfType([t.string, t.bool, t.number, t.arrayOf(t.oneOfType([t.string, t.bool, t.number])), t.object]),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * @ignore
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @internal
   * The level of the grid starts from `0` and increases when the grid nests
   * inside another grid. Nesting is defined as a container Grid being a direct
   * child of a container Grid.
   *
   * ```js
   * <Grid container> // level 0
   *   <Grid container> // level 1
   *     <Grid container> // level 2
   * ```
   *
   * Only consecutive grid is considered nesting. A grid container will start at
   * `0` if there are non-Grid container element above it.
   *
   * ```js
   * <Grid container> // level 0
   *   <div>
   *     <Grid container> // level 0
   * ```
   *
   * ```js
   * <Grid container> // level 0
   *   <Grid>
   *     <Grid container> // level 0
   * ```
   */
  unstable_level: t.number,
  /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   * @default 'wrap'
   */
  wrap: t.oneOf(["nowrap", "wrap-reverse", "wrap"])
});
if (process.env.NODE_ENV !== "production") {
  const e = Gd, o = Fu("Grid2", e);
  e.propTypes = {
    // eslint-disable-next-line react/forbid-foreign-prop-types
    ...e.propTypes,
    direction: o("container"),
    spacing: o("container"),
    wrap: o("container")
  };
}
function JP(e) {
  return ae("MuiGrid2", e);
}
const hw = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], yw = ["column-reverse", "column", "row-reverse", "row"], vw = ["nowrap", "wrap-reverse", "wrap"], ir = ["auto", !0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], ZP = le("MuiGrid2", [
  "root",
  "container",
  // spacings
  ...hw.map((e) => `spacing-xs-${e}`),
  // direction values
  ...yw.map((e) => `direction-xs-${e}`),
  // wrap values
  ...vw.map((e) => `wrap-xs-${e}`),
  // grid sizes for all breakpoints
  ...ir.map((e) => `grid-xs-${e}`),
  ...ir.map((e) => `grid-sm-${e}`),
  ...ir.map((e) => `grid-md-${e}`),
  ...ir.map((e) => `grid-lg-${e}`),
  ...ir.map((e) => `grid-xl-${e}`)
]);
function Ni(e) {
  return `scale(${e}, ${e ** 2})`;
}
const xw = {
  entering: {
    opacity: 1,
    transform: Ni(1)
  },
  entered: {
    opacity: 1,
    transform: "none"
  }
}, ti = typeof navigator < "u" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent), Un = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    addEndListener: r,
    appear: s = !0,
    children: a,
    easing: i,
    in: l,
    onEnter: c,
    onEntered: p,
    onEntering: u,
    onExit: f,
    onExited: g,
    onExiting: b,
    style: h,
    timeout: d = "auto",
    // eslint-disable-next-line react/prop-types
    TransitionComponent: y = Zt,
    ...S
  } = o, O = Ao(), C = m.useRef(), T = Ot(), w = m.useRef(null), E = Ye(w, Vo(a), n), $ = (D) => (B) => {
    if (D) {
      const _ = w.current;
      B === void 0 ? D(_) : D(_, B);
    }
  }, P = $(u), N = $((D, B) => {
    Sa(D);
    const {
      duration: _,
      delay: H,
      easing: U
    } = mo({
      style: h,
      timeout: d,
      easing: i
    }, {
      mode: "enter"
    });
    let F;
    d === "auto" ? (F = T.transitions.getAutoHeightDuration(D.clientHeight), C.current = F) : F = _, D.style.transition = [T.transitions.create("opacity", {
      duration: F,
      delay: H
    }), T.transitions.create("transform", {
      duration: ti ? F : F * 0.666,
      delay: H,
      easing: U
    })].join(","), c && c(D, B);
  }), v = $(p), R = $(b), A = $((D) => {
    const {
      duration: B,
      delay: _,
      easing: H
    } = mo({
      style: h,
      timeout: d,
      easing: i
    }, {
      mode: "exit"
    });
    let U;
    d === "auto" ? (U = T.transitions.getAutoHeightDuration(D.clientHeight), C.current = U) : U = B, D.style.transition = [T.transitions.create("opacity", {
      duration: U,
      delay: _
    }), T.transitions.create("transform", {
      duration: ti ? U : U * 0.666,
      delay: ti ? _ : _ || U * 0.333,
      easing: H
    })].join(","), D.style.opacity = 0, D.style.transform = Ni(0.75), f && f(D);
  }), j = $(g), k = (D) => {
    d === "auto" && O.start(C.current || 0, D), r && r(w.current, D);
  };
  return /* @__PURE__ */ x.jsx(y, {
    appear: s,
    in: l,
    nodeRef: w,
    onEnter: N,
    onEntered: v,
    onEntering: P,
    onExit: A,
    onExited: j,
    onExiting: R,
    addEndListener: k,
    timeout: d === "auto" ? null : d,
    ...S,
    children: (D, {
      ownerState: B,
      ..._
    }) => /* @__PURE__ */ m.cloneElement(a, {
      style: {
        opacity: 0,
        transform: Ni(0.75),
        visibility: D === "exited" && !l ? "hidden" : void 0,
        ...xw[D],
        ...h,
        ...a.props.style
      },
      ref: E,
      ..._
    })
  });
});
process.env.NODE_ENV !== "production" && (Un.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: Fo.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  timeout: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
Un && (Un.muiSupportAuto = !0);
const Sw = Lu({
  themeId: so
}), Jo = ["xs", "sm", "md", "lg", "xl"], Tw = (e, o, n = !0) => n ? Jo.indexOf(e) <= Jo.indexOf(o) : Jo.indexOf(e) < Jo.indexOf(o), Cw = (e, o, n = !1) => n ? Jo.indexOf(o) <= Jo.indexOf(e) : Jo.indexOf(o) < Jo.indexOf(e), ww = (e = {}) => (o) => {
  const {
    withTheme: n = !1,
    noSSR: r = !1,
    initialWidth: s
  } = e;
  function a(i) {
    const l = Ot(), c = i.theme || l, {
      initialWidth: p,
      width: u,
      ...f
    } = el({
      theme: c,
      name: "MuiWithWidth",
      props: i
    }), [g, b] = m.useState(!1);
    Rt(() => {
      b(!0);
    }, []);
    const d = c.breakpoints.keys.slice().reverse().reduce((S, O) => {
      const C = Sw(c.breakpoints.up(O));
      return !S && C ? O : S;
    }, null), y = {
      width: u || (g || r ? d : void 0) || p || s,
      ...n ? {
        theme: c
      } : {},
      ...f
    };
    return y.width === void 0 ? null : /* @__PURE__ */ x.jsx(o, {
      ...y
    });
  }
  return process.env.NODE_ENV !== "production" && (a.propTypes = {
    /**
     * As `window.innerWidth` is unavailable on the server,
     * we default to rendering an empty component during the first mount.
     * You might want to use a heuristic to approximate
     * the screen width of the client browser screen width.
     *
     * For instance, you could be using the user-agent or the client-hints.
     * https://caniuse.com/#search=client%20hint
     */
    initialWidth: t.oneOf(["xs", "sm", "md", "lg", "xl"]),
    /**
     * @ignore
     */
    theme: t.object,
    /**
     * Bypass the width calculation logic.
     */
    width: t.oneOf(["xs", "sm", "md", "lg", "xl"])
  }), process.env.NODE_ENV !== "production" && (a.displayName = `WithWidth(${Nu(o)})`), a;
};
function Qs(e) {
  const {
    children: o,
    only: n,
    width: r
  } = e, s = Ot();
  let a = !0;
  if (n)
    if (Array.isArray(n))
      for (let i = 0; i < n.length; i += 1) {
        const l = n[i];
        if (r === l) {
          a = !1;
          break;
        }
      }
    else n && r === n && (a = !1);
  if (a)
    for (let i = 0; i < s.breakpoints.keys.length; i += 1) {
      const l = s.breakpoints.keys[i], c = e[`${l}Up`], p = e[`${l}Down`];
      if (c && Tw(l, r) || p && Cw(l, r)) {
        a = !1;
        break;
      }
    }
  return a ? o : null;
}
Qs.propTypes = {
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  lgDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  lgUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  mdDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  mdUp: t.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl"]), t.arrayOf(t.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  smDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  smUp: t.bool,
  /**
   * @ignore
   * width prop provided by withWidth decorator.
   */
  width: t.string.isRequired,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xlDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xlUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xsDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xsUp: t.bool
};
process.env.NODE_ENV !== "production" && (Qs.propTypes = Cn(Qs.propTypes));
const Ow = ww()(Qs);
function Ew(e) {
  return ae("PrivateHiddenCss", e);
}
le("PrivateHiddenCss", ["root", "xlDown", "xlUp", "onlyXl", "lgDown", "lgUp", "onlyLg", "mdDown", "mdUp", "onlyMd", "smDown", "smUp", "onlySm", "xsDown", "xsUp", "onlyXs"]);
const Rw = (e) => {
  const {
    classes: o,
    breakpoints: n
  } = e, r = {
    root: ["root", ...n.map(({
      breakpoint: s,
      dir: a
    }) => a === "only" ? `${a}${L(s)}` : `${s}${L(a)}`)]
  };
  return ce(r, Ew, o);
}, $w = M("div", {
  name: "PrivateHiddenCss",
  slot: "Root"
})(({
  theme: e,
  ownerState: o
}) => {
  const n = {
    display: "none"
  };
  return {
    ...o.breakpoints.map(({
      breakpoint: r,
      dir: s
    }) => s === "only" ? {
      [e.breakpoints.only(r)]: n
    } : s === "up" ? {
      [e.breakpoints.up(r)]: n
    } : {
      [e.breakpoints.down(r)]: n
    }).reduce((r, s) => (Object.keys(s).forEach((a) => {
      r[a] = s[a];
    }), r), {})
  };
});
function qd(e) {
  const {
    children: o,
    className: n,
    only: r,
    ...s
  } = e, a = Ot();
  if (process.env.NODE_ENV !== "production") {
    const p = Object.keys(s).filter((u) => {
      const f = !a.breakpoints.keys.some((g) => `${g}Up` === u || `${g}Down` === u);
      return !["classes", "theme", "isRtl", "sx"].includes(u) && f;
    });
    p.length > 0 && console.error(`MUI: Unsupported props received by \`<Hidden implementation="css" />\`: ${p.join(", ")}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);
  }
  const i = [];
  for (let p = 0; p < a.breakpoints.keys.length; p += 1) {
    const u = a.breakpoints.keys[p], f = s[`${u}Up`], g = s[`${u}Down`];
    f && i.push({
      breakpoint: u,
      dir: "up"
    }), g && i.push({
      breakpoint: u,
      dir: "down"
    });
  }
  r && (Array.isArray(r) ? r : [r]).forEach((u) => {
    i.push({
      breakpoint: u,
      dir: "only"
    });
  });
  const l = {
    ...e,
    breakpoints: i
  }, c = Rw(l);
  return /* @__PURE__ */ x.jsx($w, {
    className: W(c.root, n),
    ownerState: l,
    children: o
  });
}
process.env.NODE_ENV !== "production" && (qd.propTypes = {
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */
  implementation: t.oneOf(["js", "css"]),
  /**
   * If `true`, screens this size and down are hidden.
   */
  lgDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  lgUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  mdDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  mdUp: t.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl"]), t.arrayOf(t.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  /**
   * If `true`, screens this size and down are hidden.
   */
  smDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  smUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  xlDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  xlUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  xsDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  xsUp: t.bool
});
function kw(e) {
  const {
    implementation: o = "js",
    lgDown: n = !1,
    lgUp: r = !1,
    mdDown: s = !1,
    mdUp: a = !1,
    smDown: i = !1,
    smUp: l = !1,
    xlDown: c = !1,
    xlUp: p = !1,
    xsDown: u = !1,
    xsUp: f = !1,
    ...g
  } = e;
  return o === "js" ? /* @__PURE__ */ x.jsx(Ow, {
    lgDown: n,
    lgUp: r,
    mdDown: s,
    mdUp: a,
    smDown: i,
    smUp: l,
    xlDown: c,
    xlUp: p,
    xsDown: u,
    xsUp: f,
    ...g
  }) : /* @__PURE__ */ x.jsx(qd, {
    lgDown: n,
    lgUp: r,
    mdDown: s,
    mdUp: a,
    smDown: i,
    smUp: l,
    xlDown: c,
    xlUp: p,
    xsDown: u,
    xsUp: f,
    ...g
  });
}
process.env.NODE_ENV !== "production" && (kw.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   * @default 'js'
   */
  implementation: t.oneOf(["css", "js"]),
  /**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use a heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */
  initialWidth: t.oneOf(["xs", "sm", "md", "lg", "xl"]),
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  lgDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  lgUp: t.bool,
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  mdDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  mdUp: t.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl"]), t.arrayOf(t.oneOf(["xs", "sm", "md", "lg", "xl"]).isRequired)]),
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  smDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  smUp: t.bool,
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  xlDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  xlUp: t.bool,
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  xsDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  xsUp: t.bool
});
function Pw(e) {
  return ae("MuiIcon", e);
}
const QP = le("MuiIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]), Nw = (e) => {
  const {
    color: o,
    fontSize: n,
    classes: r
  } = e, s = {
    root: ["root", o !== "inherit" && `color${L(o)}`, `fontSize${L(n)}`]
  };
  return ce(s, Pw, r);
}, Iw = M("span", {
  name: "MuiIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color !== "inherit" && o[`color${L(n.color)}`], o[`fontSize${L(n.fontSize)}`]];
  }
})(Q(({
  theme: e
}) => ({
  userSelect: "none",
  width: "1em",
  height: "1em",
  // Chrome fix for https://issues.chromium.org/issues/41375697
  // To remove at some point.
  overflow: "hidden",
  display: "inline-block",
  // allow overflow hidden to take action
  textAlign: "center",
  // support non-square icon
  flexShrink: 0,
  variants: [{
    props: {
      fontSize: "inherit"
    },
    style: {
      fontSize: "inherit"
    }
  }, {
    props: {
      fontSize: "small"
    },
    style: {
      fontSize: e.typography.pxToRem(20)
    }
  }, {
    props: {
      fontSize: "medium"
    },
    style: {
      fontSize: e.typography.pxToRem(24)
    }
  }, {
    props: {
      fontSize: "large"
    },
    style: {
      fontSize: e.typography.pxToRem(36)
    }
  }, {
    props: {
      color: "action"
    },
    style: {
      color: (e.vars || e).palette.action.active
    }
  }, {
    props: {
      color: "disabled"
    },
    style: {
      color: (e.vars || e).palette.action.disabled
    }
  }, {
    props: {
      color: "inherit"
    },
    style: {
      color: void 0
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      color: (e.vars || e).palette[o].main
    }
  }))]
}))), Yd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiIcon"
  }), {
    baseClassName: s = "material-icons",
    className: a,
    color: i = "inherit",
    component: l = "span",
    fontSize: c = "medium",
    ...p
  } = r, u = {
    ...r,
    baseClassName: s,
    color: i,
    component: l,
    fontSize: c
  }, f = Nw(u);
  return /* @__PURE__ */ x.jsx(Iw, {
    as: l,
    className: W(
      s,
      // Prevent the translation of the text content.
      // The font relies on the exact text content to render the icon.
      "notranslate",
      f.root,
      a
    ),
    ownerState: u,
    "aria-hidden": !0,
    ref: n,
    ...p
  });
});
process.env.NODE_ENV !== "production" && (Yd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any
   * other base class that suits the icon font you're using (for example material-icons-rounded, fas, etc).
   * @default 'material-icons'
   */
  baseClassName: t.string,
  /**
   * The name of the icon font ligature.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'inherit'
   */
  color: t.oneOfType([t.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: t.oneOfType([t.oneOf(["inherit", "large", "medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
Yd.muiName = "Icon";
function jw(e) {
  return ae("MuiImageList", e);
}
const eN = le("MuiImageList", ["root", "masonry", "quilted", "standard", "woven"]), Rl = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (Rl.displayName = "ImageListContext");
const Mw = (e) => {
  const {
    classes: o,
    variant: n
  } = e;
  return ce({
    root: ["root", n]
  }, jw, o);
}, Aw = M("ul", {
  name: "MuiImageList",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant]];
  }
})({
  display: "grid",
  overflowY: "auto",
  listStyle: "none",
  padding: 0,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  variants: [{
    props: {
      variant: "masonry"
    },
    style: {
      display: "block"
    }
  }]
}), Bw = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiImageList"
  }), {
    children: s,
    className: a,
    cols: i = 2,
    component: l = "ul",
    rowHeight: c = "auto",
    gap: p = 4,
    style: u,
    variant: f = "standard",
    ...g
  } = r, b = m.useMemo(() => ({
    rowHeight: c,
    gap: p,
    variant: f
  }), [c, p, f]), h = f === "masonry" ? {
    columnCount: i,
    columnGap: p,
    ...u
  } : {
    gridTemplateColumns: `repeat(${i}, 1fr)`,
    gap: p,
    ...u
  }, d = {
    ...r,
    component: l,
    gap: p,
    rowHeight: c,
    variant: f
  }, y = Mw(d);
  return /* @__PURE__ */ x.jsx(Aw, {
    as: l,
    className: W(y.root, y[f], a),
    ref: n,
    style: h,
    ownerState: d,
    ...g,
    children: /* @__PURE__ */ x.jsx(Rl.Provider, {
      value: b,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (Bw.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `ImageListItem`s.
   */
  children: t.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Number of columns.
   * @default 2
   */
  cols: mt,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The gap between items in px.
   * @default 4
   */
  gap: t.number,
  /**
   * The height of one row in px.
   * @default 'auto'
   */
  rowHeight: t.oneOfType([t.oneOf(["auto"]), t.number]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: t.oneOfType([t.oneOf(["masonry", "quilted", "standard", "woven"]), t.string])
});
function Lw(e) {
  return ae("MuiImageListItem", e);
}
const oi = le("MuiImageListItem", ["root", "img", "standard", "woven", "masonry", "quilted"]), Dw = (e) => {
  const {
    classes: o,
    variant: n
  } = e;
  return ce({
    root: ["root", n],
    img: ["img"]
  }, Lw, o);
}, zw = M("li", {
  name: "MuiImageListItem",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${oi.img}`]: o.img
    }, o.root, o[n.variant]];
  }
})({
  display: "block",
  position: "relative",
  [`& .${oi.img}`]: {
    objectFit: "cover",
    width: "100%",
    height: "100%",
    display: "block"
  },
  variants: [{
    props: {
      variant: "standard"
    },
    style: {
      // For titlebar under list item
      display: "flex",
      flexDirection: "column"
    }
  }, {
    props: {
      variant: "woven"
    },
    style: {
      height: "100%",
      alignSelf: "center",
      "&:nth-of-type(even)": {
        height: "70%"
      }
    }
  }, {
    props: {
      variant: "standard"
    },
    style: {
      [`& .${oi.img}`]: {
        height: "auto",
        flexGrow: 1
      }
    }
  }]
}), Fw = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiImageListItem"
  }), {
    children: s,
    className: a,
    cols: i = 1,
    component: l = "li",
    rows: c = 1,
    style: p,
    ...u
  } = r, {
    rowHeight: f = "auto",
    gap: g,
    variant: b
  } = m.useContext(Rl);
  let h = "auto";
  b === "woven" ? h = void 0 : f !== "auto" && (h = f * c + g * (c - 1));
  const d = {
    ...r,
    cols: i,
    component: l,
    gap: g,
    rowHeight: f,
    rows: c,
    variant: b
  }, y = Dw(d);
  return /* @__PURE__ */ x.jsx(zw, {
    as: l,
    className: W(y.root, y[b], a),
    ref: n,
    style: {
      height: h,
      gridColumnEnd: b !== "masonry" ? `span ${i}` : void 0,
      gridRowEnd: b !== "masonry" ? `span ${c}` : void 0,
      marginBottom: b === "masonry" ? g : void 0,
      breakInside: b === "masonry" ? "avoid" : void 0,
      ...p
    },
    ownerState: d,
    ...u,
    children: m.Children.map(s, (S) => /* @__PURE__ */ m.isValidElement(S) ? (process.env.NODE_ENV !== "production" && Ft.isFragment(S) && console.error(["MUI: The ImageListItem component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), S.type === "img" || Bo(S, ["Image"]) ? /* @__PURE__ */ m.cloneElement(S, {
      className: W(y.img, S.props.className)
    }) : S) : null)
  });
});
process.env.NODE_ENV !== "production" && (Fw.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `<img>`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Width of the item in number of grid columns.
   * @default 1
   */
  cols: mt,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Height of the item in number of grid rows.
   * @default 1
   */
  rows: mt,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function Vw(e) {
  return ae("MuiImageListItemBar", e);
}
const tN = le("MuiImageListItemBar", ["root", "positionBottom", "positionTop", "positionBelow", "actionPositionLeft", "actionPositionRight", "titleWrap", "titleWrapBottom", "titleWrapTop", "titleWrapBelow", "titleWrapActionPosLeft", "titleWrapActionPosRight", "title", "subtitle", "actionIcon", "actionIconActionPosLeft", "actionIconActionPosRight"]), _w = (e) => {
  const {
    classes: o,
    position: n,
    actionIcon: r,
    actionPosition: s
  } = e, a = {
    root: ["root", `position${L(n)}`, `actionPosition${L(s)}`],
    titleWrap: ["titleWrap", `titleWrap${L(n)}`, r && `titleWrapActionPos${L(s)}`],
    title: ["title"],
    subtitle: ["subtitle"],
    actionIcon: ["actionIcon", `actionIconActionPos${L(s)}`]
  };
  return ce(a, Vw, o);
}, Ww = M("div", {
  name: "MuiImageListItemBar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`position${L(n.position)}`]];
  }
})(Q(({
  theme: e
}) => ({
  position: "absolute",
  left: 0,
  right: 0,
  background: "rgba(0, 0, 0, 0.5)",
  display: "flex",
  alignItems: "center",
  fontFamily: e.typography.fontFamily,
  variants: [{
    props: {
      position: "bottom"
    },
    style: {
      bottom: 0
    }
  }, {
    props: {
      position: "top"
    },
    style: {
      top: 0
    }
  }, {
    props: {
      position: "below"
    },
    style: {
      position: "relative",
      background: "transparent",
      alignItems: "normal"
    }
  }]
}))), Uw = M("div", {
  name: "MuiImageListItemBar",
  slot: "TitleWrap",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.titleWrap, o[`titleWrap${L(n.position)}`], n.actionIcon && o[`titleWrapActionPos${L(n.actionPosition)}`]];
  }
})(Q(({
  theme: e
}) => ({
  flexGrow: 1,
  padding: "12px 16px",
  color: (e.vars || e).palette.common.white,
  overflow: "hidden",
  variants: [{
    props: {
      position: "below"
    },
    style: {
      padding: "6px 0 12px",
      color: "inherit"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.actionIcon && o.actionPosition === "left",
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      ownerState: o
    }) => o.actionIcon && o.actionPosition === "right",
    style: {
      paddingRight: 0
    }
  }]
}))), Hw = M("div", {
  name: "MuiImageListItemBar",
  slot: "Title",
  overridesResolver: (e, o) => o.title
})(Q(({
  theme: e
}) => ({
  fontSize: e.typography.pxToRem(16),
  lineHeight: "24px",
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap"
}))), Gw = M("div", {
  name: "MuiImageListItemBar",
  slot: "Subtitle",
  overridesResolver: (e, o) => o.subtitle
})(Q(({
  theme: e
}) => ({
  fontSize: e.typography.pxToRem(12),
  lineHeight: 1,
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap"
}))), qw = M("div", {
  name: "MuiImageListItemBar",
  slot: "ActionIcon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.actionIcon, o[`actionIconActionPos${L(n.actionPosition)}`]];
  }
})({
  variants: [{
    props: {
      actionPosition: "left"
    },
    style: {
      order: -1
    }
  }]
}), Yw = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiImageListItemBar"
  }), {
    actionIcon: s,
    actionPosition: a = "right",
    className: i,
    subtitle: l,
    title: c,
    position: p = "bottom",
    ...u
  } = r, f = {
    ...r,
    position: p,
    actionPosition: a
  }, g = _w(f);
  return /* @__PURE__ */ x.jsxs(Ww, {
    ownerState: f,
    className: W(g.root, i),
    ref: n,
    ...u,
    children: [/* @__PURE__ */ x.jsxs(Uw, {
      ownerState: f,
      className: g.titleWrap,
      children: [/* @__PURE__ */ x.jsx(Hw, {
        className: g.title,
        children: c
      }), l ? /* @__PURE__ */ x.jsx(Gw, {
        className: g.subtitle,
        children: l
      }) : null]
    }), s ? /* @__PURE__ */ x.jsx(qw, {
      ownerState: f,
      className: g.actionIcon,
      children: s
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (Yw.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An IconButton element to be used as secondary action target
   * (primary action target is the item itself).
   */
  actionIcon: t.node,
  /**
   * Position of secondary action IconButton.
   * @default 'right'
   */
  actionPosition: t.oneOf(["left", "right"]),
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Position of the title bar.
   * @default 'bottom'
   */
  position: t.oneOf(["below", "bottom", "top"]),
  /**
   * String or element serving as subtitle (support text).
   */
  subtitle: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Title to be displayed.
   */
  title: t.node
});
const Kw = (e) => {
  const {
    classes: o,
    disableUnderline: n
  } = e, s = ce({
    root: ["root", !n && "underline"],
    input: ["input"]
  }, Sx, o);
  return {
    ...o,
    // forward classes to the InputBase
    ...s
  };
}, Xw = M(Ea, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiInput",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [...wa(e, o), !n.disableUnderline && o.underline];
  }
})(Q(({
  theme: e
}) => {
  let n = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
  return e.vars && (n = `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`), {
    position: "relative",
    variants: [{
      props: ({
        ownerState: r
      }) => r.formControl,
      style: {
        "label + &": {
          marginTop: 16
        }
      }
    }, {
      props: ({
        ownerState: r
      }) => !r.disableUnderline,
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${Yo.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${Yo.error}`]: {
          "&::before, &::after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${n}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${Yo.disabled}, .${Yo.error}):before`]: {
          borderBottom: `2px solid ${(e.vars || e).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            borderBottom: `1px solid ${n}`
          }
        },
        [`&.${Yo.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }, ...Object.entries(e.palette).filter(Ue()).map(([r]) => ({
      props: {
        color: r,
        disableUnderline: !1
      },
      style: {
        "&::after": {
          borderBottom: `2px solid ${(e.vars || e).palette[r].main}`
        }
      }
    }))]
  };
})), Jw = M(Ra, {
  name: "MuiInput",
  slot: "Input",
  overridesResolver: Oa
})({}), Kr = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiInput"
  }), {
    disableUnderline: s = !1,
    components: a = {},
    componentsProps: i,
    fullWidth: l = !1,
    inputComponent: c = "input",
    multiline: p = !1,
    slotProps: u,
    slots: f = {},
    type: g = "text",
    ...b
  } = r, h = Kw(r), y = {
    root: {
      ownerState: {
        disableUnderline: s
      }
    }
  }, S = u ?? i ? Ct(u ?? i, y) : y, O = f.root ?? a.Root ?? Xw, C = f.input ?? a.Input ?? Jw;
  return /* @__PURE__ */ x.jsx(Yr, {
    slots: {
      root: O,
      input: C
    },
    slotProps: S,
    fullWidth: l,
    inputComponent: c,
    multiline: p,
    ref: n,
    type: g,
    ...b,
    classes: h
  });
});
process.env.NODE_ENV !== "production" && (Kr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * If `true`, the `input` will not have an underline.
   * @default false
   */
  disableUnderline: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
Kr.muiName = "Input";
function Zw(e) {
  return ae("MuiInputAdornment", e);
}
const wp = le("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
var Op;
const Qw = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, o[`position${L(n.position)}`], n.disablePointerEvents === !0 && o.disablePointerEvents, o[n.variant]];
}, eO = (e) => {
  const {
    classes: o,
    disablePointerEvents: n,
    hiddenLabel: r,
    position: s,
    size: a,
    variant: i
  } = e, l = {
    root: ["root", n && "disablePointerEvents", s && `position${L(s)}`, i, r && "hiddenLabel", a && `size${L(a)}`]
  };
  return ce(l, Zw, o);
}, tO = M("div", {
  name: "MuiInputAdornment",
  slot: "Root",
  overridesResolver: Qw
})(Q(({
  theme: e
}) => ({
  display: "flex",
  maxHeight: "2em",
  alignItems: "center",
  whiteSpace: "nowrap",
  color: (e.vars || e).palette.action.active,
  variants: [{
    props: {
      variant: "filled"
    },
    style: {
      [`&.${wp.positionStart}&:not(.${wp.hiddenLabel})`]: {
        marginTop: 16
      }
    }
  }, {
    props: {
      position: "start"
    },
    style: {
      marginRight: 8
    }
  }, {
    props: {
      position: "end"
    },
    style: {
      marginLeft: 8
    }
  }, {
    props: {
      disablePointerEvents: !0
    },
    style: {
      pointerEvents: "none"
    }
  }]
}))), oO = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiInputAdornment"
  }), {
    children: s,
    className: a,
    component: i = "div",
    disablePointerEvents: l = !1,
    disableTypography: c = !1,
    position: p,
    variant: u,
    ...f
  } = r, g = uo() || {};
  let b = u;
  u && g.variant && process.env.NODE_ENV !== "production" && u === g.variant && console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one."), g && !b && (b = g.variant);
  const h = {
    ...r,
    hiddenLabel: g.hiddenLabel,
    size: g.size,
    disablePointerEvents: l,
    position: p,
    variant: b
  }, d = eO(h);
  return /* @__PURE__ */ x.jsx(qr.Provider, {
    value: null,
    children: /* @__PURE__ */ x.jsx(tO, {
      as: i,
      ownerState: h,
      className: W(d.root, a),
      ref: n,
      ...f,
      children: typeof s == "string" && !c ? /* @__PURE__ */ x.jsx(kt, {
        color: "textSecondary",
        children: s
      }) : /* @__PURE__ */ x.jsxs(m.Fragment, {
        children: [p === "start" ? (
          /* notranslate needed while Google Translate will not fix zero-width space issue */
          Op || (Op = /* @__PURE__ */ x.jsx("span", {
            className: "notranslate",
            "aria-hidden": !0,
            children: "​"
          }))
        ) : null, s]
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (oO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or string.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Disable pointer events on the root.
   * This allows for the content of the adornment to focus the `input` on click.
   * @default false
   */
  disablePointerEvents: t.bool,
  /**
   * If children is a string then disable wrapping in a Typography component.
   * @default false
   */
  disableTypography: t.bool,
  /**
   * The position this adornment should appear relative to the `Input`.
   */
  position: t.oneOf(["end", "start"]).isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * Note: If you are using the `TextField` component or the `FormControl` component
   * you do not have to set this manually.
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
function nO(e) {
  return ae("MuiInputLabel", e);
}
const oN = le("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]), rO = (e) => {
  const {
    classes: o,
    formControl: n,
    size: r,
    shrink: s,
    disableAnimation: a,
    variant: i,
    required: l
  } = e, c = {
    root: ["root", n && "formControl", !a && "animated", s && "shrink", r && r !== "normal" && `size${L(r)}`, i],
    asterisk: [l && "asterisk"]
  }, p = ce(c, nO, o);
  return {
    ...o,
    // forward the focused, disabled, etc. classes to the FormLabel
    ...p
  };
}, sO = M(Ud, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiInputLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${wr.asterisk}`]: o.asterisk
    }, o.root, n.formControl && o.formControl, n.size === "small" && o.sizeSmall, n.shrink && o.shrink, !n.disableAnimation && o.animated, n.focused && o.focused, o[n.variant]];
  }
})(Q(({
  theme: e
}) => ({
  display: "block",
  transformOrigin: "top left",
  whiteSpace: "nowrap",
  overflow: "hidden",
  textOverflow: "ellipsis",
  maxWidth: "100%",
  variants: [{
    props: ({
      ownerState: o
    }) => o.formControl,
    style: {
      position: "absolute",
      left: 0,
      top: 0,
      // slight alteration to spec spacing to match visual spec result
      transform: "translate(0, 20px) scale(1)"
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      // Compensation for the `Input.inputSizeSmall` style.
      transform: "translate(0, 17px) scale(1)"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.shrink,
    style: {
      transform: "translate(0, -1.5px) scale(0.75)",
      transformOrigin: "top left",
      maxWidth: "133%"
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.disableAnimation,
    style: {
      transition: e.transitions.create(["color", "transform", "max-width"], {
        duration: e.transitions.duration.shorter,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      // Chrome's autofill feature gives the input field a yellow background.
      // Since the input field is behind the label in the HTML tree,
      // the input field is drawn last and hides the label with an opaque background color.
      // zIndex: 1 will raise the label above opaque background-colors of input.
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(12px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }
  }, {
    props: {
      variant: "filled",
      size: "small"
    },
    style: {
      transform: "translate(12px, 13px) scale(1)"
    }
  }, {
    props: ({
      variant: o,
      ownerState: n
    }) => o === "filled" && n.shrink,
    style: {
      userSelect: "none",
      pointerEvents: "auto",
      transform: "translate(12px, 7px) scale(0.75)",
      maxWidth: "calc(133% - 24px)"
    }
  }, {
    props: ({
      variant: o,
      ownerState: n,
      size: r
    }) => o === "filled" && n.shrink && r === "small",
    style: {
      transform: "translate(12px, 4px) scale(0.75)"
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      // see comment above on filled.zIndex
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(14px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }
  }, {
    props: {
      variant: "outlined",
      size: "small"
    },
    style: {
      transform: "translate(14px, 9px) scale(1)"
    }
  }, {
    props: ({
      variant: o,
      ownerState: n
    }) => o === "outlined" && n.shrink,
    style: {
      userSelect: "none",
      pointerEvents: "auto",
      // Theoretically, we should have (8+5)*2/0.75 = 34px
      // but it feels a better when it bleeds a bit on the left, so 32px.
      maxWidth: "calc(133% - 32px)",
      transform: "translate(14px, -9px) scale(0.75)"
    }
  }]
}))), Kd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    name: "MuiInputLabel",
    props: o
  }), {
    disableAnimation: s = !1,
    margin: a,
    shrink: i,
    variant: l,
    className: c,
    ...p
  } = r, u = uo();
  let f = i;
  typeof f > "u" && u && (f = u.filled || u.focused || u.adornedStart);
  const g = _o({
    props: r,
    muiFormControl: u,
    states: ["size", "variant", "required", "focused"]
  }), b = {
    ...r,
    disableAnimation: s,
    formControl: u,
    shrink: f,
    size: g.size,
    variant: g.variant,
    required: g.required,
    focused: g.focused
  }, h = rO(b);
  return /* @__PURE__ */ x.jsx(sO, {
    "data-shrink": f,
    ref: n,
    className: W(h.root, c),
    ...p,
    ownerState: b,
    classes: h
  });
});
process.env.NODE_ENV !== "production" && (Kd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: t.oneOfType([t.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), t.string]),
  /**
   * If `true`, the transition animation is disabled.
   * @default false
   */
  disableAnimation: t.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: t.bool,
  /**
   * If `true`, the `input` of this label is focused.
   */
  focused: t.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: t.oneOf(["dense"]),
  /**
   * if `true`, the label will indicate that the `input` is required.
   */
  required: t.bool,
  /**
   * If `true`, the label is shrunk.
   */
  shrink: t.bool,
  /**
   * The size of the component.
   * @default 'normal'
   */
  size: t.oneOfType([t.oneOf(["normal", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
function aO(e) {
  return ae("MuiLinearProgress", e);
}
const nN = le("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "bar1", "bar2", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]), Ii = 4, ji = No`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`, iO = typeof ji != "string" ? tn`
        animation: ${ji} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
      ` : null, Mi = No`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`, lO = typeof Mi != "string" ? tn`
        animation: ${Mi} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
      ` : null, Ai = No`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`, cO = typeof Ai != "string" ? tn`
        animation: ${Ai} 3s infinite linear;
      ` : null, pO = (e) => {
  const {
    classes: o,
    variant: n,
    color: r
  } = e, s = {
    root: ["root", `color${L(r)}`, n],
    dashed: ["dashed", `dashedColor${L(r)}`],
    bar1: ["bar", "bar1", `barColor${L(r)}`, (n === "indeterminate" || n === "query") && "bar1Indeterminate", n === "determinate" && "bar1Determinate", n === "buffer" && "bar1Buffer"],
    bar2: ["bar", "bar2", n !== "buffer" && `barColor${L(r)}`, n === "buffer" && `color${L(r)}`, (n === "indeterminate" || n === "query") && "bar2Indeterminate", n === "buffer" && "bar2Buffer"]
  };
  return ce(s, aO, o);
}, $l = (e, o) => e.vars ? e.vars.palette.LinearProgress[`${o}Bg`] : e.palette.mode === "light" ? Ro(e.palette[o].main, 0.62) : Eo(e.palette[o].main, 0.5), uO = M("span", {
  name: "MuiLinearProgress",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`color${L(n.color)}`], o[n.variant]];
  }
})(Q(({
  theme: e
}) => ({
  position: "relative",
  overflow: "hidden",
  display: "block",
  height: 4,
  // Fix Safari's bug during composition of different paint.
  zIndex: 0,
  "@media print": {
    colorAdjust: "exact"
  },
  variants: [...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      backgroundColor: $l(e, o)
    }
  })), {
    props: ({
      ownerState: o
    }) => o.color === "inherit" && o.variant !== "buffer",
    style: {
      "&::before": {
        content: '""',
        position: "absolute",
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        backgroundColor: "currentColor",
        opacity: 0.3
      }
    }
  }, {
    props: {
      variant: "buffer"
    },
    style: {
      backgroundColor: "transparent"
    }
  }, {
    props: {
      variant: "query"
    },
    style: {
      transform: "rotate(180deg)"
    }
  }]
}))), dO = M("span", {
  name: "MuiLinearProgress",
  slot: "Dashed",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.dashed, o[`dashedColor${L(n.color)}`]];
  }
})(Q(({
  theme: e
}) => ({
  position: "absolute",
  marginTop: 0,
  height: "100%",
  width: "100%",
  backgroundSize: "10px 10px",
  backgroundPosition: "0 -23px",
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      opacity: 0.3,
      backgroundImage: "radial-gradient(currentColor 0%, currentColor 16%, transparent 42%)"
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => {
    const n = $l(e, o);
    return {
      props: {
        color: o
      },
      style: {
        backgroundImage: `radial-gradient(${n} 0%, ${n} 16%, transparent 42%)`
      }
    };
  })]
})), cO || {
  // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
  animation: `${Ai} 3s infinite linear`
}), fO = M("span", {
  name: "MuiLinearProgress",
  slot: "Bar1",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.bar, o.bar1, o[`barColor${L(n.color)}`], (n.variant === "indeterminate" || n.variant === "query") && o.bar1Indeterminate, n.variant === "determinate" && o.bar1Determinate, n.variant === "buffer" && o.bar1Buffer];
  }
})(Q(({
  theme: e
}) => ({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left",
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      backgroundColor: "currentColor"
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      backgroundColor: (e.vars || e).palette[o].main
    }
  })), {
    props: {
      variant: "determinate"
    },
    style: {
      transition: `transform .${Ii}s linear`
    }
  }, {
    props: {
      variant: "buffer"
    },
    style: {
      zIndex: 1,
      transition: `transform .${Ii}s linear`
    }
  }, {
    props: ({
      ownerState: o
    }) => o.variant === "indeterminate" || o.variant === "query",
    style: {
      width: "auto"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.variant === "indeterminate" || o.variant === "query",
    style: iO || {
      animation: `${ji} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite`
    }
  }]
}))), mO = M("span", {
  name: "MuiLinearProgress",
  slot: "Bar2",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.bar, o.bar2, o[`barColor${L(n.color)}`], (n.variant === "indeterminate" || n.variant === "query") && o.bar2Indeterminate, n.variant === "buffer" && o.bar2Buffer];
  }
})(Q(({
  theme: e
}) => ({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left",
  variants: [...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      "--LinearProgressBar2-barColor": (e.vars || e).palette[o].main
    }
  })), {
    props: ({
      ownerState: o
    }) => o.variant !== "buffer" && o.color !== "inherit",
    style: {
      backgroundColor: "var(--LinearProgressBar2-barColor, currentColor)"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.variant !== "buffer" && o.color === "inherit",
    style: {
      backgroundColor: "currentColor"
    }
  }, {
    props: {
      color: "inherit"
    },
    style: {
      opacity: 0.3
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o,
      variant: "buffer"
    },
    style: {
      backgroundColor: $l(e, o),
      transition: `transform .${Ii}s linear`
    }
  })), {
    props: ({
      ownerState: o
    }) => o.variant === "indeterminate" || o.variant === "query",
    style: {
      width: "auto"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.variant === "indeterminate" || o.variant === "query",
    style: lO || {
      animation: `${Mi} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite`
    }
  }]
}))), Xd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiLinearProgress"
  }), {
    className: s,
    color: a = "primary",
    value: i,
    valueBuffer: l,
    variant: c = "indeterminate",
    ...p
  } = r, u = {
    ...r,
    color: a,
    variant: c
  }, f = pO(u), g = go(), b = {}, h = {
    bar1: {},
    bar2: {}
  };
  if (c === "determinate" || c === "buffer")
    if (i !== void 0) {
      b["aria-valuenow"] = Math.round(i), b["aria-valuemin"] = 0, b["aria-valuemax"] = 100;
      let d = i - 100;
      g && (d = -d), h.bar1.transform = `translateX(${d}%)`;
    } else process.env.NODE_ENV !== "production" && console.error("MUI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
  if (c === "buffer")
    if (l !== void 0) {
      let d = (l || 0) - 100;
      g && (d = -d), h.bar2.transform = `translateX(${d}%)`;
    } else process.env.NODE_ENV !== "production" && console.error("MUI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
  return /* @__PURE__ */ x.jsxs(uO, {
    className: W(f.root, s),
    ownerState: u,
    role: "progressbar",
    ...b,
    ref: n,
    ...p,
    children: [c === "buffer" ? /* @__PURE__ */ x.jsx(dO, {
      className: f.dashed,
      ownerState: u
    }) : null, /* @__PURE__ */ x.jsx(fO, {
      className: f.bar1,
      ownerState: u,
      style: h.bar1
    }), c === "determinate" ? null : /* @__PURE__ */ x.jsx(mO, {
      className: f.bar2,
      ownerState: u,
      style: h.bar2
    })]
  });
});
process.env.NODE_ENV !== "production" && (Xd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the progress indicator for the determinate and buffer variants.
   * Value between 0 and 100.
   */
  value: t.number,
  /**
   * The value for the buffer variant.
   * Value between 0 and 100.
   */
  valueBuffer: t.number,
  /**
   * The variant to use.
   * Use indeterminate or query when there is no progress value.
   * @default 'indeterminate'
   */
  variant: t.oneOf(["buffer", "determinate", "indeterminate", "query"])
});
function gO(e) {
  return ae("MuiLink", e);
}
const bO = le("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]), hO = ({
  theme: e,
  ownerState: o
}) => {
  const n = o.color, r = Ko(e, `palette.${n}.main`, !1) || Ko(e, `palette.${n}`, !1) || o.color, s = Ko(e, `palette.${n}.mainChannel`) || Ko(e, `palette.${n}Channel`);
  return "vars" in e && s ? `rgba(${s} / 0.4)` : Ne(r, 0.4);
}, Ep = {
  primary: !0,
  secondary: !0,
  error: !0,
  info: !0,
  success: !0,
  warning: !0,
  textPrimary: !0,
  textSecondary: !0,
  textDisabled: !0
}, yO = (e) => {
  const {
    classes: o,
    component: n,
    focusVisible: r,
    underline: s
  } = e, a = {
    root: ["root", `underline${L(s)}`, n === "button" && "button", r && "focusVisible"]
  };
  return ce(a, gO, o);
}, vO = M(kt, {
  name: "MuiLink",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`underline${L(n.underline)}`], n.component === "button" && o.button];
  }
})(Q(({
  theme: e
}) => ({
  variants: [{
    props: {
      underline: "none"
    },
    style: {
      textDecoration: "none"
    }
  }, {
    props: {
      underline: "hover"
    },
    style: {
      textDecoration: "none",
      "&:hover": {
        textDecoration: "underline"
      }
    }
  }, {
    props: {
      underline: "always"
    },
    style: {
      textDecoration: "underline",
      "&:hover": {
        textDecorationColor: "inherit"
      }
    }
  }, {
    props: ({
      underline: o,
      ownerState: n
    }) => o === "always" && n.color !== "inherit",
    style: {
      textDecorationColor: "var(--Link-underlineColor)"
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      underline: "always",
      color: o
    },
    style: {
      "--Link-underlineColor": e.vars ? `rgba(${e.vars.palette[o].mainChannel} / 0.4)` : Ne(e.palette[o].main, 0.4)
    }
  })), {
    props: {
      underline: "always",
      color: "textPrimary"
    },
    style: {
      "--Link-underlineColor": e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / 0.4)` : Ne(e.palette.text.primary, 0.4)
    }
  }, {
    props: {
      underline: "always",
      color: "textSecondary"
    },
    style: {
      "--Link-underlineColor": e.vars ? `rgba(${e.vars.palette.text.secondaryChannel} / 0.4)` : Ne(e.palette.text.secondary, 0.4)
    }
  }, {
    props: {
      underline: "always",
      color: "textDisabled"
    },
    style: {
      "--Link-underlineColor": (e.vars || e).palette.text.disabled
    }
  }, {
    props: {
      component: "button"
    },
    style: {
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // Reset
      "&::-moz-focus-inner": {
        borderStyle: "none"
        // Remove Firefox dotted outline.
      },
      [`&.${bO.focusVisible}`]: {
        outline: "auto"
      }
    }
  }]
}))), xO = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiLink"
  }), s = Ot(), {
    className: a,
    color: i = "primary",
    component: l = "a",
    onBlur: c,
    onFocus: p,
    TypographyClasses: u,
    underline: f = "always",
    variant: g = "inherit",
    sx: b,
    ...h
  } = r, [d, y] = m.useState(!1), S = (w) => {
    ko(w.target) || y(!1), c && c(w);
  }, O = (w) => {
    ko(w.target) && y(!0), p && p(w);
  }, C = {
    ...r,
    color: i,
    component: l,
    focusVisible: d,
    underline: f,
    variant: g
  }, T = yO(C);
  return /* @__PURE__ */ x.jsx(vO, {
    color: i,
    className: W(T.root, a),
    classes: u,
    component: l,
    onBlur: S,
    onFocus: O,
    ref: n,
    ownerState: C,
    variant: g,
    ...h,
    sx: [...Ep[i] === void 0 ? [{
      color: i
    }] : [], ...Array.isArray(b) ? b : [b]],
    style: {
      ...h.style,
      ...f === "always" && i !== "inherit" && !Ep[i] && {
        "--Link-underlineColor": hO({
          theme: s,
          ownerState: C
        })
      }
    }
  });
});
process.env.NODE_ENV !== "production" && (xO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the link.
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: en,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * `classes` prop applied to the [`Typography`](https://mui.com/material-ui/api/typography/) element.
   */
  TypographyClasses: t.object,
  /**
   * Controls when the link should have an underline.
   * @default 'always'
   */
  underline: t.oneOf(["always", "hover", "none"]),
  /**
   * Applies the theme typography styles.
   * @default 'inherit'
   */
  variant: t.oneOfType([t.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), t.string])
});
const Xt = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (Xt.displayName = "ListContext");
function SO(e) {
  return ae("MuiList", e);
}
const rN = le("MuiList", ["root", "padding", "dense", "subheader"]), TO = (e) => {
  const {
    classes: o,
    disablePadding: n,
    dense: r,
    subheader: s
  } = e;
  return ce({
    root: ["root", !n && "padding", r && "dense", s && "subheader"]
  }, SO, o);
}, CO = M("ul", {
  name: "MuiList",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disablePadding && o.padding, n.dense && o.dense, n.subheader && o.subheader];
  }
})({
  listStyle: "none",
  margin: 0,
  padding: 0,
  position: "relative",
  variants: [{
    props: ({
      ownerState: e
    }) => !e.disablePadding,
    style: {
      paddingTop: 8,
      paddingBottom: 8
    }
  }, {
    props: ({
      ownerState: e
    }) => e.subheader,
    style: {
      paddingTop: 0
    }
  }]
}), Jd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiList"
  }), {
    children: s,
    className: a,
    component: i = "ul",
    dense: l = !1,
    disablePadding: c = !1,
    subheader: p,
    ...u
  } = r, f = m.useMemo(() => ({
    dense: l
  }), [l]), g = {
    ...r,
    component: i,
    dense: l,
    disablePadding: c
  }, b = TO(g);
  return /* @__PURE__ */ x.jsx(Xt.Provider, {
    value: f,
    children: /* @__PURE__ */ x.jsxs(CO, {
      as: i,
      className: W(b.root, a),
      ref: n,
      ownerState: g,
      ...u,
      children: [p, s]
    })
  });
});
process.env.NODE_ENV !== "production" && (Jd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */
  disablePadding: t.bool,
  /**
   * The content of the subheader, normally `ListSubheader`.
   */
  subheader: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function wO(e) {
  return ae("MuiListItem", e);
}
const sN = le("MuiListItem", ["root", "container", "dense", "alignItemsFlexStart", "divider", "gutters", "padding", "secondaryAction"]);
function OO(e) {
  return ae("MuiListItemButton", e);
}
const Pn = le("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]), EO = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.dense && o.dense, n.alignItems === "flex-start" && o.alignItemsFlexStart, n.divider && o.divider, !n.disableGutters && o.gutters];
}, RO = (e) => {
  const {
    alignItems: o,
    classes: n,
    dense: r,
    disabled: s,
    disableGutters: a,
    divider: i,
    selected: l
  } = e, p = ce({
    root: ["root", r && "dense", !a && "gutters", i && "divider", s && "disabled", o === "flex-start" && "alignItemsFlexStart", l && "selected"]
  }, OO, n);
  return {
    ...n,
    ...p
  };
}, $O = M(wt, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiListItemButton",
  slot: "Root",
  overridesResolver: EO
})(Q(({
  theme: e
}) => ({
  display: "flex",
  flexGrow: 1,
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  minWidth: 0,
  boxSizing: "border-box",
  textAlign: "left",
  paddingTop: 8,
  paddingBottom: 8,
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  }),
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${Pn.selected}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity),
    [`&.${Pn.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    }
  },
  [`&.${Pn.selected}:hover`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity)
    }
  },
  [`&.${Pn.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`&.${Pn.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  },
  variants: [{
    props: ({
      ownerState: o
    }) => o.divider,
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
      backgroundClip: "padding-box"
    }
  }, {
    props: {
      alignItems: "flex-start"
    },
    style: {
      alignItems: "flex-start"
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: o
    }) => o.dense,
    style: {
      paddingTop: 4,
      paddingBottom: 4
    }
  }]
}))), kO = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiListItemButton"
  }), {
    alignItems: s = "center",
    autoFocus: a = !1,
    component: i = "div",
    children: l,
    dense: c = !1,
    disableGutters: p = !1,
    divider: u = !1,
    focusVisibleClassName: f,
    selected: g = !1,
    className: b,
    ...h
  } = r, d = m.useContext(Xt), y = m.useMemo(() => ({
    dense: c || d.dense || !1,
    alignItems: s,
    disableGutters: p
  }), [s, d.dense, c, p]), S = m.useRef(null);
  Rt(() => {
    a && (S.current ? S.current.focus() : process.env.NODE_ENV !== "production" && console.error("MUI: Unable to set focus to a ListItemButton whose component has not been rendered."));
  }, [a]);
  const O = {
    ...r,
    alignItems: s,
    dense: y.dense,
    disableGutters: p,
    divider: u,
    selected: g
  }, C = RO(O), T = Ye(S, n);
  return /* @__PURE__ */ x.jsx(Xt.Provider, {
    value: y,
    children: /* @__PURE__ */ x.jsx($O, {
      ref: T,
      href: h.href || h.to,
      component: (h.href || h.to) && i === "div" ? "button" : i,
      focusVisibleClassName: W(C.focusVisible, f),
      ownerState: O,
      className: W(C.root, b),
      ...h,
      classes: C,
      children: l
    })
  });
});
process.env.NODE_ENV !== "production" && (kO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Defines the `align-items` style property.
   * @default 'center'
   */
  alignItems: t.oneOf(["center", "flex-start"]),
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */
  divider: t.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  href: t.string,
  /**
   * Use to apply selected styling.
   * @default false
   */
  selected: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function PO(e) {
  return ae("MuiListItemSecondaryAction", e);
}
const aN = le("MuiListItemSecondaryAction", ["root", "disableGutters"]), NO = (e) => {
  const {
    disableGutters: o,
    classes: n
  } = e;
  return ce({
    root: ["root", o && "disableGutters"]
  }, PO, n);
}, IO = M("div", {
  name: "MuiListItemSecondaryAction",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.disableGutters && o.disableGutters];
  }
})({
  position: "absolute",
  right: 16,
  top: "50%",
  transform: "translateY(-50%)",
  variants: [{
    props: ({
      ownerState: e
    }) => e.disableGutters,
    style: {
      right: 0
    }
  }]
}), kl = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiListItemSecondaryAction"
  }), {
    className: s,
    ...a
  } = r, i = m.useContext(Xt), l = {
    ...r,
    disableGutters: i.disableGutters
  }, c = NO(l);
  return /* @__PURE__ */ x.jsx(IO, {
    className: W(c.root, s),
    ownerState: l,
    ref: n,
    ...a
  });
});
process.env.NODE_ENV !== "production" && (kl.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or selection control.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
kl.muiName = "ListItemSecondaryAction";
const jO = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.dense && o.dense, n.alignItems === "flex-start" && o.alignItemsFlexStart, n.divider && o.divider, !n.disableGutters && o.gutters, !n.disablePadding && o.padding, n.hasSecondaryAction && o.secondaryAction];
}, MO = (e) => {
  const {
    alignItems: o,
    classes: n,
    dense: r,
    disableGutters: s,
    disablePadding: a,
    divider: i,
    hasSecondaryAction: l
  } = e;
  return ce({
    root: ["root", r && "dense", !s && "gutters", !a && "padding", i && "divider", o === "flex-start" && "alignItemsFlexStart", l && "secondaryAction"],
    container: ["container"]
  }, wO, n);
}, AO = M("div", {
  name: "MuiListItem",
  slot: "Root",
  overridesResolver: jO
})(Q(({
  theme: e
}) => ({
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  width: "100%",
  boxSizing: "border-box",
  textAlign: "left",
  variants: [{
    props: ({
      ownerState: o
    }) => !o.disablePadding,
    style: {
      paddingTop: 8,
      paddingBottom: 8
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.disablePadding && o.dense,
    style: {
      paddingTop: 4,
      paddingBottom: 4
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.disablePadding && !o.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.disablePadding && !!o.secondaryAction,
    style: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }
  }, {
    props: ({
      ownerState: o
    }) => !!o.secondaryAction,
    style: {
      [`& > .${Pn.root}`]: {
        paddingRight: 48
      }
    }
  }, {
    props: {
      alignItems: "flex-start"
    },
    style: {
      alignItems: "flex-start"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.divider,
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
      backgroundClip: "padding-box"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.button,
    style: {
      transition: e.transitions.create("background-color", {
        duration: e.transitions.duration.shortest
      }),
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (e.vars || e).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.hasSecondaryAction,
    style: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }
  }]
}))), BO = M("li", {
  name: "MuiListItem",
  slot: "Container",
  overridesResolver: (e, o) => o.container
})({
  position: "relative"
}), LO = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiListItem"
  }), {
    alignItems: s = "center",
    children: a,
    className: i,
    component: l,
    components: c = {},
    componentsProps: p = {},
    ContainerComponent: u = "li",
    ContainerProps: {
      className: f,
      ...g
    } = {},
    dense: b = !1,
    disableGutters: h = !1,
    disablePadding: d = !1,
    divider: y = !1,
    secondaryAction: S,
    slotProps: O = {},
    slots: C = {},
    ...T
  } = r, w = m.useContext(Xt), E = m.useMemo(() => ({
    dense: b || w.dense || !1,
    alignItems: s,
    disableGutters: h
  }), [s, w.dense, b, h]), $ = m.useRef(null), P = m.Children.toArray(a), N = P.length && Bo(P[P.length - 1], ["ListItemSecondaryAction"]), v = {
    ...r,
    alignItems: s,
    dense: E.dense,
    disableGutters: h,
    disablePadding: d,
    divider: y,
    hasSecondaryAction: N
  }, R = MO(v), A = Ye($, n), j = C.root || c.Root || AO, k = O.root || p.root || {}, D = {
    className: W(R.root, k.className, i),
    ...T
  };
  let B = l || "li";
  return N ? (B = !D.component && !l ? "div" : B, u === "li" && (B === "li" ? B = "div" : D.component === "li" && (D.component = "div")), /* @__PURE__ */ x.jsx(Xt.Provider, {
    value: E,
    children: /* @__PURE__ */ x.jsxs(BO, {
      as: u,
      className: W(R.container, f),
      ref: A,
      ownerState: v,
      ...g,
      children: [/* @__PURE__ */ x.jsx(j, {
        ...k,
        ...!Lo(j) && {
          as: B,
          ownerState: {
            ...v,
            ...k.ownerState
          }
        },
        ...D,
        children: P
      }), P.pop()]
    })
  })) : /* @__PURE__ */ x.jsx(Xt.Provider, {
    value: E,
    children: /* @__PURE__ */ x.jsxs(j, {
      ...k,
      as: B,
      ref: A,
      ...!Lo(j) && {
        ownerState: {
          ...v,
          ...k.ownerState
        }
      },
      ...D,
      children: [P, S && /* @__PURE__ */ x.jsx(kl, {
        children: S
      })]
    })
  });
});
process.env.NODE_ENV !== "production" && (LO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Defines the `align-items` style property.
   * @default 'center'
   */
  alignItems: t.oneOf(["center", "flex-start"]),
  /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */
  children: xt(t.node, (e) => {
    const o = m.Children.toArray(e.children);
    let n = -1;
    for (let r = o.length - 1; r >= 0; r -= 1) {
      const s = o[r];
      if (Bo(s, ["ListItemSecondaryAction"])) {
        n = r;
        break;
      }
    }
    return n !== -1 && n !== o.length - 1 ? new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.") : null;
  }),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  components: t.shape({
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  componentsProps: t.shape({
    root: t.object
  }),
  /**
   * The container component used when a `ListItemSecondaryAction` is the last child.
   * @default 'li'
   * @deprecated Use the `component` or `slots.root` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ContainerComponent: en,
  /**
   * Props applied to the container component if used.
   * @default {}
   * @deprecated Use the `slotProps.root` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ContainerProps: t.object,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, all padding is removed.
   * @default false
   */
  disablePadding: t.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */
  divider: t.bool,
  /**
   * The element to display at the end of ListItem.
   */
  secondaryAction: t.node,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @default {}
   */
  slotProps: t.shape({
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function DO(e) {
  return ae("MuiListItemAvatar", e);
}
const iN = le("MuiListItemAvatar", ["root", "alignItemsFlexStart"]), zO = (e) => {
  const {
    alignItems: o,
    classes: n
  } = e;
  return ce({
    root: ["root", o === "flex-start" && "alignItemsFlexStart"]
  }, DO, n);
}, FO = M("div", {
  name: "MuiListItemAvatar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.alignItems === "flex-start" && o.alignItemsFlexStart];
  }
})({
  minWidth: 56,
  flexShrink: 0,
  variants: [{
    props: {
      alignItems: "flex-start"
    },
    style: {
      marginTop: 8
    }
  }]
}), VO = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiListItemAvatar"
  }), {
    className: s,
    ...a
  } = r, i = m.useContext(Xt), l = {
    ...r,
    alignItems: i.alignItems
  }, c = zO(l);
  return /* @__PURE__ */ x.jsx(FO, {
    className: W(c.root, s),
    ownerState: l,
    ref: n,
    ...a
  });
});
process.env.NODE_ENV !== "production" && (VO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `Avatar`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function _O(e) {
  return ae("MuiListItemIcon", e);
}
const Rp = le("MuiListItemIcon", ["root", "alignItemsFlexStart"]), WO = (e) => {
  const {
    alignItems: o,
    classes: n
  } = e;
  return ce({
    root: ["root", o === "flex-start" && "alignItemsFlexStart"]
  }, _O, n);
}, UO = M("div", {
  name: "MuiListItemIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.alignItems === "flex-start" && o.alignItemsFlexStart];
  }
})(Q(({
  theme: e
}) => ({
  minWidth: 56,
  color: (e.vars || e).palette.action.active,
  flexShrink: 0,
  display: "inline-flex",
  variants: [{
    props: {
      alignItems: "flex-start"
    },
    style: {
      marginTop: 8
    }
  }]
}))), HO = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiListItemIcon"
  }), {
    className: s,
    ...a
  } = r, i = m.useContext(Xt), l = {
    ...r,
    alignItems: i.alignItems
  }, c = WO(l);
  return /* @__PURE__ */ x.jsx(UO, {
    className: W(c.root, s),
    ownerState: l,
    ref: n,
    ...a
  });
});
process.env.NODE_ENV !== "production" && (HO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `Icon`, `SvgIcon`,
   * or a `@mui/icons-material` SVG icon element.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function GO(e) {
  return ae("MuiListItemText", e);
}
const In = le("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]), qO = (e) => {
  const {
    classes: o,
    inset: n,
    primary: r,
    secondary: s,
    dense: a
  } = e;
  return ce({
    root: ["root", n && "inset", a && "dense", r && s && "multiline"],
    primary: ["primary"],
    secondary: ["secondary"]
  }, GO, o);
}, YO = M("div", {
  name: "MuiListItemText",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${In.primary}`]: o.primary
    }, {
      [`& .${In.secondary}`]: o.secondary
    }, o.root, n.inset && o.inset, n.primary && n.secondary && o.multiline, n.dense && o.dense];
  }
})({
  flex: "1 1 auto",
  minWidth: 0,
  marginTop: 4,
  marginBottom: 4,
  [`.${Us.root}:where(& .${In.primary})`]: {
    display: "block"
  },
  [`.${Us.root}:where(& .${In.secondary})`]: {
    display: "block"
  },
  variants: [{
    props: ({
      ownerState: e
    }) => e.primary && e.secondary,
    style: {
      marginTop: 6,
      marginBottom: 6
    }
  }, {
    props: ({
      ownerState: e
    }) => e.inset,
    style: {
      paddingLeft: 56
    }
  }]
}), KO = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiListItemText"
  }), {
    children: s,
    className: a,
    disableTypography: i = !1,
    inset: l = !1,
    primary: c,
    primaryTypographyProps: p,
    secondary: u,
    secondaryTypographyProps: f,
    slots: g = {},
    slotProps: b = {},
    ...h
  } = r, {
    dense: d
  } = m.useContext(Xt);
  let y = c ?? s, S = u;
  const O = {
    ...r,
    disableTypography: i,
    inset: l,
    primary: !!y,
    secondary: !!S,
    dense: d
  }, C = qO(O), T = {
    slots: g,
    slotProps: {
      primary: p,
      secondary: f,
      ...b
    }
  }, [w, E] = je("primary", {
    className: C.primary,
    elementType: kt,
    externalForwardedProps: T,
    ownerState: O
  }), [$, P] = je("secondary", {
    className: C.secondary,
    elementType: kt,
    externalForwardedProps: T,
    ownerState: O
  });
  return y != null && y.type !== kt && !i && (y = /* @__PURE__ */ x.jsx(w, {
    variant: d ? "body2" : "body1",
    component: E != null && E.variant ? void 0 : "span",
    ...E,
    children: y
  })), S != null && S.type !== kt && !i && (S = /* @__PURE__ */ x.jsx($, {
    variant: "body2",
    color: "textSecondary",
    ...P,
    children: S
  })), /* @__PURE__ */ x.jsxs(YO, {
    className: W(C.root, a),
    ownerState: O,
    ref: n,
    ...h,
    children: [y, S]
  });
});
process.env.NODE_ENV !== "production" && (KO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Alias for the `primary` prop.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the children won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `children` (or `primary`) text, and optional `secondary` text
   * with the Typography component.
   * @default false
   */
  disableTypography: t.bool,
  /**
   * If `true`, the children are indented.
   * This should be used if there is no left avatar or left icon.
   * @default false
   */
  inset: t.bool,
  /**
   * The main content element.
   */
  primary: t.node,
  /**
   * These props will be forwarded to the primary typography component
   * (as long as disableTypography is not `true`).
   * @deprecated Use `slotProps.primary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  primaryTypographyProps: t.object,
  /**
   * The secondary content element.
   */
  secondary: t.node,
  /**
   * These props will be forwarded to the secondary typography component
   * (as long as disableTypography is not `true`).
   * @deprecated Use `slotProps.secondary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  secondaryTypographyProps: t.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    primary: t.oneOfType([t.func, t.object]),
    secondary: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    primary: t.elementType,
    secondary: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function ni(e, o, n) {
  return e === o ? e.firstChild : o && o.nextElementSibling ? o.nextElementSibling : n ? null : e.firstChild;
}
function $p(e, o, n) {
  return e === o ? n ? e.firstChild : e.lastChild : o && o.previousElementSibling ? o.previousElementSibling : n ? null : e.lastChild;
}
function Zd(e, o) {
  if (o === void 0)
    return !0;
  let n = e.innerText;
  return n === void 0 && (n = e.textContent), n = n.trim().toLowerCase(), n.length === 0 ? !1 : o.repeating ? n[0] === o.keys[0] : n.startsWith(o.keys.join(""));
}
function lr(e, o, n, r, s, a) {
  let i = !1, l = s(e, o, o ? n : !1);
  for (; l; ) {
    if (l === e.firstChild) {
      if (i)
        return !1;
      i = !0;
    }
    const c = r ? !1 : l.disabled || l.getAttribute("aria-disabled") === "true";
    if (!l.hasAttribute("tabindex") || !Zd(l, a) || c)
      l = s(e, l, n);
    else
      return l.focus(), !0;
  }
  return !1;
}
const Qd = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    // private
    // eslint-disable-next-line react/prop-types
    actions: r,
    autoFocus: s = !1,
    autoFocusItem: a = !1,
    children: i,
    className: l,
    disabledItemsFocusable: c = !1,
    disableListWrap: p = !1,
    onKeyDown: u,
    variant: f = "selectedMenu",
    ...g
  } = o, b = m.useRef(null), h = m.useRef({
    keys: [],
    repeating: !0,
    previousKeyMatched: !0,
    lastTime: null
  });
  Rt(() => {
    s && b.current.focus();
  }, [s]), m.useImperativeHandle(r, () => ({
    adjustStyleForScrollbar: (C, {
      direction: T
    }) => {
      const w = !b.current.style.width;
      if (C.clientHeight < b.current.clientHeight && w) {
        const E = `${_u(Pt(C))}px`;
        b.current.style[T === "rtl" ? "paddingLeft" : "paddingRight"] = E, b.current.style.width = `calc(100% + ${E})`;
      }
      return b.current;
    }
  }), []);
  const d = (C) => {
    const T = b.current, w = C.key;
    if (C.ctrlKey || C.metaKey || C.altKey) {
      u && u(C);
      return;
    }
    const $ = lt(T).activeElement;
    if (w === "ArrowDown")
      C.preventDefault(), lr(T, $, p, c, ni);
    else if (w === "ArrowUp")
      C.preventDefault(), lr(T, $, p, c, $p);
    else if (w === "Home")
      C.preventDefault(), lr(T, null, p, c, ni);
    else if (w === "End")
      C.preventDefault(), lr(T, null, p, c, $p);
    else if (w.length === 1) {
      const P = h.current, N = w.toLowerCase(), v = performance.now();
      P.keys.length > 0 && (v - P.lastTime > 500 ? (P.keys = [], P.repeating = !0, P.previousKeyMatched = !0) : P.repeating && N !== P.keys[0] && (P.repeating = !1)), P.lastTime = v, P.keys.push(N);
      const R = $ && !P.repeating && Zd($, P);
      P.previousKeyMatched && (R || lr(T, $, !1, c, ni, P)) ? C.preventDefault() : P.previousKeyMatched = !1;
    }
    u && u(C);
  }, y = Ye(b, n);
  let S = -1;
  m.Children.forEach(i, (C, T) => {
    if (!/* @__PURE__ */ m.isValidElement(C)) {
      S === T && (S += 1, S >= i.length && (S = -1));
      return;
    }
    process.env.NODE_ENV !== "production" && Ft.isFragment(C) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), C.props.disabled || (f === "selectedMenu" && C.props.selected || S === -1) && (S = T), S === T && (C.props.disabled || C.props.muiSkipListHighlight || C.type.muiSkipListHighlight) && (S += 1, S >= i.length && (S = -1));
  });
  const O = m.Children.map(i, (C, T) => {
    if (T === S) {
      const w = {};
      return a && (w.autoFocus = !0), C.props.tabIndex === void 0 && f === "selectedMenu" && (w.tabIndex = 0), /* @__PURE__ */ m.cloneElement(C, w);
    }
    return C;
  });
  return /* @__PURE__ */ x.jsx(Jd, {
    role: "menu",
    ref: y,
    className: l,
    onKeyDown: d,
    tabIndex: s ? 0 : -1,
    ...g,
    children: O
  });
});
process.env.NODE_ENV !== "production" && (Qd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, will focus the `[role="menu"]` container and move into tab order.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
   * if `variant="selectedMenu"`.
   * @default false
   */
  autoFocusItem: t.bool,
  /**
   * MenuList contents, normally `MenuItem`s.
   */
  children: t.node,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: t.bool,
  /**
   * If `true`, the menu items will not wrap focus.
   * @default false
   */
  disableListWrap: t.bool,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
   * and the vertical alignment relative to the anchor element.
   * @default 'selectedMenu'
   */
  variant: t.oneOf(["menu", "selectedMenu"])
});
function XO(e) {
  return ae("MuiPopover", e);
}
const lN = le("MuiPopover", ["root", "paper"]);
function kp(e, o) {
  let n = 0;
  return typeof o == "number" ? n = o : o === "center" ? n = e.height / 2 : o === "bottom" && (n = e.height), n;
}
function Pp(e, o) {
  let n = 0;
  return typeof o == "number" ? n = o : o === "center" ? n = e.width / 2 : o === "right" && (n = e.width), n;
}
function Np(e) {
  return [e.horizontal, e.vertical].map((o) => typeof o == "number" ? `${o}px` : o).join(" ");
}
function Ms(e) {
  return typeof e == "function" ? e() : e;
}
const JO = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    paper: ["paper"]
  }, XO, o);
}, ZO = M(ka, {
  name: "MuiPopover",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), ef = M(Qt, {
  name: "MuiPopover",
  slot: "Paper",
  overridesResolver: (e, o) => o.paper
})({
  position: "absolute",
  overflowY: "auto",
  overflowX: "hidden",
  // So we see the popover when it's empty.
  // It's most likely on issue on userland.
  minWidth: 16,
  minHeight: 16,
  maxWidth: "calc(100% - 32px)",
  maxHeight: "calc(100% - 32px)",
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), tf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiPopover"
  }), {
    action: s,
    anchorEl: a,
    anchorOrigin: i = {
      vertical: "top",
      horizontal: "left"
    },
    anchorPosition: l,
    anchorReference: c = "anchorEl",
    children: p,
    className: u,
    container: f,
    elevation: g = 8,
    marginThreshold: b = 16,
    open: h,
    PaperProps: d = {},
    slots: y = {},
    slotProps: S = {},
    transformOrigin: O = {
      vertical: "top",
      horizontal: "left"
    },
    TransitionComponent: C = Un,
    transitionDuration: T = "auto",
    TransitionProps: {
      onEntering: w,
      ...E
    } = {},
    disableScrollLock: $ = !1,
    ...P
  } = r, N = (S == null ? void 0 : S.paper) ?? d, v = m.useRef(), R = {
    ...r,
    anchorOrigin: i,
    anchorReference: c,
    elevation: g,
    marginThreshold: b,
    externalPaperSlotProps: N,
    transformOrigin: O,
    TransitionComponent: C,
    transitionDuration: T,
    TransitionProps: E
  }, A = JO(R), j = m.useCallback(() => {
    if (c === "anchorPosition")
      return process.env.NODE_ENV !== "production" && (l || console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.')), l;
    const oe = Ms(a), he = oe && oe.nodeType === 1 ? oe : lt(v.current).body, z = he.getBoundingClientRect();
    if (process.env.NODE_ENV !== "production") {
      const be = he.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && be.top === 0 && be.left === 0 && be.right === 0 && be.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    return {
      top: z.top + kp(z, i.vertical),
      left: z.left + Pp(z, i.horizontal)
    };
  }, [a, i.horizontal, i.vertical, l, c]), k = m.useCallback((oe) => ({
    vertical: kp(oe, O.vertical),
    horizontal: Pp(oe, O.horizontal)
  }), [O.horizontal, O.vertical]), D = m.useCallback((oe) => {
    const he = {
      width: oe.offsetWidth,
      height: oe.offsetHeight
    }, z = k(he);
    if (c === "none")
      return {
        top: null,
        left: null,
        transformOrigin: Np(z)
      };
    const be = j();
    let ye = be.top - z.vertical, Pe = be.left - z.horizontal;
    const Te = ye + he.height, Z = Pe + he.width, $e = Pt(Ms(a)), Oe = $e.innerHeight - b, Me = $e.innerWidth - b;
    if (b !== null && ye < b) {
      const I = ye - b;
      ye -= I, z.vertical += I;
    } else if (b !== null && Te > Oe) {
      const I = Te - Oe;
      ye -= I, z.vertical += I;
    }
    if (process.env.NODE_ENV !== "production" && he.height > Oe && he.height && Oe && console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${he.height - Oe}px).`, "Please consider adding a `max-height` to improve the user-experience."].join(`
`)), b !== null && Pe < b) {
      const I = Pe - b;
      Pe -= I, z.horizontal += I;
    } else if (Z > Me) {
      const I = Z - Me;
      Pe -= I, z.horizontal += I;
    }
    return {
      top: `${Math.round(ye)}px`,
      left: `${Math.round(Pe)}px`,
      transformOrigin: Np(z)
    };
  }, [a, c, j, k, b]), [B, _] = m.useState(h), H = m.useCallback(() => {
    const oe = v.current;
    if (!oe)
      return;
    const he = D(oe);
    he.top !== null && oe.style.setProperty("top", he.top), he.left !== null && (oe.style.left = he.left), oe.style.transformOrigin = he.transformOrigin, _(!0);
  }, [D]);
  m.useEffect(() => ($ && window.addEventListener("scroll", H), () => window.removeEventListener("scroll", H)), [a, $, H]);
  const U = (oe, he) => {
    w && w(oe, he), H();
  }, F = () => {
    _(!1);
  };
  m.useEffect(() => {
    h && H();
  }), m.useImperativeHandle(s, () => h ? {
    updatePosition: () => {
      H();
    }
  } : null, [h, H]), m.useEffect(() => {
    if (!h)
      return;
    const oe = Wr(() => {
      H();
    }), he = Pt(a);
    return he.addEventListener("resize", oe), () => {
      oe.clear(), he.removeEventListener("resize", oe);
    };
  }, [a, h, H]);
  let V = T;
  T === "auto" && !C.muiSupportAuto && (V = void 0);
  const me = f || (a ? lt(Ms(a)).body : void 0), G = {
    slots: y,
    slotProps: {
      ...S,
      paper: N
    }
  }, [X, Y] = je("paper", {
    elementType: ef,
    externalForwardedProps: G,
    additionalProps: {
      elevation: g,
      className: W(A.paper, N == null ? void 0 : N.className),
      style: B ? N.style : {
        ...N.style,
        opacity: 0
      }
    },
    ownerState: R
  }), [q, {
    slotProps: ie,
    ...K
  }] = je("root", {
    elementType: ZO,
    externalForwardedProps: G,
    additionalProps: {
      slotProps: {
        backdrop: {
          invisible: !0
        }
      },
      container: me,
      open: h
    },
    ownerState: R,
    className: W(A.root, u)
  }), de = Ye(v, Y.ref);
  return /* @__PURE__ */ x.jsx(q, {
    ...K,
    ...!Lo(q) && {
      slotProps: ie,
      disableScrollLock: $
    },
    ...P,
    ref: n,
    children: /* @__PURE__ */ x.jsx(C, {
      appear: !0,
      in: h,
      onEntering: U,
      onExited: F,
      timeout: V,
      ...E,
      children: /* @__PURE__ */ x.jsx(X, {
        ...Y,
        ref: de,
        children: p
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (tf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports updatePosition() action.
   */
  action: Nt,
  /**
   * An HTML element, [PopoverVirtualElement](https://mui.com/material-ui/react-popover/#virtual-element),
   * or a function that returns either.
   * It's used to set the position of the popover.
   */
  anchorEl: xt(t.oneOfType([$o, t.func]), (e) => {
    if (e.open && (!e.anchorReference || e.anchorReference === "anchorEl")) {
      const o = Ms(e.anchorEl);
      if (o && o.nodeType === 1) {
        const n = o.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${o}\` instead.`].join(`
`));
    }
    return null;
  }),
  /**
   * This is the point on the anchor where the popover's
   * `anchorEl` will attach to. This is not used when the
   * anchorReference is 'anchorPosition'.
   *
   * Options:
   * vertical: [top, center, bottom];
   * horizontal: [left, center, right].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  anchorOrigin: t.shape({
    horizontal: t.oneOfType([t.oneOf(["center", "left", "right"]), t.number]).isRequired,
    vertical: t.oneOfType([t.oneOf(["bottom", "center", "top"]), t.number]).isRequired
  }),
  /**
   * This is the position that may be used to set the position of the popover.
   * The coordinates are relative to the application's client area.
   */
  anchorPosition: t.shape({
    left: t.number.isRequired,
    top: t.number.isRequired
  }),
  /**
   * This determines which anchor prop to refer to when setting
   * the position of the popover.
   * @default 'anchorEl'
   */
  anchorReference: t.oneOf(["anchorEl", "anchorPosition", "none"]),
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slotProps.root.slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slotProps.root.slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: t.elementType,
  /**
   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.root.slotProps.backdrop` instead.
   */
  BackdropProps: t.object,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * An HTML element, component instance, or function that returns either.
   * The `container` will passed to the Modal component.
   *
   * By default, it uses the body of the anchorEl's top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([$o, t.func]),
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: t.bool,
  /**
   * The elevation of the popover.
   * @default 8
   */
  elevation: mt,
  /**
   * Specifies how close to the edge of the window the popover can appear.
   * If null, the popover will not be constrained by the window.
   * @default 16
   */
  marginThreshold: t.number,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   *
   * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.paper` instead.
   *
   * @default {}
   */
  PaperProps: t.shape({
    component: en
  }),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    paper: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    paper: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * This is the point on the popover which
   * will attach to the anchor's origin.
   *
   * Options:
   * vertical: [top, center, bottom, x(px)];
   * horizontal: [left, center, right, x(px)].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  transformOrigin: t.shape({
    horizontal: t.oneOfType([t.oneOf(["center", "left", "right"]), t.number]).isRequired,
    vertical: t.oneOfType([t.oneOf(["bottom", "center", "top"]), t.number]).isRequired
  }),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: t.elementType,
  /**
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  transitionDuration: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: t.object
});
function QO(e) {
  return ae("MuiMenu", e);
}
const cN = le("MuiMenu", ["root", "paper", "list"]), e1 = {
  vertical: "top",
  horizontal: "right"
}, t1 = {
  vertical: "top",
  horizontal: "left"
}, o1 = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    paper: ["paper"],
    list: ["list"]
  }, QO, o);
}, n1 = M(tf, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiMenu",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), r1 = M(ef, {
  name: "MuiMenu",
  slot: "Paper",
  overridesResolver: (e, o) => o.paper
})({
  // specZ: The maximum height of a simple menu should be one or more rows less than the view
  // height. This ensures a tappable area outside of the simple menu with which to dismiss
  // the menu.
  maxHeight: "calc(100% - 96px)",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch"
}), s1 = M(Qd, {
  name: "MuiMenu",
  slot: "List",
  overridesResolver: (e, o) => o.list
})({
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), of = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiMenu"
  }), {
    autoFocus: s = !0,
    children: a,
    className: i,
    disableAutoFocusItem: l = !1,
    MenuListProps: c = {},
    onClose: p,
    open: u,
    PaperProps: f = {},
    PopoverClasses: g,
    transitionDuration: b = "auto",
    TransitionProps: {
      onEntering: h,
      ...d
    } = {},
    variant: y = "selectedMenu",
    slots: S = {},
    slotProps: O = {},
    ...C
  } = r, T = go(), w = {
    ...r,
    autoFocus: s,
    disableAutoFocusItem: l,
    MenuListProps: c,
    onEntering: h,
    PaperProps: f,
    transitionDuration: b,
    TransitionProps: d,
    variant: y
  }, E = o1(w), $ = s && !l && u, P = m.useRef(null), N = (B, _) => {
    P.current && P.current.adjustStyleForScrollbar(B, {
      direction: T ? "rtl" : "ltr"
    }), h && h(B, _);
  }, v = (B) => {
    B.key === "Tab" && (B.preventDefault(), p && p(B, "tabKeyDown"));
  };
  let R = -1;
  m.Children.map(a, (B, _) => {
    /* @__PURE__ */ m.isValidElement(B) && (process.env.NODE_ENV !== "production" && Ft.isFragment(B) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), B.props.disabled || (y === "selectedMenu" && B.props.selected || R === -1) && (R = _));
  });
  const A = S.paper ?? r1, j = O.paper ?? f, k = Tt({
    elementType: S.root,
    externalSlotProps: O.root,
    ownerState: w,
    className: [E.root, i]
  }), D = Tt({
    elementType: A,
    externalSlotProps: j,
    ownerState: w,
    className: E.paper
  });
  return /* @__PURE__ */ x.jsx(n1, {
    onClose: p,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: T ? "right" : "left"
    },
    transformOrigin: T ? e1 : t1,
    slots: {
      paper: A,
      root: S.root
    },
    slotProps: {
      root: k,
      paper: D
    },
    open: u,
    ref: n,
    transitionDuration: b,
    TransitionProps: {
      onEntering: N,
      ...d
    },
    ownerState: w,
    ...C,
    classes: g,
    children: /* @__PURE__ */ x.jsx(s1, {
      onKeyDown: v,
      actions: P,
      autoFocus: s && (R === -1 || l),
      autoFocusItem: $,
      variant: y,
      ...c,
      className: W(E.list, c.className),
      children: a
    })
  });
});
process.env.NODE_ENV !== "production" && (of.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the position of the menu.
   */
  anchorEl: t.oneOfType([$o, t.func]),
  /**
   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
   * children are not focusable. If you set this prop to `false` focus will be placed
   * on the parent modal container. This has severe accessibility implications
   * and should only be considered if you manage focus otherwise.
   * @default true
   */
  autoFocus: t.bool,
  /**
   * Menu contents, normally `MenuItem`s.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * When opening the menu will not focus the active item but the `[role="menu"]`
   * unless `autoFocus` is also set to `false`. Not using the default means not
   * following WAI-ARIA authoring practices. Please be considerate about possible
   * accessibility implications.
   * @default false
   */
  disableAutoFocusItem: t.bool,
  /**
   * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.
   * @default {}
   */
  MenuListProps: t.object,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * @ignore
   */
  PaperProps: t.object,
  /**
   * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.
   */
  PopoverClasses: t.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    paper: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    paper: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The length of the transition in `ms`, or 'auto'
   * @default 'auto'
   */
  transitionDuration: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: t.object,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
   * @default 'selectedMenu'
   */
  variant: t.oneOf(["menu", "selectedMenu"])
});
function a1(e) {
  return ae("MuiMenuItem", e);
}
const cr = le("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]), i1 = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.dense && o.dense, n.divider && o.divider, !n.disableGutters && o.gutters];
}, l1 = (e) => {
  const {
    disabled: o,
    dense: n,
    divider: r,
    disableGutters: s,
    selected: a,
    classes: i
  } = e, c = ce({
    root: ["root", n && "dense", o && "disabled", !s && "gutters", r && "divider", a && "selected"]
  }, a1, i);
  return {
    ...i,
    ...c
  };
}, c1 = M(wt, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiMenuItem",
  slot: "Root",
  overridesResolver: i1
})(Q(({
  theme: e
}) => ({
  ...e.typography.body1,
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  minHeight: 48,
  paddingTop: 6,
  paddingBottom: 6,
  boxSizing: "border-box",
  whiteSpace: "nowrap",
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${cr.selected}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity),
    [`&.${cr.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    }
  },
  [`&.${cr.selected}:hover`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity)
    }
  },
  [`&.${cr.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`&.${cr.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  },
  [`& + .${vp.root}`]: {
    marginTop: e.spacing(1),
    marginBottom: e.spacing(1)
  },
  [`& + .${vp.inset}`]: {
    marginLeft: 52
  },
  [`& .${In.root}`]: {
    marginTop: 0,
    marginBottom: 0
  },
  [`& .${In.inset}`]: {
    paddingLeft: 36
  },
  [`& .${Rp.root}`]: {
    minWidth: 36
  },
  variants: [{
    props: ({
      ownerState: o
    }) => !o.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: o
    }) => o.divider,
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
      backgroundClip: "padding-box"
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.dense,
    style: {
      [e.breakpoints.up("sm")]: {
        minHeight: "auto"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.dense,
    style: {
      minHeight: 32,
      // https://m2.material.io/components/menus#specs > Dense
      paddingTop: 4,
      paddingBottom: 4,
      ...e.typography.body2,
      [`& .${Rp.root} svg`]: {
        fontSize: "1.25rem"
      }
    }
  }]
}))), nf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiMenuItem"
  }), {
    autoFocus: s = !1,
    component: a = "li",
    dense: i = !1,
    divider: l = !1,
    disableGutters: c = !1,
    focusVisibleClassName: p,
    role: u = "menuitem",
    tabIndex: f,
    className: g,
    ...b
  } = r, h = m.useContext(Xt), d = m.useMemo(() => ({
    dense: i || h.dense || !1,
    disableGutters: c
  }), [h.dense, i, c]), y = m.useRef(null);
  Rt(() => {
    s && (y.current ? y.current.focus() : process.env.NODE_ENV !== "production" && console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered."));
  }, [s]);
  const S = {
    ...r,
    dense: d.dense,
    divider: l,
    disableGutters: c
  }, O = l1(r), C = Ye(y, n);
  let T;
  return r.disabled || (T = f !== void 0 ? f : -1), /* @__PURE__ */ x.jsx(Xt.Provider, {
    value: d,
    children: /* @__PURE__ */ x.jsx(c1, {
      ref: C,
      role: u,
      tabIndex: T,
      component: a,
      focusVisibleClassName: W(O.focusVisible, p),
      className: W(O.root, g),
      ...b,
      ownerState: S,
      classes: O
    })
  });
});
process.env.NODE_ENV !== "production" && (nf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent Menu component.
   * @default false
   */
  dense: t.bool,
  /**
   * @ignore
   */
  disabled: t.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the menu item.
   * @default false
   */
  divider: t.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  role: t.string,
  /**
   * If `true`, the component is selected.
   * @default false
   */
  selected: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @default 0
   */
  tabIndex: t.number
});
function p1(e) {
  return ae("MuiMobileStepper", e);
}
const pN = le("MuiMobileStepper", ["root", "positionBottom", "positionTop", "positionStatic", "dots", "dot", "dotActive", "progress"]), u1 = (e) => {
  const {
    classes: o,
    position: n
  } = e, r = {
    root: ["root", `position${L(n)}`],
    dots: ["dots"],
    dot: ["dot"],
    dotActive: ["dotActive"],
    progress: ["progress"]
  };
  return ce(r, p1, o);
}, d1 = M(Qt, {
  name: "MuiMobileStepper",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`position${L(n.position)}`]];
  }
})(Q(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "row",
  justifyContent: "space-between",
  alignItems: "center",
  background: (e.vars || e).palette.background.default,
  padding: 8,
  variants: [{
    props: ({
      position: o
    }) => o === "top" || o === "bottom",
    style: {
      position: "fixed",
      left: 0,
      right: 0,
      zIndex: (e.vars || e).zIndex.mobileStepper
    }
  }, {
    props: {
      position: "top"
    },
    style: {
      top: 0
    }
  }, {
    props: {
      position: "bottom"
    },
    style: {
      bottom: 0
    }
  }]
}))), f1 = M("div", {
  name: "MuiMobileStepper",
  slot: "Dots",
  overridesResolver: (e, o) => o.dots
})({
  variants: [{
    props: {
      variant: "dots"
    },
    style: {
      display: "flex",
      flexDirection: "row"
    }
  }]
}), m1 = M("div", {
  name: "MuiMobileStepper",
  slot: "Dot",
  shouldForwardProp: (e) => Yn(e) && e !== "dotActive",
  overridesResolver: (e, o) => {
    const {
      dotActive: n
    } = e;
    return [o.dot, n && o.dotActive];
  }
})(Q(({
  theme: e
}) => ({
  variants: [{
    props: {
      variant: "dots"
    },
    style: {
      transition: e.transitions.create("background-color", {
        duration: e.transitions.duration.shortest
      }),
      backgroundColor: (e.vars || e).palette.action.disabled,
      borderRadius: "50%",
      width: 8,
      height: 8,
      margin: "0 2px"
    }
  }, {
    props: {
      variant: "dots",
      dotActive: !0
    },
    style: {
      backgroundColor: (e.vars || e).palette.primary.main
    }
  }]
}))), g1 = M(Xd, {
  name: "MuiMobileStepper",
  slot: "Progress",
  overridesResolver: (e, o) => o.progress
})({
  variants: [{
    props: {
      variant: "progress"
    },
    style: {
      width: "50%"
    }
  }]
}), b1 = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiMobileStepper"
  }), {
    activeStep: s = 0,
    backButton: a,
    className: i,
    LinearProgressProps: l,
    nextButton: c,
    position: p = "bottom",
    steps: u,
    variant: f = "dots",
    ...g
  } = r, b = {
    ...r,
    activeStep: s,
    position: p,
    variant: f
  };
  let h;
  f === "progress" && (u === 1 ? h = 100 : h = Math.ceil(s / (u - 1) * 100));
  const d = u1(b);
  return /* @__PURE__ */ x.jsxs(d1, {
    square: !0,
    elevation: 0,
    className: W(d.root, i),
    ref: n,
    ownerState: b,
    ...g,
    children: [a, f === "text" && /* @__PURE__ */ x.jsxs(m.Fragment, {
      children: [s + 1, " / ", u]
    }), f === "dots" && /* @__PURE__ */ x.jsx(f1, {
      ownerState: b,
      className: d.dots,
      children: [...new Array(u)].map((y, S) => /* @__PURE__ */ x.jsx(m1, {
        className: W(d.dot, S === s && d.dotActive),
        ownerState: b,
        dotActive: S === s
      }, S))
    }), f === "progress" && /* @__PURE__ */ x.jsx(g1, {
      ownerState: b,
      className: d.progress,
      variant: "determinate",
      value: h,
      ...l
    }), c]
  });
});
process.env.NODE_ENV !== "production" && (b1.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the active step (zero based index).
   * Defines which dot is highlighted when the variant is 'dots'.
   * @default 0
   */
  activeStep: mt,
  /**
   * A back button element. For instance, it can be a `Button` or an `IconButton`.
   */
  backButton: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Props applied to the `LinearProgress` element.
   */
  LinearProgressProps: t.object,
  /**
   * A next button element. For instance, it can be a `Button` or an `IconButton`.
   */
  nextButton: t.node,
  /**
   * Set the positioning type.
   * @default 'bottom'
   */
  position: t.oneOf(["bottom", "static", "top"]),
  /**
   * The total steps.
   */
  steps: mt.isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'dots'
   */
  variant: t.oneOf(["dots", "progress", "text"])
});
function rf(e) {
  return ae("MuiNativeSelect", e);
}
const Pl = le("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]), h1 = (e) => {
  const {
    classes: o,
    variant: n,
    disabled: r,
    multiple: s,
    open: a,
    error: i
  } = e, l = {
    select: ["select", n, r && "disabled", s && "multiple", i && "error"],
    icon: ["icon", `icon${L(n)}`, a && "iconOpen", r && "disabled"]
  };
  return ce(l, rf, o);
}, sf = M("select")(({
  theme: e
}) => ({
  // Reset
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // When interacting quickly, the text can end up selected.
  // Native select can't be selected either.
  userSelect: "none",
  // Reset
  borderRadius: 0,
  cursor: "pointer",
  "&:focus": {
    // Reset Chrome style
    borderRadius: 0
  },
  [`&.${Pl.disabled}`]: {
    cursor: "default"
  },
  "&[multiple]": {
    height: "auto"
  },
  "&:not([multiple]) option, &:not([multiple]) optgroup": {
    backgroundColor: (e.vars || e).palette.background.paper
  },
  variants: [{
    props: ({
      ownerState: o
    }) => o.variant !== "filled" && o.variant !== "outlined",
    style: {
      // Bump specificity to allow extending custom inputs
      "&&&": {
        paddingRight: 24,
        minWidth: 16
        // So it doesn't collapse.
      }
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      "&&&": {
        paddingRight: 32
      }
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      borderRadius: (e.vars || e).shape.borderRadius,
      "&:focus": {
        borderRadius: (e.vars || e).shape.borderRadius
        // Reset the reset for Chrome style
      },
      "&&&": {
        paddingRight: 32
      }
    }
  }]
})), y1 = M(sf, {
  name: "MuiNativeSelect",
  slot: "Select",
  shouldForwardProp: bt,
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.select, o[n.variant], n.error && o.error, {
      [`&.${Pl.multiple}`]: o.multiple
    }];
  }
})({}), af = M("svg")(({
  theme: e
}) => ({
  // We use a position absolute over a flexbox in order to forward the pointer events
  // to the input and to support wrapping tags..
  position: "absolute",
  right: 0,
  // Center vertically, height is 1em
  top: "calc(50% - .5em)",
  // Don't block pointer events on the select under the icon.
  pointerEvents: "none",
  color: (e.vars || e).palette.action.active,
  [`&.${Pl.disabled}`]: {
    color: (e.vars || e).palette.action.disabled
  },
  variants: [{
    props: ({
      ownerState: o
    }) => o.open,
    style: {
      transform: "rotate(180deg)"
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      right: 7
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      right: 7
    }
  }]
})), v1 = M(af, {
  name: "MuiNativeSelect",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, n.variant && o[`icon${L(n.variant)}`], n.open && o.iconOpen];
  }
})({}), Nl = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    className: r,
    disabled: s,
    error: a,
    IconComponent: i,
    inputRef: l,
    variant: c = "standard",
    ...p
  } = o, u = {
    ...o,
    disabled: s,
    variant: c,
    error: a
  }, f = h1(u);
  return /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ x.jsx(y1, {
      ownerState: u,
      className: W(f.select, r),
      disabled: s,
      ref: l || n,
      ...p
    }), o.multiple ? null : /* @__PURE__ */ x.jsx(v1, {
      as: i,
      ownerState: u,
      className: f.icon
    })]
  });
});
process.env.NODE_ENV !== "production" && (Nl.propTypes = {
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The CSS class name of the select element.
   */
  className: t.string,
  /**
   * If `true`, the select is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: t.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: t.elementType.isRequired,
  /**
   * Use that prop to pass a ref to the native select element.
   * @deprecated
   */
  inputRef: Nt,
  /**
   * @ignore
   */
  multiple: t.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: t.string,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The input value.
   */
  value: t.any,
  /**
   * The variant to use.
   */
  variant: t.oneOf(["standard", "outlined", "filled"])
});
const x1 = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, rf, o);
}, S1 = /* @__PURE__ */ x.jsx(Kr, {}), lf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    name: "MuiNativeSelect",
    props: o
  }), {
    className: s,
    children: a,
    classes: i = {},
    IconComponent: l = Sl,
    input: c = S1,
    inputProps: p,
    variant: u,
    ...f
  } = r, g = uo(), b = _o({
    props: r,
    muiFormControl: g,
    states: ["variant"]
  }), h = {
    ...r,
    classes: i
  }, d = x1(h), {
    root: y,
    ...S
  } = i;
  return /* @__PURE__ */ x.jsx(m.Fragment, {
    children: /* @__PURE__ */ m.cloneElement(c, {
      // Most of the logic is implemented in `NativeSelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: Nl,
      inputProps: {
        children: a,
        classes: S,
        IconComponent: l,
        variant: b.variant,
        type: void 0,
        // We render a select. We can ignore the type provided by the `Input`.
        ...p,
        ...c ? c.props.inputProps : {}
      },
      ref: n,
      ...f,
      className: W(d.root, c.props.className, s)
    })
  });
});
process.env.NODE_ENV !== "production" && (lf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   * @default {}
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */
  IconComponent: t.elementType,
  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   * @default <Input />
   */
  input: t.element,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.
   */
  inputProps: t.object,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The `input` value. The DOM API casts this to a string.
   */
  value: t.any,
  /**
   * The variant to use.
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
lf.muiName = "Select";
function ea(e) {
  const {
    children: o,
    defer: n = !1,
    fallback: r = null
  } = e, [s, a] = m.useState(!1);
  return Rt(() => {
    n || a(!0);
  }, [n]), m.useEffect(() => {
    n && a(!0);
  }, [n]), s ? o : r;
}
process.env.NODE_ENV !== "production" && (ea.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: t.node,
  /**
   * If `true`, the component will not only prevent server-side rendering.
   * It will also defer the rendering of the children into a different screen frame.
   * @default false
   */
  defer: t.bool,
  /**
   * The fallback content to display.
   * @default null
   */
  fallback: t.node
});
process.env.NODE_ENV !== "production" && (ea.propTypes = Cn(ea.propTypes));
var Ip;
const T1 = M("fieldset", {
  shouldForwardProp: bt
})({
  textAlign: "left",
  position: "absolute",
  bottom: 0,
  right: 0,
  top: -5,
  left: 0,
  margin: 0,
  padding: "0 8px",
  pointerEvents: "none",
  borderRadius: "inherit",
  borderStyle: "solid",
  borderWidth: 1,
  overflow: "hidden",
  minWidth: "0%"
}), C1 = M("legend", {
  shouldForwardProp: bt
})(Q(({
  theme: e
}) => ({
  float: "unset",
  // Fix conflict with bootstrap
  width: "auto",
  // Fix conflict with bootstrap
  overflow: "hidden",
  // Fix Horizontal scroll when label too long
  variants: [{
    props: ({
      ownerState: o
    }) => !o.withLabel,
    style: {
      padding: 0,
      lineHeight: "11px",
      // sync with `height` in `legend` styles
      transition: e.transitions.create("width", {
        duration: 150,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: ({
      ownerState: o
    }) => o.withLabel,
    style: {
      display: "block",
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: "0.75em",
      visibility: "hidden",
      maxWidth: 0.01,
      transition: e.transitions.create("max-width", {
        duration: 50,
        easing: e.transitions.easing.easeOut
      }),
      whiteSpace: "nowrap",
      "& > span": {
        paddingLeft: 5,
        paddingRight: 5,
        display: "inline-block",
        opacity: 0,
        visibility: "visible"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.withLabel && o.notched,
    style: {
      maxWidth: "100%",
      transition: e.transitions.create("max-width", {
        duration: 100,
        easing: e.transitions.easing.easeOut,
        delay: 50
      })
    }
  }]
})));
function cf(e) {
  const {
    children: o,
    classes: n,
    className: r,
    label: s,
    notched: a,
    ...i
  } = e, l = s != null && s !== "", c = {
    ...e,
    notched: a,
    withLabel: l
  };
  return /* @__PURE__ */ x.jsx(T1, {
    "aria-hidden": !0,
    className: r,
    ownerState: c,
    ...i,
    children: /* @__PURE__ */ x.jsx(C1, {
      ownerState: c,
      children: l ? /* @__PURE__ */ x.jsx("span", {
        children: s
      }) : (
        // notranslate needed while Google Translate will not fix zero-width space issue
        Ip || (Ip = /* @__PURE__ */ x.jsx("span", {
          className: "notranslate",
          "aria-hidden": !0,
          children: "​"
        }))
      )
    })
  });
}
process.env.NODE_ENV !== "production" && (cf.propTypes = {
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The label.
   */
  label: t.node,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: t.bool.isRequired,
  /**
   * @ignore
   */
  style: t.object
});
const w1 = (e) => {
  const {
    classes: o
  } = e, r = ce({
    root: ["root"],
    notchedOutline: ["notchedOutline"],
    input: ["input"]
  }, Tx, o);
  return {
    ...o,
    // forward classes to the InputBase
    ...r
  };
}, O1 = M(Ea, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiOutlinedInput",
  slot: "Root",
  overridesResolver: wa
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    position: "relative",
    borderRadius: (e.vars || e).shape.borderRadius,
    [`&:hover .${to.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.text.primary
    },
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      [`&:hover .${to.notchedOutline}`]: {
        borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : o
      }
    },
    [`&.${to.focused} .${to.notchedOutline}`]: {
      borderWidth: 2
    },
    variants: [...Object.entries(e.palette).filter(Ue()).map(([n]) => ({
      props: {
        color: n
      },
      style: {
        [`&.${to.focused} .${to.notchedOutline}`]: {
          borderColor: (e.vars || e).palette[n].main
        }
      }
    })), {
      props: {},
      // to overide the above style
      style: {
        [`&.${to.error} .${to.notchedOutline}`]: {
          borderColor: (e.vars || e).palette.error.main
        },
        [`&.${to.disabled} .${to.notchedOutline}`]: {
          borderColor: (e.vars || e).palette.action.disabled
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.startAdornment,
      style: {
        paddingLeft: 14
      }
    }, {
      props: ({
        ownerState: n
      }) => n.endAdornment,
      style: {
        paddingRight: 14
      }
    }, {
      props: ({
        ownerState: n
      }) => n.multiline,
      style: {
        padding: "16.5px 14px"
      }
    }, {
      props: ({
        ownerState: n,
        size: r
      }) => n.multiline && r === "small",
      style: {
        padding: "8.5px 14px"
      }
    }]
  };
})), E1 = M(cf, {
  name: "MuiOutlinedInput",
  slot: "NotchedOutline",
  overridesResolver: (e, o) => o.notchedOutline
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : o
  };
})), R1 = M(Ra, {
  name: "MuiOutlinedInput",
  slot: "Input",
  overridesResolver: Oa
})(Q(({
  theme: e
}) => ({
  padding: "16.5px 14px",
  ...!e.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
      caretColor: e.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  },
  ...e.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [e.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      padding: "8.5px 14px"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.multiline,
    style: {
      padding: 0
    }
  }, {
    props: ({
      ownerState: o
    }) => o.startAdornment,
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      ownerState: o
    }) => o.endAdornment,
    style: {
      paddingRight: 0
    }
  }]
}))), Na = /* @__PURE__ */ m.forwardRef(function(o, n) {
  var r;
  const s = pe({
    props: o,
    name: "MuiOutlinedInput"
  }), {
    components: a = {},
    fullWidth: i = !1,
    inputComponent: l = "input",
    label: c,
    multiline: p = !1,
    notched: u,
    slots: f = {},
    type: g = "text",
    ...b
  } = s, h = w1(s), d = uo(), y = _o({
    props: s,
    muiFormControl: d,
    states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
  }), S = {
    ...s,
    color: y.color || "primary",
    disabled: y.disabled,
    error: y.error,
    focused: y.focused,
    formControl: d,
    fullWidth: i,
    hiddenLabel: y.hiddenLabel,
    multiline: p,
    size: y.size,
    type: g
  }, O = f.root ?? a.Root ?? O1, C = f.input ?? a.Input ?? R1;
  return /* @__PURE__ */ x.jsx(Yr, {
    slots: {
      root: O,
      input: C
    },
    renderSuffix: (T) => /* @__PURE__ */ x.jsx(E1, {
      ownerState: S,
      className: h.notchedOutline,
      label: c != null && c !== "" && y.required ? r || (r = /* @__PURE__ */ x.jsxs(m.Fragment, {
        children: [c, " ", "*"]
      })) : c,
      notched: typeof u < "u" ? u : !!(T.startAdornment || T.filled || T.focused)
    }),
    fullWidth: i,
    inputComponent: l,
    multiline: p,
    ref: n,
    type: g,
    ...b,
    classes: {
      ...h,
      notchedOutline: null
    }
  });
});
process.env.NODE_ENV !== "production" && (Na.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * The label of the `input`. It is only used for layout. The actual labelling
   * is handled by `InputLabel`.
   */
  label: t.node,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: t.bool,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
Na.muiName = "Input";
function $1(e) {
  return ae("MuiPagination", e);
}
const uN = le("MuiPagination", ["root", "ul", "outlined", "text"]);
function k1(e = {}) {
  const {
    boundaryCount: o = 1,
    componentName: n = "usePagination",
    count: r = 1,
    defaultPage: s = 1,
    disabled: a = !1,
    hideNextButton: i = !1,
    hidePrevButton: l = !1,
    onChange: c,
    page: p,
    showFirstButton: u = !1,
    showLastButton: f = !1,
    siblingCount: g = 1,
    ...b
  } = e, [h, d] = Kt({
    controlled: p,
    default: s,
    name: n,
    state: "page"
  }), y = (N, v) => {
    p || d(v), c && c(N, v);
  }, S = (N, v) => {
    const R = v - N + 1;
    return Array.from({
      length: R
    }, (A, j) => N + j);
  }, O = S(1, Math.min(o, r)), C = S(Math.max(r - o + 1, o + 1), r), T = Math.max(
    Math.min(
      // Natural start
      h - g,
      // Lower boundary when page is high
      r - o - g * 2 - 1
    ),
    // Greater than startPages
    o + 2
  ), w = Math.min(
    Math.max(
      // Natural end
      h + g,
      // Upper boundary when page is low
      o + g * 2 + 2
    ),
    // Less than endPages
    r - o - 1
  ), E = [
    ...u ? ["first"] : [],
    ...l ? [] : ["previous"],
    ...O,
    // Start ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...T > o + 2 ? ["start-ellipsis"] : o + 1 < r - o ? [o + 1] : [],
    // Sibling pages
    ...S(T, w),
    // End ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...w < r - o - 1 ? ["end-ellipsis"] : r - o > o ? [r - o] : [],
    ...C,
    ...i ? [] : ["next"],
    ...f ? ["last"] : []
  ], $ = (N) => {
    switch (N) {
      case "first":
        return 1;
      case "previous":
        return h - 1;
      case "next":
        return h + 1;
      case "last":
        return r;
      default:
        return null;
    }
  };
  return {
    items: E.map((N) => typeof N == "number" ? {
      onClick: (v) => {
        y(v, N);
      },
      type: "page",
      page: N,
      selected: N === h,
      disabled: a,
      "aria-current": N === h ? "page" : void 0
    } : {
      onClick: (v) => {
        y(v, $(N));
      },
      type: N,
      page: $(N),
      selected: !1,
      disabled: a || !N.includes("ellipsis") && (N === "next" || N === "last" ? h >= r : h <= 1)
    }),
    ...b
  };
}
function P1(e) {
  return ae("MuiPaginationItem", e);
}
const Lt = le("MuiPaginationItem", ["root", "page", "sizeSmall", "sizeLarge", "text", "textPrimary", "textSecondary", "outlined", "outlinedPrimary", "outlinedSecondary", "rounded", "ellipsis", "firstLast", "previousNext", "focusVisible", "disabled", "selected", "icon", "colorPrimary", "colorSecondary"]), pf = at(/* @__PURE__ */ x.jsx("path", {
  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
}), "FirstPage"), uf = at(/* @__PURE__ */ x.jsx("path", {
  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
}), "LastPage"), N1 = at(/* @__PURE__ */ x.jsx("path", {
  d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
}), "NavigateBefore"), I1 = at(/* @__PURE__ */ x.jsx("path", {
  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), "NavigateNext"), df = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, o[n.variant], o[`size${L(n.size)}`], n.variant === "text" && o[`text${L(n.color)}`], n.variant === "outlined" && o[`outlined${L(n.color)}`], n.shape === "rounded" && o.rounded, n.type === "page" && o.page, (n.type === "start-ellipsis" || n.type === "end-ellipsis") && o.ellipsis, (n.type === "previous" || n.type === "next") && o.previousNext, (n.type === "first" || n.type === "last") && o.firstLast];
}, j1 = (e) => {
  const {
    classes: o,
    color: n,
    disabled: r,
    selected: s,
    size: a,
    shape: i,
    type: l,
    variant: c
  } = e, p = {
    root: ["root", `size${L(a)}`, c, i, n !== "standard" && `color${L(n)}`, n !== "standard" && `${c}${L(n)}`, r && "disabled", s && "selected", {
      page: "page",
      first: "firstLast",
      last: "firstLast",
      "start-ellipsis": "ellipsis",
      "end-ellipsis": "ellipsis",
      previous: "previousNext",
      next: "previousNext"
    }[l]],
    icon: ["icon"]
  };
  return ce(p, P1, o);
}, M1 = M("div", {
  name: "MuiPaginationItem",
  slot: "Root",
  overridesResolver: df
})(Q(({
  theme: e
}) => ({
  ...e.typography.body2,
  borderRadius: 32 / 2,
  textAlign: "center",
  boxSizing: "border-box",
  minWidth: 32,
  padding: "0 6px",
  margin: "0 3px",
  color: (e.vars || e).palette.text.primary,
  height: "auto",
  [`&.${Lt.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      minWidth: 26,
      borderRadius: 26 / 2,
      margin: "0 1px",
      padding: "0 4px"
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      minWidth: 40,
      borderRadius: 40 / 2,
      padding: "0 10px",
      fontSize: e.typography.pxToRem(15)
    }
  }]
}))), A1 = M(wt, {
  name: "MuiPaginationItem",
  slot: "Root",
  overridesResolver: df
})(Q(({
  theme: e
}) => ({
  ...e.typography.body2,
  borderRadius: 32 / 2,
  textAlign: "center",
  boxSizing: "border-box",
  minWidth: 32,
  height: 32,
  padding: "0 6px",
  margin: "0 3px",
  color: (e.vars || e).palette.text.primary,
  [`&.${Lt.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`&.${Lt.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  },
  transition: e.transitions.create(["color", "background-color"], {
    duration: e.transitions.duration.short
  }),
  "&:hover": {
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${Lt.selected}`]: {
    backgroundColor: (e.vars || e).palette.action.selected,
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (e.vars || e).palette.action.selected
      }
    },
    [`&.${Lt.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    },
    [`&.${Lt.disabled}`]: {
      opacity: 1,
      color: (e.vars || e).palette.action.disabled,
      backgroundColor: (e.vars || e).palette.action.selected
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      minWidth: 26,
      height: 26,
      borderRadius: 26 / 2,
      margin: "0 1px",
      padding: "0 4px"
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      minWidth: 40,
      height: 40,
      borderRadius: 40 / 2,
      padding: "0 10px",
      fontSize: e.typography.pxToRem(15)
    }
  }, {
    props: {
      shape: "rounded"
    },
    style: {
      borderRadius: (e.vars || e).shape.borderRadius
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      border: e.vars ? `1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
      [`&.${Lt.selected}`]: {
        [`&.${Lt.disabled}`]: {
          borderColor: (e.vars || e).palette.action.disabledBackground,
          color: (e.vars || e).palette.action.disabled
        }
      }
    }
  }, {
    props: {
      variant: "text"
    },
    style: {
      [`&.${Lt.selected}`]: {
        [`&.${Lt.disabled}`]: {
          color: (e.vars || e).palette.action.disabled
        }
      }
    }
  }, ...Object.entries(e.palette).filter(Ue(["dark", "contrastText"])).map(([o]) => ({
    props: {
      variant: "text",
      color: o
    },
    style: {
      [`&.${Lt.selected}`]: {
        color: (e.vars || e).palette[o].contrastText,
        backgroundColor: (e.vars || e).palette[o].main,
        "&:hover": {
          backgroundColor: (e.vars || e).palette[o].dark,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: (e.vars || e).palette[o].main
          }
        },
        [`&.${Lt.focusVisible}`]: {
          backgroundColor: (e.vars || e).palette[o].dark
        },
        [`&.${Lt.disabled}`]: {
          color: (e.vars || e).palette.action.disabled
        }
      }
    }
  })), ...Object.entries(e.palette).filter(Ue(["light"])).map(([o]) => ({
    props: {
      variant: "outlined",
      color: o
    },
    style: {
      [`&.${Lt.selected}`]: {
        color: (e.vars || e).palette[o].main,
        border: `1px solid ${e.vars ? `rgba(${e.vars.palette[o].mainChannel} / 0.5)` : Ne(e.palette[o].main, 0.5)}`,
        backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / ${e.vars.palette.action.activatedOpacity})` : Ne(e.palette[o].main, e.palette.action.activatedOpacity),
        "&:hover": {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette[o].main, e.palette.action.activatedOpacity + e.palette.action.focusOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        [`&.${Lt.focusVisible}`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Ne(e.palette[o].main, e.palette.action.activatedOpacity + e.palette.action.focusOpacity)
        }
      }
    }
  }))]
}))), B1 = M("div", {
  name: "MuiPaginationItem",
  slot: "Icon",
  overridesResolver: (e, o) => o.icon
})(Q(({
  theme: e
}) => ({
  fontSize: e.typography.pxToRem(20),
  margin: "0 -8px",
  variants: [{
    props: {
      size: "small"
    },
    style: {
      fontSize: e.typography.pxToRem(18)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      fontSize: e.typography.pxToRem(22)
    }
  }]
}))), ff = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiPaginationItem"
  }), {
    className: s,
    color: a = "standard",
    component: i,
    components: l = {},
    disabled: c = !1,
    page: p,
    selected: u = !1,
    shape: f = "circular",
    size: g = "medium",
    slots: b = {},
    slotProps: h = {},
    type: d = "page",
    variant: y = "text",
    ...S
  } = r, O = {
    ...r,
    color: a,
    disabled: c,
    selected: u,
    shape: f,
    size: g,
    type: d,
    variant: y
  }, C = go(), T = j1(O), w = {
    slots: {
      previous: b.previous ?? l.previous,
      next: b.next ?? l.next,
      first: b.first ?? l.first,
      last: b.last ?? l.last
    },
    slotProps: h
  }, [E, $] = je("previous", {
    elementType: N1,
    externalForwardedProps: w,
    ownerState: O
  }), [P, N] = je("next", {
    elementType: I1,
    externalForwardedProps: w,
    ownerState: O
  }), [v, R] = je("first", {
    elementType: pf,
    externalForwardedProps: w,
    ownerState: O
  }), [A, j] = je("last", {
    elementType: uf,
    externalForwardedProps: w,
    ownerState: O
  }), k = C ? {
    previous: "next",
    next: "previous",
    first: "last",
    last: "first"
  }[d] : d, D = {
    previous: E,
    next: P,
    first: v,
    last: A
  }[k], B = {
    previous: $,
    next: N,
    first: R,
    last: j
  }[k];
  return d === "start-ellipsis" || d === "end-ellipsis" ? /* @__PURE__ */ x.jsx(M1, {
    ref: n,
    ownerState: O,
    className: W(T.root, s),
    children: "…"
  }) : /* @__PURE__ */ x.jsxs(A1, {
    ref: n,
    ownerState: O,
    component: i,
    disabled: c,
    className: W(T.root, s),
    ...S,
    children: [d === "page" && p, D ? /* @__PURE__ */ x.jsx(B1, {
      ...B,
      className: T.icon,
      as: D
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (ff.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The active color.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "standard"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  components: t.shape({
    first: t.elementType,
    last: t.elementType,
    next: t.elementType,
    previous: t.elementType
  }),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * The current page number.
   */
  page: t.node,
  /**
   * If `true` the pagination item is selected.
   * @default false
   */
  selected: t.bool,
  /**
   * The shape of the pagination item.
   * @default 'circular'
   */
  shape: t.oneOf(["circular", "rounded"]),
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    first: t.oneOfType([t.func, t.object]),
    last: t.oneOfType([t.func, t.object]),
    next: t.oneOfType([t.func, t.object]),
    previous: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    first: t.elementType,
    last: t.elementType,
    next: t.elementType,
    previous: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The type of pagination item.
   * @default 'page'
   */
  type: t.oneOf(["end-ellipsis", "first", "last", "next", "page", "previous", "start-ellipsis"]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["outlined", "text"]), t.string])
});
const L1 = (e) => {
  const {
    classes: o,
    variant: n
  } = e;
  return ce({
    root: ["root", n],
    ul: ["ul"]
  }, $1, o);
}, D1 = M("nav", {
  name: "MuiPagination",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant]];
  }
})({}), z1 = M("ul", {
  name: "MuiPagination",
  slot: "Ul",
  overridesResolver: (e, o) => o.ul
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  padding: 0,
  margin: 0,
  listStyle: "none"
});
function F1(e, o, n) {
  return e === "page" ? `${n ? "" : "Go to "}page ${o}` : `Go to ${e} page`;
}
const V1 = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiPagination"
  }), {
    boundaryCount: s = 1,
    className: a,
    color: i = "standard",
    count: l = 1,
    defaultPage: c = 1,
    disabled: p = !1,
    getItemAriaLabel: u = F1,
    hideNextButton: f = !1,
    hidePrevButton: g = !1,
    onChange: b,
    page: h,
    renderItem: d = (v) => /* @__PURE__ */ x.jsx(ff, {
      ...v
    }),
    shape: y = "circular",
    showFirstButton: S = !1,
    showLastButton: O = !1,
    siblingCount: C = 1,
    size: T = "medium",
    variant: w = "text",
    ...E
  } = r, {
    items: $
  } = k1({
    ...r,
    componentName: "Pagination"
  }), P = {
    ...r,
    boundaryCount: s,
    color: i,
    count: l,
    defaultPage: c,
    disabled: p,
    getItemAriaLabel: u,
    hideNextButton: f,
    hidePrevButton: g,
    renderItem: d,
    shape: y,
    showFirstButton: S,
    showLastButton: O,
    siblingCount: C,
    size: T,
    variant: w
  }, N = L1(P);
  return /* @__PURE__ */ x.jsx(D1, {
    "aria-label": "pagination navigation",
    className: W(N.root, a),
    ownerState: P,
    ref: n,
    ...E,
    children: /* @__PURE__ */ x.jsx(z1, {
      className: N.ul,
      ownerState: P,
      children: $.map((v, R) => /* @__PURE__ */ x.jsx("li", {
        children: d({
          ...v,
          color: i,
          "aria-label": u(v.type, v.page, v.selected),
          shape: y,
          size: T,
          variant: w
        })
      }, R))
    })
  });
});
process.env.NODE_ENV !== "production" && (V1.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Number of always visible pages at the beginning and end.
   * @default 1
   */
  boundaryCount: mt,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The active color.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "standard"]), t.string]),
  /**
   * The total number of pages.
   * @default 1
   */
  count: mt,
  /**
   * The page selected by default when the component is uncontrolled.
   * @default 1
   */
  defaultPage: mt,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis'). Defaults to 'page'.
   * @param {number | null} page The page number to format.
   * @param {boolean} selected If true, the current page is selected.
   * @returns {string}
   */
  getItemAriaLabel: t.func,
  /**
   * If `true`, hide the next-page button.
   * @default false
   */
  hideNextButton: t.bool,
  /**
   * If `true`, hide the previous-page button.
   * @default false
   */
  hidePrevButton: t.bool,
  /**
   * Callback fired when the page is changed.
   *
   * @param {React.ChangeEvent<unknown>} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onChange: t.func,
  /**
   * The current page. Unlike `TablePagination`, which starts numbering from `0`, this pagination starts from `1`.
   */
  page: mt,
  /**
   * Render the item.
   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
   * @returns {ReactNode}
   * @default (item) => <PaginationItem {...item} />
   */
  renderItem: t.func,
  /**
   * The shape of the pagination items.
   * @default 'circular'
   */
  shape: t.oneOf(["circular", "rounded"]),
  /**
   * If `true`, show the first-page button.
   * @default false
   */
  showFirstButton: t.bool,
  /**
   * If `true`, show the last-page button.
   * @default false
   */
  showLastButton: t.bool,
  /**
   * Number of always visible pages before and after the current page.
   * @default 1
   */
  siblingCount: mt,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["outlined", "text"]), t.string])
});
const _1 = at(/* @__PURE__ */ x.jsx("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "RadioButtonUnchecked"), W1 = at(/* @__PURE__ */ x.jsx("path", {
  d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
}), "RadioButtonChecked"), U1 = M("span", {
  shouldForwardProp: bt
})({
  position: "relative",
  display: "flex"
}), H1 = M(_1)({
  // Scale applied to prevent dot misalignment in Safari
  transform: "scale(1)"
}), G1 = M(W1)(Q(({
  theme: e
}) => ({
  left: 0,
  position: "absolute",
  transform: "scale(0)",
  transition: e.transitions.create("transform", {
    easing: e.transitions.easing.easeIn,
    duration: e.transitions.duration.shortest
  }),
  variants: [{
    props: {
      checked: !0
    },
    style: {
      transform: "scale(1)",
      transition: e.transitions.create("transform", {
        easing: e.transitions.easing.easeOut,
        duration: e.transitions.duration.shortest
      })
    }
  }]
})));
function Il(e) {
  const {
    checked: o = !1,
    classes: n = {},
    fontSize: r
  } = e, s = {
    ...e,
    checked: o
  };
  return /* @__PURE__ */ x.jsxs(U1, {
    className: n.root,
    ownerState: s,
    children: [/* @__PURE__ */ x.jsx(H1, {
      fontSize: r,
      className: n.background,
      ownerState: s
    }), /* @__PURE__ */ x.jsx(G1, {
      fontSize: r,
      className: n.dot,
      ownerState: s
    })]
  });
}
process.env.NODE_ENV !== "production" && (Il.propTypes = {
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The size of the component.
   * `small` is equivalent to the dense radio styling.
   */
  fontSize: t.oneOf(["small", "medium"])
});
const jl = /* @__PURE__ */ m.createContext(void 0);
process.env.NODE_ENV !== "production" && (jl.displayName = "RadioGroupContext");
function q1() {
  return m.useContext(jl);
}
function Y1(e) {
  return ae("MuiRadio", e);
}
const jp = le("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary", "sizeSmall"]), K1 = (e) => {
  const {
    classes: o,
    color: n,
    size: r
  } = e, s = {
    root: ["root", `color${L(n)}`, r !== "medium" && `size${L(r)}`]
  };
  return {
    ...o,
    ...ce(s, Y1, o)
  };
}, X1 = M($a, {
  shouldForwardProp: (e) => bt(e) || e === "classes",
  name: "MuiRadio",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.size !== "medium" && o[`size${L(n.size)}`], o[`color${L(n.color)}`]];
  }
})(Q(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  [`&.${jp.disabled}`]: {
    color: (e.vars || e).palette.action.disabled
  },
  variants: [{
    props: {
      color: "default",
      disabled: !1,
      disableRipple: !1
    },
    style: {
      "&:hover": {
        backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette.action.active, e.palette.action.hoverOpacity)
      }
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o,
      disabled: !1,
      disableRipple: !1
    },
    style: {
      "&:hover": {
        backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette[o].main, e.palette.action.hoverOpacity)
      }
    }
  })), ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o,
      disabled: !1
    },
    style: {
      [`&.${jp.checked}`]: {
        color: (e.vars || e).palette[o].main
      }
    }
  })), {
    // Should be last to override other colors
    props: {
      disableRipple: !1
    },
    style: {
      // Reset on touch devices, it doesn't add specificity
      "&:hover": {
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }]
})));
function J1(e, o) {
  return typeof o == "object" && o !== null ? e === o : String(e) === String(o);
}
const Mp = /* @__PURE__ */ x.jsx(Il, {
  checked: !0
}), Ap = /* @__PURE__ */ x.jsx(Il, {}), Z1 = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiRadio"
  }), {
    checked: s,
    checkedIcon: a = Mp,
    color: i = "primary",
    icon: l = Ap,
    name: c,
    onChange: p,
    size: u = "medium",
    className: f,
    disabled: g,
    disableRipple: b = !1,
    ...h
  } = r, d = uo();
  let y = g;
  d && typeof y > "u" && (y = d.disabled), y ?? (y = !1);
  const S = {
    ...r,
    disabled: y,
    disableRipple: b,
    color: i,
    size: u
  }, O = K1(S), C = q1();
  let T = s;
  const w = yi(p, C && C.onChange);
  let E = c;
  return C && (typeof T > "u" && (T = J1(C.value, r.value)), typeof E > "u" && (E = C.name)), /* @__PURE__ */ x.jsx(X1, {
    type: "radio",
    icon: /* @__PURE__ */ m.cloneElement(l, {
      fontSize: Ap.props.fontSize ?? u
    }),
    checkedIcon: /* @__PURE__ */ m.cloneElement(a, {
      fontSize: Mp.props.fontSize ?? u
    }),
    disabled: y,
    ownerState: S,
    classes: O,
    name: E,
    checked: T,
    onChange: w,
    ref: n,
    className: W(O.root, f),
    ...h
  });
});
process.env.NODE_ENV !== "production" && (Z1.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   * @default <RadioButtonIcon checked />
   */
  checkedIcon: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * The icon to display when the component is unchecked.
   * @default <RadioButtonIcon />
   */
  icon: t.node,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense radio styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   */
  value: t.any
});
function Q1(e) {
  return ae("MuiRadioGroup", e);
}
const dN = le("MuiRadioGroup", ["root", "row", "error"]), eE = (e) => {
  const {
    classes: o,
    row: n,
    error: r
  } = e;
  return ce({
    root: ["root", n && "row", r && "error"]
  }, Q1, o);
}, tE = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    // private
    // eslint-disable-next-line react/prop-types
    actions: r,
    children: s,
    className: a,
    defaultValue: i,
    name: l,
    onChange: c,
    value: p,
    ...u
  } = o, f = m.useRef(null), g = eE(o), [b, h] = Kt({
    controlled: p,
    default: i,
    name: "RadioGroup"
  });
  m.useImperativeHandle(r, () => ({
    focus: () => {
      let O = f.current.querySelector("input:not(:disabled):checked");
      O || (O = f.current.querySelector("input:not(:disabled)")), O && O.focus();
    }
  }), []);
  const d = Ye(n, f), y = io(l), S = m.useMemo(() => ({
    name: y,
    onChange(O) {
      h(O.target.value), c && c(O, O.target.value);
    },
    value: b
  }), [y, c, h, b]);
  return /* @__PURE__ */ x.jsx(jl.Provider, {
    value: S,
    children: /* @__PURE__ */ x.jsx(_d, {
      role: "radiogroup",
      ref: d,
      className: W(g.root, a),
      ...u,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (tE.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * The name used to reference the value of the control.
   * If you don't provide this prop, it falls back to a randomly generated name.
   */
  name: t.string,
  /**
   * Callback fired when a radio button is selected.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {string} value The value of the selected radio button.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * Value of the selected radio button. The DOM API casts this to a string.
   */
  value: t.any
});
const oE = at(/* @__PURE__ */ x.jsx("path", {
  d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
}), "Star"), nE = at(/* @__PURE__ */ x.jsx("path", {
  d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
}), "StarBorder");
function rE(e) {
  return ae("MuiRating", e);
}
const pr = le("MuiRating", ["root", "sizeSmall", "sizeMedium", "sizeLarge", "readOnly", "disabled", "focusVisible", "visuallyHidden", "pristine", "label", "labelEmptyValueActive", "icon", "iconEmpty", "iconFilled", "iconHover", "iconFocus", "iconActive", "decimal"]);
function sE(e) {
  const o = e.toString().split(".")[1];
  return o ? o.length : 0;
}
function ri(e, o) {
  if (e == null)
    return e;
  const n = Math.round(e / o) * o;
  return Number(n.toFixed(sE(o)));
}
const aE = (e) => {
  const {
    classes: o,
    size: n,
    readOnly: r,
    disabled: s,
    emptyValueFocused: a,
    focusVisible: i
  } = e, l = {
    root: ["root", `size${L(n)}`, s && "disabled", i && "focusVisible", r && "readOnly"],
    label: ["label", "pristine"],
    labelEmptyValue: [a && "labelEmptyValueActive"],
    icon: ["icon"],
    iconEmpty: ["iconEmpty"],
    iconFilled: ["iconFilled"],
    iconHover: ["iconHover"],
    iconFocus: ["iconFocus"],
    iconActive: ["iconActive"],
    decimal: ["decimal"],
    visuallyHidden: ["visuallyHidden"]
  };
  return ce(l, rE, o);
}, iE = M("span", {
  name: "MuiRating",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${pr.visuallyHidden}`]: o.visuallyHidden
    }, o.root, o[`size${L(n.size)}`], n.readOnly && o.readOnly];
  }
})(Q(({
  theme: e
}) => ({
  display: "inline-flex",
  // Required to position the pristine input absolutely
  position: "relative",
  fontSize: e.typography.pxToRem(24),
  color: "#faaf00",
  cursor: "pointer",
  textAlign: "left",
  width: "min-content",
  WebkitTapHighlightColor: "transparent",
  [`&.${pr.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity,
    pointerEvents: "none"
  },
  [`&.${pr.focusVisible} .${pr.iconActive}`]: {
    outline: "1px solid #999"
  },
  [`& .${pr.visuallyHidden}`]: Uu,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      fontSize: e.typography.pxToRem(18)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      fontSize: e.typography.pxToRem(30)
    }
  }, {
    // TODO v6: use the .Mui-readOnly global state class
    props: ({
      ownerState: o
    }) => o.readOnly,
    style: {
      pointerEvents: "none"
    }
  }]
}))), mf = M("label", {
  name: "MuiRating",
  slot: "Label",
  overridesResolver: ({
    ownerState: e
  }, o) => [o.label, e.emptyValueFocused && o.labelEmptyValueActive]
})({
  cursor: "inherit",
  variants: [{
    props: ({
      ownerState: e
    }) => e.emptyValueFocused,
    style: {
      top: 0,
      bottom: 0,
      position: "absolute",
      outline: "1px solid #999",
      width: "100%"
    }
  }]
}), lE = M("span", {
  name: "MuiRating",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, n.iconEmpty && o.iconEmpty, n.iconFilled && o.iconFilled, n.iconHover && o.iconHover, n.iconFocus && o.iconFocus, n.iconActive && o.iconActive];
  }
})(Q(({
  theme: e
}) => ({
  // Fit wrapper to actual icon size.
  display: "flex",
  transition: e.transitions.create("transform", {
    duration: e.transitions.duration.shortest
  }),
  // Fix mouseLeave issue.
  // https://github.com/facebook/react/issues/4492
  pointerEvents: "none",
  variants: [{
    props: ({
      ownerState: o
    }) => o.iconActive,
    style: {
      transform: "scale(1.2)"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.iconEmpty,
    style: {
      color: (e.vars || e).palette.action.disabled
    }
  }]
}))), cE = M("span", {
  name: "MuiRating",
  slot: "Decimal",
  shouldForwardProp: (e) => Yn(e) && e !== "iconActive",
  overridesResolver: (e, o) => {
    const {
      iconActive: n
    } = e;
    return [o.decimal, n && o.iconActive];
  }
})({
  position: "relative",
  variants: [{
    props: ({
      iconActive: e
    }) => e,
    style: {
      transform: "scale(1.2)"
    }
  }]
});
function gf(e) {
  const {
    value: o,
    ...n
  } = e;
  return /* @__PURE__ */ x.jsx("span", {
    ...n
  });
}
process.env.NODE_ENV !== "production" && (gf.propTypes = {
  value: t.number.isRequired
});
function Bi(e) {
  const {
    classes: o,
    disabled: n,
    emptyIcon: r,
    focus: s,
    getLabelText: a,
    highlightSelectedOnly: i,
    hover: l,
    icon: c,
    IconContainerComponent: p,
    isActive: u,
    itemValue: f,
    labelProps: g,
    name: b,
    onBlur: h,
    onChange: d,
    onClick: y,
    onFocus: S,
    readOnly: O,
    ownerState: C,
    ratingValue: T,
    ratingValueRounded: w
  } = e, E = i ? f === T : f <= T, $ = f <= l, P = f <= s, N = f === w, v = `${b}-${io()}`, R = /* @__PURE__ */ x.jsx(lE, {
    as: p,
    value: f,
    className: W(o.icon, E ? o.iconFilled : o.iconEmpty, $ && o.iconHover, P && o.iconFocus, u && o.iconActive),
    ownerState: {
      ...C,
      iconEmpty: !E,
      iconFilled: E,
      iconHover: $,
      iconFocus: P,
      iconActive: u
    },
    children: r && !E ? r : c
  });
  return O ? /* @__PURE__ */ x.jsx("span", {
    ...g,
    children: R
  }) : /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ x.jsxs(mf, {
      ownerState: {
        ...C,
        emptyValueFocused: void 0
      },
      htmlFor: v,
      ...g,
      children: [R, /* @__PURE__ */ x.jsx("span", {
        className: o.visuallyHidden,
        children: a(f)
      })]
    }), /* @__PURE__ */ x.jsx("input", {
      className: o.visuallyHidden,
      onFocus: S,
      onBlur: h,
      onChange: d,
      onClick: y,
      disabled: n,
      value: f,
      id: v,
      type: "radio",
      name: b,
      checked: N
    })]
  });
}
process.env.NODE_ENV !== "production" && (Bi.propTypes = {
  classes: t.object.isRequired,
  disabled: t.bool.isRequired,
  emptyIcon: t.node,
  focus: t.number.isRequired,
  getLabelText: t.func.isRequired,
  highlightSelectedOnly: t.bool.isRequired,
  hover: t.number.isRequired,
  icon: t.node,
  IconContainerComponent: t.elementType.isRequired,
  isActive: t.bool.isRequired,
  itemValue: t.number.isRequired,
  labelProps: t.object,
  name: t.string,
  onBlur: t.func.isRequired,
  onChange: t.func.isRequired,
  onClick: t.func.isRequired,
  onFocus: t.func.isRequired,
  ownerState: t.object.isRequired,
  ratingValue: t.number,
  ratingValueRounded: t.number,
  readOnly: t.bool.isRequired
});
const pE = /* @__PURE__ */ x.jsx(oE, {
  fontSize: "inherit"
}), uE = /* @__PURE__ */ x.jsx(nE, {
  fontSize: "inherit"
});
function dE(e) {
  return `${e || "0"} Star${e !== 1 ? "s" : ""}`;
}
const fE = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    name: "MuiRating",
    props: o
  }), {
    component: s = "span",
    className: a,
    defaultValue: i = null,
    disabled: l = !1,
    emptyIcon: c = uE,
    emptyLabelText: p = "Empty",
    getLabelText: u = dE,
    highlightSelectedOnly: f = !1,
    icon: g = pE,
    IconContainerComponent: b = gf,
    max: h = 5,
    name: d,
    onChange: y,
    onChangeActive: S,
    onMouseLeave: O,
    onMouseMove: C,
    precision: T = 1,
    readOnly: w = !1,
    size: E = "medium",
    value: $,
    ...P
  } = r, N = io(d), [v, R] = Kt({
    controlled: $,
    default: i,
    name: "Rating"
  }), A = ri(v, T), j = go(), [{
    hover: k,
    focus: D
  }, B] = m.useState({
    hover: -1,
    focus: -1
  });
  let _ = A;
  k !== -1 && (_ = k), D !== -1 && (_ = D);
  const [H, U] = m.useState(!1), F = m.useRef(), V = Ye(F, n), me = (z) => {
    C && C(z);
    const be = F.current, {
      right: ye,
      left: Pe,
      width: Te
    } = be.getBoundingClientRect();
    let Z;
    j ? Z = (ye - z.clientX) / Te : Z = (z.clientX - Pe) / Te;
    let $e = ri(h * Z + T / 2, T);
    $e = qo($e, T, h), B((Oe) => Oe.hover === $e && Oe.focus === $e ? Oe : {
      hover: $e,
      focus: $e
    }), U(!1), S && k !== $e && S(z, $e);
  }, G = (z) => {
    O && O(z);
    const be = -1;
    B({
      hover: be,
      focus: be
    }), S && k !== be && S(z, be);
  }, X = (z) => {
    let be = z.target.value === "" ? null : parseFloat(z.target.value);
    k !== -1 && (be = k), R(be), y && y(z, be);
  }, Y = (z) => {
    z.clientX === 0 && z.clientY === 0 || (B({
      hover: -1,
      focus: -1
    }), R(null), y && parseFloat(z.target.value) === A && y(z, null));
  }, q = (z) => {
    ko(z.target) && U(!0);
    const be = parseFloat(z.target.value);
    B((ye) => ({
      hover: ye.hover,
      focus: be
    }));
  }, ie = (z) => {
    if (k !== -1)
      return;
    ko(z.target) || U(!1);
    const be = -1;
    B((ye) => ({
      hover: ye.hover,
      focus: be
    }));
  }, [K, de] = m.useState(!1), oe = {
    ...r,
    component: s,
    defaultValue: i,
    disabled: l,
    emptyIcon: c,
    emptyLabelText: p,
    emptyValueFocused: K,
    focusVisible: H,
    getLabelText: u,
    icon: g,
    IconContainerComponent: b,
    max: h,
    precision: T,
    readOnly: w,
    size: E
  }, he = aE(oe);
  return /* @__PURE__ */ x.jsxs(iE, {
    as: s,
    ref: V,
    onMouseMove: me,
    onMouseLeave: G,
    className: W(he.root, a, w && "MuiRating-readOnly"),
    ownerState: oe,
    role: w ? "img" : null,
    "aria-label": w ? u(_) : null,
    ...P,
    children: [Array.from(new Array(h)).map((z, be) => {
      const ye = be + 1, Pe = {
        classes: he,
        disabled: l,
        emptyIcon: c,
        focus: D,
        getLabelText: u,
        highlightSelectedOnly: f,
        hover: k,
        icon: g,
        IconContainerComponent: b,
        name: N,
        onBlur: ie,
        onChange: X,
        onClick: Y,
        onFocus: q,
        ratingValue: _,
        ratingValueRounded: A,
        readOnly: w,
        ownerState: oe
      }, Te = ye === Math.ceil(_) && (k !== -1 || D !== -1);
      if (T < 1) {
        const Z = Array.from(new Array(1 / T));
        return /* @__PURE__ */ x.jsx(cE, {
          className: W(he.decimal, Te && he.iconActive),
          ownerState: oe,
          iconActive: Te,
          children: Z.map(($e, Oe) => {
            const Me = ri(ye - 1 + (Oe + 1) * T, T);
            return /* @__PURE__ */ x.jsx(Bi, {
              ...Pe,
              // The icon is already displayed as active
              isActive: !1,
              itemValue: Me,
              labelProps: {
                style: Z.length - 1 === Oe ? {} : {
                  width: Me === _ ? `${(Oe + 1) * T * 100}%` : "0%",
                  overflow: "hidden",
                  position: "absolute"
                }
              }
            }, Me);
          })
        }, ye);
      }
      return /* @__PURE__ */ x.jsx(Bi, {
        ...Pe,
        isActive: Te,
        itemValue: ye
      }, ye);
    }), !w && !l && /* @__PURE__ */ x.jsxs(mf, {
      className: W(he.label, he.labelEmptyValue),
      ownerState: oe,
      children: [/* @__PURE__ */ x.jsx("input", {
        className: he.visuallyHidden,
        value: "",
        id: `${N}-empty`,
        type: "radio",
        name: N,
        checked: A == null,
        onFocus: () => de(!0),
        onBlur: () => de(!1),
        onChange: X
      }), /* @__PURE__ */ x.jsx("span", {
        className: he.visuallyHidden,
        children: p
      })]
    })]
  });
});
process.env.NODE_ENV !== "production" && (fE.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The default value. Use when the component is not controlled.
   * @default null
   */
  defaultValue: t.number,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * The icon to display when empty.
   * @default <StarBorder fontSize="inherit" />
   */
  emptyIcon: t.node,
  /**
   * The label read when the rating input is empty.
   * @default 'Empty'
   */
  emptyLabelText: t.node,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @param {number} value The rating label's value to format.
   * @returns {string}
   * @default function defaultLabelText(value) {
   *   return `${value || '0'} Star${value !== 1 ? 's' : ''}`;
   * }
   */
  getLabelText: t.func,
  /**
   * If `true`, only the selected icon will be highlighted.
   * @default false
   */
  highlightSelectedOnly: t.bool,
  /**
   * The icon to display.
   * @default <Star fontSize="inherit" />
   */
  icon: t.node,
  /**
   * The component containing the icon.
   * @default function IconContainer(props) {
   *   const { value, ...other } = props;
   *   return <span {...other} />;
   * }
   */
  IconContainerComponent: t.elementType,
  /**
   * Maximum rating.
   * @default 5
   */
  max: t.number,
  /**
   * The name attribute of the radio `input` elements.
   * This input `name` should be unique within the page.
   * Being unique within a form is insufficient since the `name` is used to generate IDs.
   */
  name: t.string,
  /**
   * Callback fired when the value changes.
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {number|null} value The new value.
   */
  onChange: t.func,
  /**
   * Callback function that is fired when the hover state changes.
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {number} value The new value.
   */
  onChangeActive: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * @ignore
   */
  onMouseMove: t.func,
  /**
   * The minimum increment value change allowed.
   * @default 1
   */
  precision: xt(t.number, (e) => e.precision < 0.1 ? new Error(["MUI: The prop `precision` should be above 0.1.", "A value below this limit has an imperceptible impact."].join(`
`)) : null),
  /**
   * Removes all hover effects and pointer events.
   * @default false
   */
  readOnly: t.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The rating value.
   */
  value: t.number
});
function mE(e) {
  return ae("MuiScopedCssBaseline", e);
}
const fN = le("MuiScopedCssBaseline", ["root"]), gE = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, mE, o);
}, bE = M("div", {
  name: "MuiScopedCssBaseline",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => {
  const o = {};
  return e.colorSchemes && Object.entries(e.colorSchemes).forEach(([n, r]) => {
    var a, i;
    const s = e.getColorSchemeSelector(n);
    s.startsWith("@") ? o[s] = {
      colorScheme: (a = r.palette) == null ? void 0 : a.mode
    } : o[`&${s.replace(/\s*&/, "")}`] = {
      colorScheme: (i = r.palette) == null ? void 0 : i.mode
    };
  }), {
    ...jd(e, !1),
    ...Md(e),
    "& *, & *::before, & *::after": {
      boxSizing: "inherit"
    },
    "& strong, & b": {
      fontWeight: e.typography.fontWeightBold
    },
    variants: [{
      props: {
        enableColorScheme: !0
      },
      style: e.vars ? o : {
        colorScheme: e.palette.mode
      }
    }]
  };
})), hE = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiScopedCssBaseline"
  }), {
    className: s,
    component: a = "div",
    enableColorScheme: i,
    ...l
  } = r, c = {
    ...r,
    component: a
  }, p = gE(c);
  return /* @__PURE__ */ x.jsx(bE, {
    as: a,
    className: W(p.root, s),
    ref: n,
    ownerState: c,
    ...l
  });
});
process.env.NODE_ENV !== "production" && (hE.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   */
  enableColorScheme: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function bf(e) {
  return ae("MuiSelect", e);
}
const ur = le("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
var Bp;
const yE = M(sf, {
  name: "MuiSelect",
  slot: "Select",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [
      // Win specificity over the input base
      {
        [`&.${ur.select}`]: o.select
      },
      {
        [`&.${ur.select}`]: o[n.variant]
      },
      {
        [`&.${ur.error}`]: o.error
      },
      {
        [`&.${ur.multiple}`]: o.multiple
      }
    ];
  }
})({
  // Win specificity over the input base
  [`&.${ur.select}`]: {
    height: "auto",
    // Resets for multiple select with chips
    minHeight: "1.4375em",
    // Required for select\text-field height consistency
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden"
  }
}), vE = M(af, {
  name: "MuiSelect",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, n.variant && o[`icon${L(n.variant)}`], n.open && o.iconOpen];
  }
})({}), xE = M("input", {
  shouldForwardProp: (e) => Yn(e) && e !== "classes",
  name: "MuiSelect",
  slot: "NativeInput",
  overridesResolver: (e, o) => o.nativeInput
})({
  bottom: 0,
  left: 0,
  position: "absolute",
  opacity: 0,
  pointerEvents: "none",
  width: "100%",
  boxSizing: "border-box"
});
function Lp(e, o) {
  return typeof o == "object" && o !== null ? e === o : String(e) === String(o);
}
function SE(e) {
  return e == null || typeof e == "string" && !e.trim();
}
const TE = (e) => {
  const {
    classes: o,
    variant: n,
    disabled: r,
    multiple: s,
    open: a,
    error: i
  } = e, l = {
    select: ["select", n, r && "disabled", s && "multiple", i && "error"],
    icon: ["icon", `icon${L(n)}`, a && "iconOpen", r && "disabled"],
    nativeInput: ["nativeInput"]
  };
  return ce(l, bf, o);
}, hf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  var Se;
  const {
    "aria-describedby": r,
    "aria-label": s,
    autoFocus: a,
    autoWidth: i,
    children: l,
    className: c,
    defaultOpen: p,
    defaultValue: u,
    disabled: f,
    displayEmpty: g,
    error: b = !1,
    IconComponent: h,
    inputRef: d,
    labelId: y,
    MenuProps: S = {},
    multiple: O,
    name: C,
    onBlur: T,
    onChange: w,
    onClose: E,
    onFocus: $,
    onOpen: P,
    open: N,
    readOnly: v,
    renderValue: R,
    required: A,
    SelectDisplayProps: j = {},
    tabIndex: k,
    // catching `type` from Input which makes no sense for SelectInput
    type: D,
    value: B,
    variant: _ = "standard",
    ...H
  } = o, [U, F] = Kt({
    controlled: B,
    default: u,
    name: "Select"
  }), [V, me] = Kt({
    controlled: N,
    default: p,
    name: "Select"
  }), G = m.useRef(null), X = m.useRef(null), [Y, q] = m.useState(null), {
    current: ie
  } = m.useRef(N != null), [K, de] = m.useState(), oe = Ye(n, d), he = m.useCallback((ne) => {
    X.current = ne, ne && q(ne);
  }, []), z = Y == null ? void 0 : Y.parentNode;
  m.useImperativeHandle(oe, () => ({
    focus: () => {
      X.current.focus();
    },
    node: G.current,
    value: U
  }), [U]), m.useEffect(() => {
    p && V && Y && !ie && (de(i ? null : z.clientWidth), X.current.focus());
  }, [Y, i]), m.useEffect(() => {
    a && X.current.focus();
  }, [a]), m.useEffect(() => {
    if (!y)
      return;
    const ne = lt(X.current).getElementById(y);
    if (ne) {
      const Ee = () => {
        getSelection().isCollapsed && X.current.focus();
      };
      return ne.addEventListener("click", Ee), () => {
        ne.removeEventListener("click", Ee);
      };
    }
  }, [y]);
  const be = (ne, Ee) => {
    ne ? P && P(Ee) : E && E(Ee), ie || (de(i ? null : z.clientWidth), me(ne));
  }, ye = (ne) => {
    ne.button === 0 && (ne.preventDefault(), X.current.focus(), be(!0, ne));
  }, Pe = (ne) => {
    be(!1, ne);
  }, Te = m.Children.toArray(l), Z = (ne) => {
    const Ee = Te.find((Ie) => Ie.props.value === ne.target.value);
    Ee !== void 0 && (F(Ee.props.value), w && w(ne, Ee));
  }, $e = (ne) => (Ee) => {
    let Ie;
    if (Ee.currentTarget.hasAttribute("tabindex")) {
      if (O) {
        Ie = Array.isArray(U) ? U.slice() : [];
        const Ve = U.indexOf(ne.props.value);
        Ve === -1 ? Ie.push(ne.props.value) : Ie.splice(Ve, 1);
      } else
        Ie = ne.props.value;
      if (ne.props.onClick && ne.props.onClick(Ee), U !== Ie && (F(Ie), w)) {
        const Ve = Ee.nativeEvent || Ee, Ke = new Ve.constructor(Ve.type, Ve);
        Object.defineProperty(Ke, "target", {
          writable: !0,
          value: {
            value: Ie,
            name: C
          }
        }), w(Ke, ne);
      }
      O || be(!1, Ee);
    }
  }, Oe = (ne) => {
    v || [
      " ",
      "ArrowUp",
      "ArrowDown",
      // The native select doesn't respond to enter on macOS, but it's recommended by
      // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
      "Enter"
    ].includes(ne.key) && (ne.preventDefault(), be(!0, ne));
  }, Me = Y !== null && V, I = (ne) => {
    !Me && T && (Object.defineProperty(ne, "target", {
      writable: !0,
      value: {
        value: U,
        name: C
      }
    }), T(ne));
  };
  delete H["aria-invalid"];
  let J, xe;
  const ke = [];
  let ee = !1, ue = !1;
  (Ys({
    value: U
  }) || g) && (R ? J = R(U) : ee = !0);
  const te = Te.map((ne) => {
    if (!/* @__PURE__ */ m.isValidElement(ne))
      return null;
    process.env.NODE_ENV !== "production" && Ft.isFragment(ne) && console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`));
    let Ee;
    if (O) {
      if (!Array.isArray(U))
        throw new Error(process.env.NODE_ENV !== "production" ? "MUI: The `value` prop must be an array when using the `Select` component with `multiple`." : zt(2));
      Ee = U.some((Ie) => Lp(Ie, ne.props.value)), Ee && ee && ke.push(ne.props.children);
    } else
      Ee = Lp(U, ne.props.value), Ee && ee && (xe = ne.props.children);
    return Ee && (ue = !0), /* @__PURE__ */ m.cloneElement(ne, {
      "aria-selected": Ee ? "true" : "false",
      onClick: $e(ne),
      onKeyUp: (Ie) => {
        Ie.key === " " && Ie.preventDefault(), ne.props.onKeyUp && ne.props.onKeyUp(Ie);
      },
      role: "option",
      selected: Ee,
      value: void 0,
      // The value is most likely not a valid HTML attribute.
      "data-value": ne.props.value
      // Instead, we provide it as a data attribute.
    });
  });
  process.env.NODE_ENV !== "production" && m.useEffect(() => {
    if (!ue && !O && U !== "") {
      const ne = Te.map((Ee) => Ee.props.value);
      console.warn([`MUI: You have provided an out-of-range value \`${U}\` for the select ${C ? `(name="${C}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${ne.filter((Ee) => Ee != null).map((Ee) => `\`${Ee}\``).join(", ") || '""'}.`].join(`
`));
    }
  }, [ue, Te, O, C, U]), ee && (O ? ke.length === 0 ? J = null : J = ke.reduce((ne, Ee, Ie) => (ne.push(Ee), Ie < ke.length - 1 && ne.push(", "), ne), []) : J = xe);
  let we = K;
  !i && ie && Y && (we = z.clientWidth);
  let Ce;
  typeof k < "u" ? Ce = k : Ce = f ? null : 0;
  const ge = j.id || (C ? `mui-component-select-${C}` : void 0), ve = {
    ...o,
    variant: _,
    value: U,
    open: Me,
    error: b
  }, Be = TE(ve), Ae = {
    ...S.PaperProps,
    ...(Se = S.slotProps) == null ? void 0 : Se.paper
  }, Fe = io();
  return /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ x.jsx(yE, {
      as: "div",
      ref: he,
      tabIndex: Ce,
      role: "combobox",
      "aria-controls": Me ? Fe : void 0,
      "aria-disabled": f ? "true" : void 0,
      "aria-expanded": Me ? "true" : "false",
      "aria-haspopup": "listbox",
      "aria-label": s,
      "aria-labelledby": [y, ge].filter(Boolean).join(" ") || void 0,
      "aria-describedby": r,
      "aria-required": A ? "true" : void 0,
      "aria-invalid": b ? "true" : void 0,
      onKeyDown: Oe,
      onMouseDown: f || v ? null : ye,
      onBlur: I,
      onFocus: $,
      ...j,
      ownerState: ve,
      className: W(j.className, Be.select, c),
      id: ge,
      children: SE(J) ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        Bp || (Bp = /* @__PURE__ */ x.jsx("span", {
          className: "notranslate",
          "aria-hidden": !0,
          children: "​"
        }))
      ) : J
    }), /* @__PURE__ */ x.jsx(xE, {
      "aria-invalid": b,
      value: Array.isArray(U) ? U.join(",") : U,
      name: C,
      ref: G,
      "aria-hidden": !0,
      onChange: Z,
      tabIndex: -1,
      disabled: f,
      className: Be.nativeInput,
      autoFocus: a,
      required: A,
      ...H,
      ownerState: ve
    }), /* @__PURE__ */ x.jsx(vE, {
      as: h,
      className: Be.icon,
      ownerState: ve
    }), /* @__PURE__ */ x.jsx(of, {
      id: `menu-${C || ""}`,
      anchorEl: z,
      open: Me,
      onClose: Pe,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "center"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "center"
      },
      ...S,
      MenuListProps: {
        "aria-labelledby": y,
        role: "listbox",
        "aria-multiselectable": O ? "true" : void 0,
        disableListWrap: !0,
        id: Fe,
        ...S.MenuListProps
      },
      slotProps: {
        ...S.slotProps,
        paper: {
          ...Ae,
          style: {
            minWidth: we,
            ...Ae != null ? Ae.style : null
          }
        }
      },
      children: te
    })]
  });
});
process.env.NODE_ENV !== "production" && (hf.propTypes = {
  /**
   * @ignore
   */
  "aria-describedby": t.string,
  /**
   * @ignore
   */
  "aria-label": t.string,
  /**
   * @ignore
   */
  autoFocus: t.bool,
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   */
  autoWidth: t.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `<MenuItem>` elements.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The CSS class name of the select element.
   */
  className: t.string,
  /**
   * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
   * You can only use it when the `native` prop is `false` (default).
   */
  defaultOpen: t.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the select is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the selected item is displayed even if its value is empty.
   */
  displayEmpty: t.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: t.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: t.elementType.isRequired,
  /**
   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
   * Equivalent to `ref`
   */
  inputRef: Nt,
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: t.string,
  /**
   * Props applied to the [`Menu`](/material-ui/api/menu/) element.
   */
  MenuProps: t.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   */
  multiple: t.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: t.string,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * @param {object} [child] The react element that was selected.
   */
  onChange: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * @ignore
   */
  readOnly: t.bool,
  /**
   * Render the selected value.
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: t.func,
  /**
   * If `true`, the component is required.
   */
  required: t.bool,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: t.object,
  /**
   * @ignore
   */
  tabIndex: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  type: t.any,
  /**
   * The input value.
   */
  value: t.any,
  /**
   * The variant to use.
   */
  variant: t.oneOf(["standard", "outlined", "filled"])
});
const CE = (e) => {
  const {
    classes: o
  } = e, r = ce({
    root: ["root"]
  }, bf, o);
  return {
    ...o,
    ...r
  };
}, Ml = {
  name: "MuiSelect",
  overridesResolver: (e, o) => o.root,
  shouldForwardProp: (e) => bt(e) && e !== "variant",
  slot: "Root"
}, wE = M(Kr, Ml)(""), OE = M(Na, Ml)(""), EE = M(Pa, Ml)(""), Ia = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    name: "MuiSelect",
    props: o
  }), {
    autoWidth: s = !1,
    children: a,
    classes: i = {},
    className: l,
    defaultOpen: c = !1,
    displayEmpty: p = !1,
    IconComponent: u = Sl,
    id: f,
    input: g,
    inputProps: b,
    label: h,
    labelId: d,
    MenuProps: y,
    multiple: S = !1,
    native: O = !1,
    onClose: C,
    onOpen: T,
    open: w,
    renderValue: E,
    SelectDisplayProps: $,
    variant: P = "outlined",
    ...N
  } = r, v = O ? Nl : hf, R = uo(), A = _o({
    props: r,
    muiFormControl: R,
    states: ["variant", "error"]
  }), j = A.variant || P, k = {
    ...r,
    variant: j,
    classes: i
  }, D = CE(k), {
    root: B,
    ..._
  } = D, H = g || {
    standard: /* @__PURE__ */ x.jsx(wE, {
      ownerState: k
    }),
    outlined: /* @__PURE__ */ x.jsx(OE, {
      label: h,
      ownerState: k
    }),
    filled: /* @__PURE__ */ x.jsx(EE, {
      ownerState: k
    })
  }[j], U = Ye(n, Vo(H));
  return /* @__PURE__ */ x.jsx(m.Fragment, {
    children: /* @__PURE__ */ m.cloneElement(H, {
      // Most of the logic is implemented in `SelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: v,
      inputProps: {
        children: a,
        error: A.error,
        IconComponent: u,
        variant: j,
        type: void 0,
        // We render a select. We can ignore the type provided by the `Input`.
        multiple: S,
        ...O ? {
          id: f
        } : {
          autoWidth: s,
          defaultOpen: c,
          displayEmpty: p,
          labelId: d,
          MenuProps: y,
          onClose: C,
          onOpen: T,
          open: w,
          renderValue: E,
          SelectDisplayProps: {
            id: f,
            ...$
          }
        },
        ...b,
        classes: b ? Ct(_, b.classes) : _,
        ...g ? g.props.inputProps : {}
      },
      ...(S && O || p) && j === "outlined" ? {
        notched: !0
      } : {},
      ref: U,
      className: W(H.props.className, l, D.root),
      // If a custom input is provided via 'input' prop, do not allow 'variant' to be propagated to it's root element. See https://github.com/mui/material-ui/issues/33894.
      ...!g && {
        variant: j
      },
      ...N
    })
  });
});
process.env.NODE_ENV !== "production" && (Ia.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   * @default false
   */
  autoWidth: t.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
   *
   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   * @default {}
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
   * You can only use it when the `native` prop is `false` (default).
   * @default false
   */
  defaultOpen: t.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, a value is displayed even if no items are selected.
   *
   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
   * returns the value to be displayed when no items are selected.
   *
   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
   * The label should either be hidden or forced to a shrunk state.
   * @default false
   */
  displayEmpty: t.bool,
  /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */
  IconComponent: t.elementType,
  /**
   * The `id` of the wrapper element or the `select` element when `native`.
   */
  id: t.string,
  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */
  input: t.element,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * When `native` is `true`, the attributes are applied on the `select` element.
   */
  inputProps: t.object,
  /**
   * See [OutlinedInput#label](https://mui.com/material-ui/api/outlined-input/#props)
   */
  label: t.node,
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: t.string,
  /**
   * Props applied to the [`Menu`](https://mui.com/material-ui/api/menu/) element.
   */
  MenuProps: t.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: t.bool,
  /**
   * If `true`, the component uses a native `select` element.
   * @default false
   */
  native: t.bool,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {SelectChangeEvent<Value>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
   * @param {object} [child] The react element that was selected when `native` is `false` (default).
   */
  onChange: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   * You can only use it when the `native` prop is `false` (default).
   */
  open: t.bool,
  /**
   * Render the selected value.
   * You can only use it when the `native` prop is `false` (default).
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: t.func,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The `input` value. Providing an empty string will select no options.
   * Set to an empty string `''` if you don't want any of the available options to be selected.
   *
   * If the value is an object it must have reference equality with the option in order to be selected.
   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
   */
  value: t.oneOfType([t.oneOf([""]), t.any]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
Ia.muiName = "Select";
function RE(e) {
  return ae("MuiSkeleton", e);
}
const mN = le("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]), $E = (e) => {
  const {
    classes: o,
    variant: n,
    animation: r,
    hasChildren: s,
    width: a,
    height: i
  } = e;
  return ce({
    root: ["root", n, r, s && "withChildren", s && !a && "fitContent", s && !i && "heightAuto"]
  }, RE, o);
}, Li = No`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`, Di = No`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`, kE = typeof Li != "string" ? tn`
        animation: ${Li} 2s ease-in-out 0.5s infinite;
      ` : null, PE = typeof Di != "string" ? tn`
        &::after {
          animation: ${Di} 2s linear 0.5s infinite;
        }
      ` : null, NE = M("span", {
  name: "MuiSkeleton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], n.animation !== !1 && o[n.animation], n.hasChildren && o.withChildren, n.hasChildren && !n.width && o.fitContent, n.hasChildren && !n.height && o.heightAuto];
  }
})(Q(({
  theme: e
}) => {
  const o = cd(e.shape.borderRadius) || "px", n = Go(e.shape.borderRadius);
  return {
    display: "block",
    // Create a "on paper" color with sufficient contrast retaining the color
    backgroundColor: e.vars ? e.vars.palette.Skeleton.bg : Ne(e.palette.text.primary, e.palette.mode === "light" ? 0.11 : 0.13),
    height: "1.2em",
    variants: [{
      props: {
        variant: "text"
      },
      style: {
        marginTop: 0,
        marginBottom: 0,
        height: "auto",
        transformOrigin: "0 55%",
        transform: "scale(1, 0.60)",
        borderRadius: `${n}${o}/${Math.round(n / 0.6 * 10) / 10}${o}`,
        "&:empty:before": {
          content: '"\\00a0"'
        }
      }
    }, {
      props: {
        variant: "circular"
      },
      style: {
        borderRadius: "50%"
      }
    }, {
      props: {
        variant: "rounded"
      },
      style: {
        borderRadius: (e.vars || e).shape.borderRadius
      }
    }, {
      props: ({
        ownerState: r
      }) => r.hasChildren,
      style: {
        "& > *": {
          visibility: "hidden"
        }
      }
    }, {
      props: ({
        ownerState: r
      }) => r.hasChildren && !r.width,
      style: {
        maxWidth: "fit-content"
      }
    }, {
      props: ({
        ownerState: r
      }) => r.hasChildren && !r.height,
      style: {
        height: "auto"
      }
    }, {
      props: {
        animation: "pulse"
      },
      style: kE || {
        animation: `${Li} 2s ease-in-out 0.5s infinite`
      }
    }, {
      props: {
        animation: "wave"
      },
      style: {
        position: "relative",
        overflow: "hidden",
        /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
        WebkitMaskImage: "-webkit-radial-gradient(white, black)",
        "&::after": {
          background: `linear-gradient(
                90deg,
                transparent,
                ${(e.vars || e).palette.action.hover},
                transparent
              )`,
          content: '""',
          position: "absolute",
          transform: "translateX(-100%)",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0
        }
      }
    }, {
      props: {
        animation: "wave"
      },
      style: PE || {
        "&::after": {
          animation: `${Di} 2s linear 0.5s infinite`
        }
      }
    }]
  };
})), IE = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSkeleton"
  }), {
    animation: s = "pulse",
    className: a,
    component: i = "span",
    height: l,
    style: c,
    variant: p = "text",
    width: u,
    ...f
  } = r, g = {
    ...r,
    animation: s,
    component: i,
    variant: p,
    hasChildren: !!f.children
  }, b = $E(g);
  return /* @__PURE__ */ x.jsx(NE, {
    as: i,
    ref: n,
    className: W(b.root, a),
    ownerState: g,
    ...f,
    style: {
      width: u,
      height: l,
      ...c
    }
  });
});
process.env.NODE_ENV !== "production" && (IE.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The animation.
   * If `false` the animation effect is disabled.
   * @default 'pulse'
   */
  animation: t.oneOf(["pulse", "wave", !1]),
  /**
   * Optional children to infer width and height from.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Height of the skeleton.
   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
   */
  height: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The type of content that will be rendered.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["circular", "rectangular", "rounded", "text"]), t.string]),
  /**
   * Width of the skeleton.
   * Useful when the skeleton is inside an inline element with no width of its own.
   */
  width: t.oneOfType([t.number, t.string])
});
function jE(e, o, n = (r, s) => r === s) {
  return e.length === o.length && e.every((r, s) => n(r, o[s]));
}
const ME = 2;
function Rn(e, o, n, r, s) {
  return n === 1 ? Math.min(e + o, s) : Math.max(e - o, r);
}
function yf(e, o) {
  return e - o;
}
function Dp(e, o) {
  const {
    index: n
  } = e.reduce((r, s, a) => {
    const i = Math.abs(o - s);
    return r === null || i < r.distance || i === r.distance ? {
      distance: i,
      index: a
    } : r;
  }, null) ?? {};
  return n;
}
function fs(e, o) {
  if (o.current !== void 0 && e.changedTouches) {
    const n = e;
    for (let r = 0; r < n.changedTouches.length; r += 1) {
      const s = n.changedTouches[r];
      if (s.identifier === o.current)
        return {
          x: s.clientX,
          y: s.clientY
        };
    }
    return !1;
  }
  return {
    x: e.clientX,
    y: e.clientY
  };
}
function ta(e, o, n) {
  return (e - o) * 100 / (n - o);
}
function AE(e, o, n) {
  return (n - o) * e + o;
}
function BE(e) {
  if (Math.abs(e) < 1) {
    const n = e.toExponential().split("e-"), r = n[0].split(".")[1];
    return (r ? r.length : 0) + parseInt(n[1], 10);
  }
  const o = e.toString().split(".")[1];
  return o ? o.length : 0;
}
function LE(e, o, n) {
  const r = Math.round((e - n) / o) * o + n;
  return Number(r.toFixed(BE(o)));
}
function zp({
  values: e,
  newValue: o,
  index: n
}) {
  const r = e.slice();
  return r[n] = o, r.sort(yf);
}
function ms({
  sliderRef: e,
  activeIndex: o,
  setActive: n
}) {
  var s, a, i;
  const r = lt(e.current);
  (!((s = e.current) != null && s.contains(r.activeElement)) || Number((a = r == null ? void 0 : r.activeElement) == null ? void 0 : a.getAttribute("data-index")) !== o) && ((i = e.current) == null || i.querySelector(`[type="range"][data-index="${o}"]`).focus()), n && n(o);
}
function gs(e, o) {
  return typeof e == "number" && typeof o == "number" ? e === o : typeof e == "object" && typeof o == "object" ? jE(e, o) : !1;
}
const DE = {
  horizontal: {
    offset: (e) => ({
      left: `${e}%`
    }),
    leap: (e) => ({
      width: `${e}%`
    })
  },
  "horizontal-reverse": {
    offset: (e) => ({
      right: `${e}%`
    }),
    leap: (e) => ({
      width: `${e}%`
    })
  },
  vertical: {
    offset: (e) => ({
      bottom: `${e}%`
    }),
    leap: (e) => ({
      height: `${e}%`
    })
  }
}, zE = (e) => e;
let bs;
function Fp() {
  return bs === void 0 && (typeof CSS < "u" && typeof CSS.supports == "function" ? bs = CSS.supports("touch-action", "none") : bs = !0), bs;
}
function FE(e) {
  const {
    "aria-labelledby": o,
    defaultValue: n,
    disabled: r = !1,
    disableSwap: s = !1,
    isRtl: a = !1,
    marks: i = !1,
    max: l = 100,
    min: c = 0,
    name: p,
    onChange: u,
    onChangeCommitted: f,
    orientation: g = "horizontal",
    rootRef: b,
    scale: h = zE,
    step: d = 1,
    shiftStep: y = 10,
    tabIndex: S,
    value: O
  } = e, C = m.useRef(void 0), [T, w] = m.useState(-1), [E, $] = m.useState(-1), [P, N] = m.useState(!1), v = m.useRef(0), R = m.useRef(null), [A, j] = Kt({
    controlled: O,
    default: n ?? c,
    name: "Slider"
  }), k = u && ((ee, ue, te) => {
    const we = ee.nativeEvent || ee, Ce = new we.constructor(we.type, we);
    Object.defineProperty(Ce, "target", {
      writable: !0,
      value: {
        value: ue,
        name: p
      }
    }), R.current = ue, u(Ce, ue, te);
  }), D = Array.isArray(A);
  let B = D ? A.slice().sort(yf) : [A];
  B = B.map((ee) => ee == null ? c : qo(ee, c, l));
  const _ = i === !0 && d !== null ? [...Array(Math.floor((l - c) / d) + 1)].map((ee, ue) => ({
    value: c + d * ue
  })) : i || [], H = _.map((ee) => ee.value), [U, F] = m.useState(-1), V = m.useRef(null), me = Ye(b, V), G = (ee) => (ue) => {
    var we;
    const te = Number(ue.currentTarget.getAttribute("data-index"));
    ko(ue.target) && F(te), $(te), (we = ee == null ? void 0 : ee.onFocus) == null || we.call(ee, ue);
  }, X = (ee) => (ue) => {
    var te;
    ko(ue.target) || F(-1), $(-1), (te = ee == null ? void 0 : ee.onBlur) == null || te.call(ee, ue);
  }, Y = (ee, ue) => {
    const te = Number(ee.currentTarget.getAttribute("data-index")), we = B[te], Ce = H.indexOf(we);
    let ge = ue;
    if (_ && d == null) {
      const ve = H[H.length - 1];
      ge >= ve ? ge = ve : ge <= H[0] ? ge = H[0] : ge = ge < we ? H[Ce - 1] : H[Ce + 1];
    }
    if (ge = qo(ge, c, l), D) {
      s && (ge = qo(ge, B[te - 1] || -1 / 0, B[te + 1] || 1 / 0));
      const ve = ge;
      ge = zp({
        values: B,
        newValue: ge,
        index: te
      });
      let Be = te;
      s || (Be = ge.indexOf(ve)), ms({
        sliderRef: V,
        activeIndex: Be
      });
    }
    j(ge), F(te), k && !gs(ge, A) && k(ee, ge, te), f && f(ee, R.current ?? ge);
  }, q = (ee) => (ue) => {
    var te;
    if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "PageUp", "PageDown", "Home", "End"].includes(ue.key)) {
      ue.preventDefault();
      const we = Number(ue.currentTarget.getAttribute("data-index")), Ce = B[we];
      let ge = null;
      if (d != null) {
        const ve = ue.shiftKey ? y : d;
        switch (ue.key) {
          case "ArrowUp":
            ge = Rn(Ce, ve, 1, c, l);
            break;
          case "ArrowRight":
            ge = Rn(Ce, ve, a ? -1 : 1, c, l);
            break;
          case "ArrowDown":
            ge = Rn(Ce, ve, -1, c, l);
            break;
          case "ArrowLeft":
            ge = Rn(Ce, ve, a ? 1 : -1, c, l);
            break;
          case "PageUp":
            ge = Rn(Ce, y, 1, c, l);
            break;
          case "PageDown":
            ge = Rn(Ce, y, -1, c, l);
            break;
          case "Home":
            ge = c;
            break;
          case "End":
            ge = l;
            break;
        }
      } else if (_) {
        const ve = H[H.length - 1], Be = H.indexOf(Ce), Ae = [a ? "ArrowRight" : "ArrowLeft", "ArrowDown", "PageDown", "Home"], Fe = [a ? "ArrowLeft" : "ArrowRight", "ArrowUp", "PageUp", "End"];
        Ae.includes(ue.key) ? Be === 0 ? ge = H[0] : ge = H[Be - 1] : Fe.includes(ue.key) && (Be === H.length - 1 ? ge = ve : ge = H[Be + 1]);
      }
      ge != null && Y(ue, ge);
    }
    (te = ee == null ? void 0 : ee.onKeyDown) == null || te.call(ee, ue);
  };
  Rt(() => {
    var ee;
    r && V.current.contains(document.activeElement) && ((ee = document.activeElement) == null || ee.blur());
  }, [r]), r && T !== -1 && w(-1), r && U !== -1 && F(-1);
  const ie = (ee) => (ue) => {
    var te;
    (te = ee.onChange) == null || te.call(ee, ue), Y(ue, ue.target.valueAsNumber);
  }, K = m.useRef(void 0);
  let de = g;
  a && g === "horizontal" && (de += "-reverse");
  const oe = ({
    finger: ee,
    move: ue = !1
  }) => {
    const {
      current: te
    } = V, {
      width: we,
      height: Ce,
      bottom: ge,
      left: ve
    } = te.getBoundingClientRect();
    let Be;
    de.startsWith("vertical") ? Be = (ge - ee.y) / Ce : Be = (ee.x - ve) / we, de.includes("-reverse") && (Be = 1 - Be);
    let Ae;
    if (Ae = AE(Be, c, l), d)
      Ae = LE(Ae, d, c);
    else {
      const Se = Dp(H, Ae);
      Ae = H[Se];
    }
    Ae = qo(Ae, c, l);
    let Fe = 0;
    if (D) {
      ue ? Fe = K.current : Fe = Dp(B, Ae), s && (Ae = qo(Ae, B[Fe - 1] || -1 / 0, B[Fe + 1] || 1 / 0));
      const Se = Ae;
      Ae = zp({
        values: B,
        newValue: Ae,
        index: Fe
      }), s && ue || (Fe = Ae.indexOf(Se), K.current = Fe);
    }
    return {
      newValue: Ae,
      activeIndex: Fe
    };
  }, he = pt((ee) => {
    const ue = fs(ee, C);
    if (!ue)
      return;
    if (v.current += 1, ee.type === "mousemove" && ee.buttons === 0) {
      z(ee);
      return;
    }
    const {
      newValue: te,
      activeIndex: we
    } = oe({
      finger: ue,
      move: !0
    });
    ms({
      sliderRef: V,
      activeIndex: we,
      setActive: w
    }), j(te), !P && v.current > ME && N(!0), k && !gs(te, A) && k(ee, te, we);
  }), z = pt((ee) => {
    const ue = fs(ee, C);
    if (N(!1), !ue)
      return;
    const {
      newValue: te
    } = oe({
      finger: ue,
      move: !0
    });
    w(-1), ee.type === "touchend" && $(-1), f && f(ee, R.current ?? te), C.current = void 0, ye();
  }), be = pt((ee) => {
    if (r)
      return;
    Fp() || ee.preventDefault();
    const ue = ee.changedTouches[0];
    ue != null && (C.current = ue.identifier);
    const te = fs(ee, C);
    if (te !== !1) {
      const {
        newValue: Ce,
        activeIndex: ge
      } = oe({
        finger: te
      });
      ms({
        sliderRef: V,
        activeIndex: ge,
        setActive: w
      }), j(Ce), k && !gs(Ce, A) && k(ee, Ce, ge);
    }
    v.current = 0;
    const we = lt(V.current);
    we.addEventListener("touchmove", he, {
      passive: !0
    }), we.addEventListener("touchend", z, {
      passive: !0
    });
  }), ye = m.useCallback(() => {
    const ee = lt(V.current);
    ee.removeEventListener("mousemove", he), ee.removeEventListener("mouseup", z), ee.removeEventListener("touchmove", he), ee.removeEventListener("touchend", z);
  }, [z, he]);
  m.useEffect(() => {
    const {
      current: ee
    } = V;
    return ee.addEventListener("touchstart", be, {
      passive: Fp()
    }), () => {
      ee.removeEventListener("touchstart", be), ye();
    };
  }, [ye, be]), m.useEffect(() => {
    r && ye();
  }, [r, ye]);
  const Pe = (ee) => (ue) => {
    var Ce;
    if ((Ce = ee.onMouseDown) == null || Ce.call(ee, ue), r || ue.defaultPrevented || ue.button !== 0)
      return;
    ue.preventDefault();
    const te = fs(ue, C);
    if (te !== !1) {
      const {
        newValue: ge,
        activeIndex: ve
      } = oe({
        finger: te
      });
      ms({
        sliderRef: V,
        activeIndex: ve,
        setActive: w
      }), j(ge), k && !gs(ge, A) && k(ue, ge, ve);
    }
    v.current = 0;
    const we = lt(V.current);
    we.addEventListener("mousemove", he, {
      passive: !0
    }), we.addEventListener("mouseup", z);
  }, Te = ta(D ? B[0] : c, c, l), Z = ta(B[B.length - 1], c, l) - Te, $e = (ee = {}) => {
    const ue = vn(ee), te = {
      onMouseDown: Pe(ue || {})
    }, we = {
      ...ue,
      ...te
    };
    return {
      ...ee,
      ref: me,
      ...we
    };
  }, Oe = (ee) => (ue) => {
    var we;
    (we = ee.onMouseOver) == null || we.call(ee, ue);
    const te = Number(ue.currentTarget.getAttribute("data-index"));
    $(te);
  }, Me = (ee) => (ue) => {
    var te;
    (te = ee.onMouseLeave) == null || te.call(ee, ue), $(-1);
  }, I = (ee = {}) => {
    const ue = vn(ee), te = {
      onMouseOver: Oe(ue || {}),
      onMouseLeave: Me(ue || {})
    };
    return {
      ...ee,
      ...ue,
      ...te
    };
  }, J = (ee) => ({
    // So the non active thumb doesn't show its label on hover.
    pointerEvents: T !== -1 && T !== ee ? "none" : void 0
  });
  let xe;
  return g === "vertical" && (xe = a ? "vertical-rl" : "vertical-lr"), {
    active: T,
    axis: de,
    axisProps: DE,
    dragging: P,
    focusedThumbIndex: U,
    getHiddenInputProps: (ee = {}) => {
      const ue = vn(ee), te = {
        onChange: ie(ue || {}),
        onFocus: G(ue || {}),
        onBlur: X(ue || {}),
        onKeyDown: q(ue || {})
      }, we = {
        ...ue,
        ...te
      };
      return {
        tabIndex: S,
        "aria-labelledby": o,
        "aria-orientation": g,
        "aria-valuemax": h(l),
        "aria-valuemin": h(c),
        name: p,
        type: "range",
        min: e.min,
        max: e.max,
        step: e.step === null && e.marks ? "any" : e.step ?? void 0,
        disabled: r,
        ...ee,
        ...we,
        style: {
          ...Uu,
          direction: a ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%",
          writingMode: xe
        }
      };
    },
    getRootProps: $e,
    getThumbProps: I,
    marks: _,
    open: E,
    range: D,
    rootRef: me,
    trackLeap: Z,
    trackOffset: Te,
    values: B,
    getThumbStyle: J
  };
}
const VE = (e) => !e || !Lo(e);
function _E(e) {
  return ae("MuiSlider", e);
}
const ro = le("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "thumbColorError", "thumbColorSuccess", "thumbColorInfo", "thumbColorWarning", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]), WE = (e) => {
  const {
    open: o
  } = e;
  return {
    offset: W(o && ro.valueLabelOpen),
    circle: ro.valueLabelCircle,
    label: ro.valueLabelLabel
  };
};
function vf(e) {
  const {
    children: o,
    className: n,
    value: r
  } = e, s = WE(e);
  return o ? /* @__PURE__ */ m.cloneElement(o, {
    className: W(o.props.className)
  }, /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [o.props.children, /* @__PURE__ */ x.jsx("span", {
      className: W(s.offset, n),
      "aria-hidden": !0,
      children: /* @__PURE__ */ x.jsx("span", {
        className: s.circle,
        children: /* @__PURE__ */ x.jsx("span", {
          className: s.label,
          children: r
        })
      })
    })]
  })) : null;
}
process.env.NODE_ENV !== "production" && (vf.propTypes = {
  children: t.element.isRequired,
  className: t.string,
  value: t.node
});
function Vp(e) {
  return e;
}
const UE = M("span", {
  name: "MuiSlider",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`color${L(n.color)}`], n.size !== "medium" && o[`size${L(n.size)}`], n.marked && o.marked, n.orientation === "vertical" && o.vertical, n.track === "inverted" && o.trackInverted, n.track === !1 && o.trackFalse];
  }
})(Q(({
  theme: e
}) => ({
  borderRadius: 12,
  boxSizing: "content-box",
  display: "inline-block",
  position: "relative",
  cursor: "pointer",
  touchAction: "none",
  WebkitTapHighlightColor: "transparent",
  "@media print": {
    colorAdjust: "exact"
  },
  [`&.${ro.disabled}`]: {
    pointerEvents: "none",
    cursor: "default",
    color: (e.vars || e).palette.grey[400]
  },
  [`&.${ro.dragging}`]: {
    [`& .${ro.thumb}, & .${ro.track}`]: {
      transition: "none"
    }
  },
  variants: [...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      color: (e.vars || e).palette[o].main
    }
  })), {
    props: {
      orientation: "horizontal"
    },
    style: {
      height: 4,
      width: "100%",
      padding: "13px 0",
      // The primary input mechanism of the device includes a pointing device of limited accuracy.
      "@media (pointer: coarse)": {
        // Reach 42px touch target, about ~8mm on screen.
        padding: "20px 0"
      }
    }
  }, {
    props: {
      orientation: "horizontal",
      size: "small"
    },
    style: {
      height: 2
    }
  }, {
    props: {
      orientation: "horizontal",
      marked: !0
    },
    style: {
      marginBottom: 20
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      height: "100%",
      width: 4,
      padding: "0 13px",
      // The primary input mechanism of the device includes a pointing device of limited accuracy.
      "@media (pointer: coarse)": {
        // Reach 42px touch target, about ~8mm on screen.
        padding: "0 20px"
      }
    }
  }, {
    props: {
      orientation: "vertical",
      size: "small"
    },
    style: {
      width: 2
    }
  }, {
    props: {
      orientation: "vertical",
      marked: !0
    },
    style: {
      marginRight: 44
    }
  }]
}))), HE = M("span", {
  name: "MuiSlider",
  slot: "Rail",
  overridesResolver: (e, o) => o.rail
})({
  display: "block",
  position: "absolute",
  borderRadius: "inherit",
  backgroundColor: "currentColor",
  opacity: 0.38,
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      width: "100%",
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      height: "100%",
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }
  }, {
    props: {
      track: "inverted"
    },
    style: {
      opacity: 1
    }
  }]
}), GE = M("span", {
  name: "MuiSlider",
  slot: "Track",
  overridesResolver: (e, o) => o.track
})(Q(({
  theme: e
}) => ({
  display: "block",
  position: "absolute",
  borderRadius: "inherit",
  border: "1px solid currentColor",
  backgroundColor: "currentColor",
  transition: e.transitions.create(["left", "width", "bottom", "height"], {
    duration: e.transitions.duration.shortest
  }),
  variants: [{
    props: {
      size: "small"
    },
    style: {
      border: "none"
    }
  }, {
    props: {
      orientation: "horizontal"
    },
    style: {
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }
  }, {
    props: {
      track: !1
    },
    style: {
      display: "none"
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o,
      track: "inverted"
    },
    style: {
      ...e.vars ? {
        backgroundColor: e.vars.palette.Slider[`${o}Track`],
        borderColor: e.vars.palette.Slider[`${o}Track`]
      } : {
        backgroundColor: Ro(e.palette[o].main, 0.62),
        borderColor: Ro(e.palette[o].main, 0.62),
        ...e.applyStyles("dark", {
          backgroundColor: Eo(e.palette[o].main, 0.5)
        }),
        ...e.applyStyles("dark", {
          borderColor: Eo(e.palette[o].main, 0.5)
        })
      }
    }
  }))]
}))), qE = M("span", {
  name: "MuiSlider",
  slot: "Thumb",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.thumb, o[`thumbColor${L(n.color)}`], n.size !== "medium" && o[`thumbSize${L(n.size)}`]];
  }
})(Q(({
  theme: e
}) => ({
  position: "absolute",
  width: 20,
  height: 20,
  boxSizing: "border-box",
  borderRadius: "50%",
  outline: 0,
  backgroundColor: "currentColor",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  transition: e.transitions.create(["box-shadow", "left", "bottom"], {
    duration: e.transitions.duration.shortest
  }),
  "&::before": {
    position: "absolute",
    content: '""',
    borderRadius: "inherit",
    width: "100%",
    height: "100%",
    boxShadow: (e.vars || e).shadows[2]
  },
  "&::after": {
    position: "absolute",
    content: '""',
    borderRadius: "50%",
    // 42px is the hit target
    width: 42,
    height: 42,
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  },
  [`&.${ro.disabled}`]: {
    "&:hover": {
      boxShadow: "none"
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      width: 12,
      height: 12,
      "&::before": {
        boxShadow: "none"
      }
    }
  }, {
    props: {
      orientation: "horizontal"
    },
    style: {
      top: "50%",
      transform: "translate(-50%, -50%)"
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      left: "50%",
      transform: "translate(-50%, 50%)"
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      [`&:hover, &.${ro.focusVisible}`]: {
        ...e.vars ? {
          boxShadow: `0px 0px 0px 8px rgba(${e.vars.palette[o].mainChannel} / 0.16)`
        } : {
          boxShadow: `0px 0px 0px 8px ${Ne(e.palette[o].main, 0.16)}`
        },
        "@media (hover: none)": {
          boxShadow: "none"
        }
      },
      [`&.${ro.active}`]: {
        ...e.vars ? {
          boxShadow: `0px 0px 0px 14px rgba(${e.vars.palette[o].mainChannel} / 0.16)`
        } : {
          boxShadow: `0px 0px 0px 14px ${Ne(e.palette[o].main, 0.16)}`
        }
      }
    }
  }))]
}))), xf = M(vf, {
  name: "MuiSlider",
  slot: "ValueLabel",
  overridesResolver: (e, o) => o.valueLabel
})(Q(({
  theme: e
}) => ({
  zIndex: 1,
  whiteSpace: "nowrap",
  ...e.typography.body2,
  fontWeight: 500,
  transition: e.transitions.create(["transform"], {
    duration: e.transitions.duration.shortest
  }),
  position: "absolute",
  backgroundColor: (e.vars || e).palette.grey[600],
  borderRadius: 2,
  color: (e.vars || e).palette.common.white,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  padding: "0.25rem 0.75rem",
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      transform: "translateY(-100%) scale(0)",
      top: "-10px",
      transformOrigin: "bottom center",
      "&::before": {
        position: "absolute",
        content: '""',
        width: 8,
        height: 8,
        transform: "translate(-50%, 50%) rotate(45deg)",
        backgroundColor: "inherit",
        bottom: 0,
        left: "50%"
      },
      [`&.${ro.valueLabelOpen}`]: {
        transform: "translateY(-100%) scale(1)"
      }
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      transform: "translateY(-50%) scale(0)",
      right: "30px",
      top: "50%",
      transformOrigin: "right center",
      "&::before": {
        position: "absolute",
        content: '""',
        width: 8,
        height: 8,
        transform: "translate(-50%, -50%) rotate(45deg)",
        backgroundColor: "inherit",
        right: -8,
        top: "50%"
      },
      [`&.${ro.valueLabelOpen}`]: {
        transform: "translateY(-50%) scale(1)"
      }
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      fontSize: e.typography.pxToRem(12),
      padding: "0.25rem 0.5rem"
    }
  }, {
    props: {
      orientation: "vertical",
      size: "small"
    },
    style: {
      right: "20px"
    }
  }]
})));
process.env.NODE_ENV !== "production" && (xf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.element.isRequired,
  /**
   * @ignore
   */
  index: t.number.isRequired,
  /**
   * @ignore
   */
  open: t.bool.isRequired,
  /**
   * @ignore
   */
  value: t.node
});
const YE = M("span", {
  name: "MuiSlider",
  slot: "Mark",
  shouldForwardProp: (e) => Yn(e) && e !== "markActive",
  overridesResolver: (e, o) => {
    const {
      markActive: n
    } = e;
    return [o.mark, n && o.markActive];
  }
})(Q(({
  theme: e
}) => ({
  position: "absolute",
  width: 2,
  height: 2,
  borderRadius: 1,
  backgroundColor: "currentColor",
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      top: "50%",
      transform: "translate(-1px, -50%)"
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      left: "50%",
      transform: "translate(-50%, 1px)"
    }
  }, {
    props: {
      markActive: !0
    },
    style: {
      backgroundColor: (e.vars || e).palette.background.paper,
      opacity: 0.8
    }
  }]
}))), KE = M("span", {
  name: "MuiSlider",
  slot: "MarkLabel",
  shouldForwardProp: (e) => Yn(e) && e !== "markLabelActive",
  overridesResolver: (e, o) => o.markLabel
})(Q(({
  theme: e
}) => ({
  ...e.typography.body2,
  color: (e.vars || e).palette.text.secondary,
  position: "absolute",
  whiteSpace: "nowrap",
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      top: 30,
      transform: "translateX(-50%)",
      "@media (pointer: coarse)": {
        top: 40
      }
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      left: 36,
      transform: "translateY(50%)",
      "@media (pointer: coarse)": {
        left: 44
      }
    }
  }, {
    props: {
      markLabelActive: !0
    },
    style: {
      color: (e.vars || e).palette.text.primary
    }
  }]
}))), XE = (e) => {
  const {
    disabled: o,
    dragging: n,
    marked: r,
    orientation: s,
    track: a,
    classes: i,
    color: l,
    size: c
  } = e, p = {
    root: ["root", o && "disabled", n && "dragging", r && "marked", s === "vertical" && "vertical", a === "inverted" && "trackInverted", a === !1 && "trackFalse", l && `color${L(l)}`, c && `size${L(c)}`],
    rail: ["rail"],
    track: ["track"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    thumb: ["thumb", o && "disabled", c && `thumbSize${L(c)}`, l && `thumbColor${L(l)}`],
    active: ["active"],
    disabled: ["disabled"],
    focusVisible: ["focusVisible"]
  };
  return ce(p, _E, i);
}, JE = ({
  children: e
}) => e, ZE = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSlider"
  }), s = go(), {
    "aria-label": a,
    "aria-valuetext": i,
    "aria-labelledby": l,
    // eslint-disable-next-line react/prop-types
    component: c = "span",
    components: p = {},
    componentsProps: u = {},
    color: f = "primary",
    classes: g,
    className: b,
    disableSwap: h = !1,
    disabled: d = !1,
    getAriaLabel: y,
    getAriaValueText: S,
    marks: O = !1,
    max: C = 100,
    min: T = 0,
    name: w,
    onChange: E,
    onChangeCommitted: $,
    orientation: P = "horizontal",
    shiftStep: N = 10,
    size: v = "medium",
    step: R = 1,
    scale: A = Vp,
    slotProps: j,
    slots: k,
    tabIndex: D,
    track: B = "normal",
    value: _,
    valueLabelDisplay: H = "off",
    valueLabelFormat: U = Vp,
    ...F
  } = r, V = {
    ...r,
    isRtl: s,
    max: C,
    min: T,
    classes: g,
    disabled: d,
    disableSwap: h,
    orientation: P,
    marks: O,
    color: f,
    size: v,
    step: R,
    shiftStep: N,
    scale: A,
    track: B,
    valueLabelDisplay: H,
    valueLabelFormat: U
  }, {
    axisProps: me,
    getRootProps: G,
    getHiddenInputProps: X,
    getThumbProps: Y,
    open: q,
    active: ie,
    axis: K,
    focusedThumbIndex: de,
    range: oe,
    dragging: he,
    marks: z,
    values: be,
    trackOffset: ye,
    trackLeap: Pe,
    getThumbStyle: Te
  } = FE({
    ...V,
    rootRef: n
  });
  V.marked = z.length > 0 && z.some((He) => He.label), V.dragging = he, V.focusedThumbIndex = de;
  const Z = XE(V), $e = (k == null ? void 0 : k.root) ?? p.Root ?? UE, Oe = (k == null ? void 0 : k.rail) ?? p.Rail ?? HE, Me = (k == null ? void 0 : k.track) ?? p.Track ?? GE, I = (k == null ? void 0 : k.thumb) ?? p.Thumb ?? qE, J = (k == null ? void 0 : k.valueLabel) ?? p.ValueLabel ?? xf, xe = (k == null ? void 0 : k.mark) ?? p.Mark ?? YE, ke = (k == null ? void 0 : k.markLabel) ?? p.MarkLabel ?? KE, ee = (k == null ? void 0 : k.input) ?? p.Input ?? "input", ue = (j == null ? void 0 : j.root) ?? u.root, te = (j == null ? void 0 : j.rail) ?? u.rail, we = (j == null ? void 0 : j.track) ?? u.track, Ce = (j == null ? void 0 : j.thumb) ?? u.thumb, ge = (j == null ? void 0 : j.valueLabel) ?? u.valueLabel, ve = (j == null ? void 0 : j.mark) ?? u.mark, Be = (j == null ? void 0 : j.markLabel) ?? u.markLabel, Ae = (j == null ? void 0 : j.input) ?? u.input, Fe = Tt({
    elementType: $e,
    getSlotProps: G,
    externalSlotProps: ue,
    externalForwardedProps: F,
    additionalProps: {
      ...VE($e) && {
        as: c
      }
    },
    ownerState: {
      ...V,
      ...ue == null ? void 0 : ue.ownerState
    },
    className: [Z.root, b]
  }), Se = Tt({
    elementType: Oe,
    externalSlotProps: te,
    ownerState: V,
    className: Z.rail
  }), ne = Tt({
    elementType: Me,
    externalSlotProps: we,
    additionalProps: {
      style: {
        ...me[K].offset(ye),
        ...me[K].leap(Pe)
      }
    },
    ownerState: {
      ...V,
      ...we == null ? void 0 : we.ownerState
    },
    className: Z.track
  }), Ee = Tt({
    elementType: I,
    getSlotProps: Y,
    externalSlotProps: Ce,
    ownerState: {
      ...V,
      ...Ce == null ? void 0 : Ce.ownerState
    },
    className: Z.thumb
  }), Ie = Tt({
    elementType: J,
    externalSlotProps: ge,
    ownerState: {
      ...V,
      ...ge == null ? void 0 : ge.ownerState
    },
    className: Z.valueLabel
  }), Ve = Tt({
    elementType: xe,
    externalSlotProps: ve,
    ownerState: V,
    className: Z.mark
  }), Ke = Tt({
    elementType: ke,
    externalSlotProps: Be,
    ownerState: V,
    className: Z.markLabel
  }), St = Tt({
    elementType: ee,
    getSlotProps: X,
    externalSlotProps: Ae,
    ownerState: V
  });
  return /* @__PURE__ */ x.jsxs($e, {
    ...Fe,
    children: [/* @__PURE__ */ x.jsx(Oe, {
      ...Se
    }), /* @__PURE__ */ x.jsx(Me, {
      ...ne
    }), z.filter((He) => He.value >= T && He.value <= C).map((He, tt) => {
      const ht = ta(He.value, T, C), fo = me[K].offset(ht);
      let It;
      return B === !1 ? It = be.includes(He.value) : It = B === "normal" && (oe ? He.value >= be[0] && He.value <= be[be.length - 1] : He.value <= be[0]) || B === "inverted" && (oe ? He.value <= be[0] || He.value >= be[be.length - 1] : He.value >= be[0]), /* @__PURE__ */ x.jsxs(m.Fragment, {
        children: [/* @__PURE__ */ x.jsx(xe, {
          "data-index": tt,
          ...Ve,
          ...!Lo(xe) && {
            markActive: It
          },
          style: {
            ...fo,
            ...Ve.style
          },
          className: W(Ve.className, It && Z.markActive)
        }), He.label != null ? /* @__PURE__ */ x.jsx(ke, {
          "aria-hidden": !0,
          "data-index": tt,
          ...Ke,
          ...!Lo(ke) && {
            markLabelActive: It
          },
          style: {
            ...fo,
            ...Ke.style
          },
          className: W(Z.markLabel, Ke.className, It && Z.markLabelActive),
          children: He.label
        }) : null]
      }, tt);
    }), be.map((He, tt) => {
      const ht = ta(He, T, C), fo = me[K].offset(ht), It = H === "off" ? JE : J;
      return (
        /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
        /* @__PURE__ */ x.jsx(It, {
          ...!Lo(It) && {
            valueLabelFormat: U,
            valueLabelDisplay: H,
            value: typeof U == "function" ? U(A(He), tt) : U,
            index: tt,
            open: q === tt || ie === tt || H === "on",
            disabled: d
          },
          ...Ie,
          children: /* @__PURE__ */ x.jsx(I, {
            "data-index": tt,
            ...Ee,
            className: W(Z.thumb, Ee.className, ie === tt && Z.active, de === tt && Z.focusVisible),
            style: {
              ...fo,
              ...Te(tt),
              ...Ee.style
            },
            children: /* @__PURE__ */ x.jsx(ee, {
              "data-index": tt,
              "aria-label": y ? y(tt) : a,
              "aria-valuenow": A(He),
              "aria-labelledby": l,
              "aria-valuetext": S ? S(A(He), tt) : i,
              value: be[tt],
              ...St
            })
          })
        }, tt)
      );
    })]
  });
});
process.env.NODE_ENV !== "production" && (ZE.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The label of the slider.
   */
  "aria-label": xt(t.string, (e) => Array.isArray(e.value || e.defaultValue) && e["aria-label"] != null ? new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.") : null),
  /**
   * The id of the element containing a label for the slider.
   */
  "aria-labelledby": t.string,
  /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */
  "aria-valuetext": xt(t.string, (e) => Array.isArray(e.value || e.defaultValue) && e["aria-valuetext"] != null ? new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.") : null),
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Mark: t.elementType,
    MarkLabel: t.elementType,
    Rail: t.elementType,
    Root: t.elementType,
    Thumb: t.elementType,
    Track: t.elementType,
    ValueLabel: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.oneOfType([t.func, t.object]),
    mark: t.oneOfType([t.func, t.object]),
    markLabel: t.oneOfType([t.func, t.object]),
    rail: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object]),
    thumb: t.oneOfType([t.func, t.object]),
    track: t.oneOfType([t.func, t.object]),
    valueLabel: t.oneOfType([t.func, t.shape({
      children: t.element,
      className: t.string,
      open: t.bool,
      style: t.object,
      value: t.node,
      valueLabelDisplay: t.oneOf(["auto", "off", "on"])
    })])
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.oneOfType([t.arrayOf(t.number), t.number]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */
  disableSwap: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaLabel: t.func,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaValueText: t.func,
  /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */
  marks: t.oneOfType([t.arrayOf(t.shape({
    label: t.node,
    value: t.number.isRequired
  })), t.bool]),
  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */
  max: t.number,
  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */
  min: t.number,
  /**
   * Name attribute of the hidden `input` element.
   */
  name: t.string,
  /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */
  onChange: t.func,
  /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */
  onChangeCommitted: t.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * A transformation function, to change the scale of the slider.
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  scale: t.func,
  /**
   * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
   * @default 10
   */
  shiftStep: t.number,
  /**
   * The size of the slider.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium"]), t.string]),
  /**
   * The props used for each slot inside the Slider.
   * @default {}
   */
  slotProps: t.shape({
    input: t.oneOfType([t.func, t.object]),
    mark: t.oneOfType([t.func, t.object]),
    markLabel: t.oneOfType([t.func, t.object]),
    rail: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object]),
    thumb: t.oneOfType([t.func, t.object]),
    track: t.oneOfType([t.func, t.object]),
    valueLabel: t.oneOfType([t.func, t.shape({
      children: t.element,
      className: t.string,
      open: t.bool,
      style: t.object,
      value: t.node,
      valueLabelDisplay: t.oneOf(["auto", "off", "on"])
    })])
  }),
  /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    mark: t.elementType,
    markLabel: t.elementType,
    rail: t.elementType,
    root: t.elementType,
    thumb: t.elementType,
    track: t.elementType,
    valueLabel: t.elementType
  }),
  /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */
  step: t.number,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Tab index attribute of the hidden `input` element.
   */
  tabIndex: t.number,
  /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */
  track: t.oneOf(["inverted", "normal", !1]),
  /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */
  value: t.oneOfType([t.arrayOf(t.number), t.number]),
  /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */
  valueLabelDisplay: t.oneOf(["auto", "off", "on"]),
  /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  valueLabelFormat: t.oneOfType([t.func, t.string])
});
function QE(e = {}) {
  const {
    autoHideDuration: o = null,
    disableWindowBlurListener: n = !1,
    onClose: r,
    open: s,
    resumeHideDuration: a
  } = e, i = Ao();
  m.useEffect(() => {
    if (!s)
      return;
    function S(O) {
      O.defaultPrevented || O.key === "Escape" && (r == null || r(O, "escapeKeyDown"));
    }
    return document.addEventListener("keydown", S), () => {
      document.removeEventListener("keydown", S);
    };
  }, [s, r]);
  const l = pt((S, O) => {
    r == null || r(S, O);
  }), c = pt((S) => {
    !r || S == null || i.start(S, () => {
      l(null, "timeout");
    });
  });
  m.useEffect(() => (s && c(o), i.clear), [s, o, c, i]);
  const p = (S) => {
    r == null || r(S, "clickaway");
  }, u = i.clear, f = m.useCallback(() => {
    o != null && c(a ?? o * 0.5);
  }, [o, a, c]), g = (S) => (O) => {
    const C = S.onBlur;
    C == null || C(O), f();
  }, b = (S) => (O) => {
    const C = S.onFocus;
    C == null || C(O), u();
  }, h = (S) => (O) => {
    const C = S.onMouseEnter;
    C == null || C(O), u();
  }, d = (S) => (O) => {
    const C = S.onMouseLeave;
    C == null || C(O), f();
  };
  return m.useEffect(() => {
    if (!n && s)
      return window.addEventListener("focus", f), window.addEventListener("blur", u), () => {
        window.removeEventListener("focus", f), window.removeEventListener("blur", u);
      };
  }, [n, s, f, u]), {
    getRootProps: (S = {}) => {
      const O = {
        ...vn(e),
        ...vn(S)
      };
      return {
        // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
        // See https://github.com/mui/material-ui/issues/29080
        role: "presentation",
        ...S,
        ...O,
        onBlur: g(O),
        onFocus: b(O),
        onMouseEnter: h(O),
        onMouseLeave: d(O)
      };
    },
    onClickAway: p
  };
}
function eR(e) {
  return ae("MuiSnackbarContent", e);
}
const gN = le("MuiSnackbarContent", ["root", "message", "action"]), tR = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    action: ["action"],
    message: ["message"]
  }, eR, o);
}, oR = M(Qt, {
  name: "MuiSnackbarContent",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? 0.8 : 0.98, n = kr(e.palette.background.default, o);
  return {
    ...e.typography.body2,
    color: e.vars ? e.vars.palette.SnackbarContent.color : e.palette.getContrastText(n),
    backgroundColor: e.vars ? e.vars.palette.SnackbarContent.bg : n,
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    padding: "6px 16px",
    borderRadius: (e.vars || e).shape.borderRadius,
    flexGrow: 1,
    [e.breakpoints.up("sm")]: {
      flexGrow: "initial",
      minWidth: 288
    }
  };
})), nR = M("div", {
  name: "MuiSnackbarContent",
  slot: "Message",
  overridesResolver: (e, o) => o.message
})({
  padding: "8px 0"
}), rR = M("div", {
  name: "MuiSnackbarContent",
  slot: "Action",
  overridesResolver: (e, o) => o.action
})({
  display: "flex",
  alignItems: "center",
  marginLeft: "auto",
  paddingLeft: 16,
  marginRight: -8
}), Sf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSnackbarContent"
  }), {
    action: s,
    className: a,
    message: i,
    role: l = "alert",
    ...c
  } = r, p = r, u = tR(p);
  return /* @__PURE__ */ x.jsxs(oR, {
    role: l,
    square: !0,
    elevation: 6,
    className: W(u.root, a),
    ownerState: p,
    ref: n,
    ...c,
    children: [/* @__PURE__ */ x.jsx(nR, {
      className: u.message,
      ownerState: p,
      children: i
    }), s ? /* @__PURE__ */ x.jsx(rR, {
      className: u.action,
      ownerState: p,
      children: s
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (Sf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */
  action: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The message to display.
   */
  message: t.node,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function sR(e) {
  return ae("MuiSnackbar", e);
}
const bN = le("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]), aR = (e) => {
  const {
    classes: o,
    anchorOrigin: n
  } = e, r = {
    root: ["root", `anchorOrigin${L(n.vertical)}${L(n.horizontal)}`]
  };
  return ce(r, sR, o);
}, _p = M("div", {
  name: "MuiSnackbar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`anchorOrigin${L(n.anchorOrigin.vertical)}${L(n.anchorOrigin.horizontal)}`]];
  }
})(Q(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.snackbar,
  position: "fixed",
  display: "flex",
  left: 8,
  right: 8,
  justifyContent: "center",
  alignItems: "center",
  variants: [{
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical === "top",
    style: {
      top: 8,
      [e.breakpoints.up("sm")]: {
        top: 24
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.vertical !== "top",
    style: {
      bottom: 8,
      [e.breakpoints.up("sm")]: {
        bottom: 24
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.horizontal === "left",
    style: {
      justifyContent: "flex-start",
      [e.breakpoints.up("sm")]: {
        left: 24,
        right: "auto"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.horizontal === "right",
    style: {
      justifyContent: "flex-end",
      [e.breakpoints.up("sm")]: {
        right: 24,
        left: "auto"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.anchorOrigin.horizontal === "center",
    style: {
      [e.breakpoints.up("sm")]: {
        left: "50%",
        right: "auto",
        transform: "translateX(-50%)"
      }
    }
  }]
}))), iR = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSnackbar"
  }), s = Ot(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    action: i,
    anchorOrigin: {
      vertical: l,
      horizontal: c
    } = {
      vertical: "bottom",
      horizontal: "left"
    },
    autoHideDuration: p = null,
    children: u,
    className: f,
    ClickAwayListenerProps: g,
    ContentProps: b,
    disableWindowBlurListener: h = !1,
    message: d,
    onBlur: y,
    onClose: S,
    onFocus: O,
    onMouseEnter: C,
    onMouseLeave: T,
    open: w,
    resumeHideDuration: E,
    TransitionComponent: $ = Un,
    transitionDuration: P = a,
    TransitionProps: {
      onEnter: N,
      onExited: v,
      ...R
    } = {},
    ...A
  } = r, j = {
    ...r,
    anchorOrigin: {
      vertical: l,
      horizontal: c
    },
    autoHideDuration: p,
    disableWindowBlurListener: h,
    TransitionComponent: $,
    transitionDuration: P
  }, k = aR(j), {
    getRootProps: D,
    onClickAway: B
  } = QE({
    ...j
  }), [_, H] = m.useState(!0), U = Tt({
    elementType: _p,
    getSlotProps: D,
    externalForwardedProps: A,
    ownerState: j,
    additionalProps: {
      ref: n
    },
    className: [k.root, f]
  }), F = (me) => {
    H(!0), v && v(me);
  }, V = (me, G) => {
    H(!1), N && N(me, G);
  };
  return !w && _ ? null : /* @__PURE__ */ x.jsx(Js, {
    onClickAway: B,
    ...g,
    children: /* @__PURE__ */ x.jsx(_p, {
      ...U,
      children: /* @__PURE__ */ x.jsx($, {
        appear: !0,
        in: w,
        timeout: P,
        direction: l === "top" ? "down" : "up",
        onEnter: V,
        onExited: F,
        ...R,
        children: u || /* @__PURE__ */ x.jsx(Sf, {
          message: d,
          action: i,
          ...b
        })
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (iR.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */
  action: t.node,
  /**
   * The anchor of the `Snackbar`.
   * On smaller screens, the component grows to occupy all the available width,
   * the horizontal alignment is ignored.
   * @default { vertical: 'bottom', horizontal: 'left' }
   */
  anchorOrigin: t.shape({
    horizontal: t.oneOf(["center", "left", "right"]).isRequired,
    vertical: t.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The number of milliseconds to wait before automatically calling the
   * `onClose` function. `onClose` should then set the state of the `open`
   * prop to hide the Snackbar. This behavior is disabled by default with
   * the `null` value.
   * @default null
   */
  autoHideDuration: t.number,
  /**
   * Replace the `SnackbarContent` component.
   */
  children: t.element,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Props applied to the `ClickAwayListener` element.
   */
  ClickAwayListenerProps: t.object,
  /**
   * Props applied to the [`SnackbarContent`](https://mui.com/material-ui/api/snackbar-content/) element.
   */
  ContentProps: t.object,
  /**
   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
   * @default false
   */
  disableWindowBlurListener: t.bool,
  /**
   * When displaying multiple consecutive snackbars using a single parent-rendered
   * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.
   * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update
   * in place, and features like `autoHideDuration` could be affected.
   */
  key: () => null,
  /**
   * The message to display.
   */
  message: t.node,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
   */
  onClose: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * @ignore
   */
  onMouseEnter: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The number of milliseconds to wait before dismissing after user interaction.
   * If `autoHideDuration` prop isn't specified, it does nothing.
   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
   * we default to `autoHideDuration / 2` ms.
   */
  resumeHideDuration: t.number,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: t.object
});
const lR = {
  entering: {
    transform: "none"
  },
  entered: {
    transform: "none"
  }
}, Tf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = Ot(), s = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: a,
    appear: i = !0,
    children: l,
    easing: c,
    in: p,
    onEnter: u,
    onEntered: f,
    onEntering: g,
    onExit: b,
    onExited: h,
    onExiting: d,
    style: y,
    timeout: S = s,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: O = Zt,
    ...C
  } = o, T = m.useRef(null), w = Ye(T, Vo(l), n), E = (k) => (D) => {
    if (k) {
      const B = T.current;
      D === void 0 ? k(B) : k(B, D);
    }
  }, $ = E(g), P = E((k, D) => {
    Sa(k);
    const B = mo({
      style: y,
      timeout: S,
      easing: c
    }, {
      mode: "enter"
    });
    k.style.webkitTransition = r.transitions.create("transform", B), k.style.transition = r.transitions.create("transform", B), u && u(k, D);
  }), N = E(f), v = E(d), R = E((k) => {
    const D = mo({
      style: y,
      timeout: S,
      easing: c
    }, {
      mode: "exit"
    });
    k.style.webkitTransition = r.transitions.create("transform", D), k.style.transition = r.transitions.create("transform", D), b && b(k);
  }), A = E(h), j = (k) => {
    a && a(T.current, k);
  };
  return /* @__PURE__ */ x.jsx(O, {
    appear: i,
    in: p,
    nodeRef: T,
    onEnter: P,
    onEntered: N,
    onEntering: $,
    onExit: R,
    onExited: A,
    onExiting: v,
    addEndListener: j,
    timeout: S,
    ...C,
    children: (k, {
      ownerState: D,
      ...B
    }) => /* @__PURE__ */ m.cloneElement(l, {
      style: {
        transform: "scale(0)",
        visibility: k === "exited" && !p ? "hidden" : void 0,
        ...lR[k],
        ...y,
        ...l.props.style
      },
      ref: w,
      ...B
    })
  });
});
process.env.NODE_ENV !== "production" && (Tf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: Fo.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
function cR(e) {
  return ae("MuiSpeedDial", e);
}
const hs = le("MuiSpeedDial", ["root", "fab", "directionUp", "directionDown", "directionLeft", "directionRight", "actions", "actionsClosed"]), pR = (e) => {
  const {
    classes: o,
    open: n,
    direction: r
  } = e, s = {
    root: ["root", `direction${L(r)}`],
    fab: ["fab"],
    actions: ["actions", !n && "actionsClosed"]
  };
  return ce(s, cR, o);
};
function dr(e) {
  if (e === "up" || e === "down")
    return "vertical";
  if (e === "right" || e === "left")
    return "horizontal";
}
const ys = 32, vs = 16, uR = M("div", {
  name: "MuiSpeedDial",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`direction${L(n.direction)}`]];
  }
})(Q(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.speedDial,
  display: "flex",
  alignItems: "center",
  pointerEvents: "none",
  variants: [{
    props: {
      direction: "up"
    },
    style: {
      flexDirection: "column-reverse",
      [`& .${hs.actions}`]: {
        flexDirection: "column-reverse",
        marginBottom: -32,
        paddingBottom: vs + ys
      }
    }
  }, {
    props: {
      direction: "down"
    },
    style: {
      flexDirection: "column",
      [`& .${hs.actions}`]: {
        flexDirection: "column",
        marginTop: -32,
        paddingTop: vs + ys
      }
    }
  }, {
    props: {
      direction: "left"
    },
    style: {
      flexDirection: "row-reverse",
      [`& .${hs.actions}`]: {
        flexDirection: "row-reverse",
        marginRight: -32,
        paddingRight: vs + ys
      }
    }
  }, {
    props: {
      direction: "right"
    },
    style: {
      flexDirection: "row",
      [`& .${hs.actions}`]: {
        flexDirection: "row",
        marginLeft: -32,
        paddingLeft: vs + ys
      }
    }
  }]
}))), dR = M(El, {
  name: "MuiSpeedDial",
  slot: "Fab",
  overridesResolver: (e, o) => o.fab
})({
  pointerEvents: "auto"
}), fR = M("div", {
  name: "MuiSpeedDial",
  slot: "Actions",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.actions, !n.open && o.actionsClosed];
  }
})({
  display: "flex",
  pointerEvents: "auto",
  variants: [{
    props: ({
      ownerState: e
    }) => !e.open,
    style: {
      transition: "top 0s linear 0.2s",
      pointerEvents: "none"
    }
  }]
}), mR = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSpeedDial"
  }), s = Ot(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    ariaLabel: i,
    FabProps: {
      ref: l,
      ...c
    } = {},
    children: p,
    className: u,
    direction: f = "up",
    hidden: g = !1,
    icon: b,
    onBlur: h,
    onClose: d,
    onFocus: y,
    onKeyDown: S,
    onMouseEnter: O,
    onMouseLeave: C,
    onOpen: T,
    open: w,
    openIcon: E,
    slots: $ = {},
    slotProps: P = {},
    TransitionComponent: N,
    TransitionProps: v,
    transitionDuration: R = a,
    ...A
  } = r, [j, k] = Kt({
    controlled: w,
    default: !1,
    name: "SpeedDial",
    state: "open"
  }), D = {
    ...r,
    open: j,
    direction: f
  }, B = pR(D), _ = Ao(), H = m.useRef(0), U = m.useRef(), F = m.useRef([]);
  F.current = [F.current[0]];
  const V = m.useCallback((Te) => {
    F.current[0] = Te;
  }, []), me = Ye(l, V), G = (Te, Z) => ($e) => {
    F.current[Te + 1] = $e, Z && Z($e);
  }, X = (Te) => {
    S && S(Te);
    const Z = Te.key.replace("Arrow", "").toLowerCase(), {
      current: $e = Z
    } = U;
    if (Te.key === "Escape") {
      k(!1), F.current[0].focus(), d && d(Te, "escapeKeyDown");
      return;
    }
    if (dr(Z) === dr($e) && dr(Z) !== void 0) {
      Te.preventDefault();
      const Oe = Z === $e ? 1 : -1, Me = qo(H.current + Oe, 0, F.current.length - 1);
      F.current[Me].focus(), H.current = Me, U.current = $e;
    }
  };
  m.useEffect(() => {
    j || (H.current = 0, U.current = void 0);
  }, [j]);
  const Y = (Te) => {
    Te.type === "mouseleave" && C && C(Te), Te.type === "blur" && h && h(Te), _.clear(), Te.type === "blur" ? _.start(0, () => {
      k(!1), d && d(Te, "blur");
    }) : (k(!1), d && d(Te, "mouseLeave"));
  }, q = (Te) => {
    c.onClick && c.onClick(Te), _.clear(), j ? (k(!1), d && d(Te, "toggle")) : (k(!0), T && T(Te, "toggle"));
  }, ie = (Te) => {
    Te.type === "mouseenter" && O && O(Te), Te.type === "focus" && y && y(Te), _.clear(), j || _.start(0, () => {
      k(!0), T && T(Te, {
        focus: "focus",
        mouseenter: "mouseEnter"
      }[Te.type]);
    });
  }, K = i.replace(/^[^a-z]+|[^\w:.-]+/gi, ""), de = m.Children.toArray(p).filter((Te) => (process.env.NODE_ENV !== "production" && Ft.isFragment(Te) && console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ m.isValidElement(Te))), oe = de.map((Te, Z) => {
    const {
      FabProps: {
        ref: $e,
        ...Oe
      } = {},
      tooltipPlacement: Me
    } = Te.props, I = Me || (dr(f) === "vertical" ? "left" : "top");
    return /* @__PURE__ */ m.cloneElement(Te, {
      FabProps: {
        ...Oe,
        ref: G(Z, $e)
      },
      delay: 30 * (j ? Z : de.length - Z),
      open: j,
      tooltipPlacement: I,
      id: `${K}-action-${Z}`
    });
  }), he = {
    transition: N,
    ...$
  }, z = {
    transition: v,
    ...P
  }, be = {
    slots: he,
    slotProps: z
  }, [ye, Pe] = je("transition", {
    elementType: Tf,
    externalForwardedProps: be,
    ownerState: D
  });
  return /* @__PURE__ */ x.jsxs(uR, {
    className: W(B.root, u),
    ref: n,
    role: "presentation",
    onKeyDown: X,
    onBlur: Y,
    onFocus: ie,
    onMouseEnter: ie,
    onMouseLeave: Y,
    ownerState: D,
    ...A,
    children: [/* @__PURE__ */ x.jsx(ye, {
      in: !g,
      timeout: R,
      unmountOnExit: !0,
      ...Pe,
      children: /* @__PURE__ */ x.jsx(dR, {
        color: "primary",
        "aria-label": i,
        "aria-haspopup": "true",
        "aria-expanded": j,
        "aria-controls": `${K}-actions`,
        ...c,
        onClick: q,
        className: W(B.fab, c.className),
        ref: me,
        ownerState: D,
        children: /* @__PURE__ */ m.isValidElement(b) && Bo(b, ["SpeedDialIcon"]) ? /* @__PURE__ */ m.cloneElement(b, {
          open: j
        }) : b
      })
    }), /* @__PURE__ */ x.jsx(fR, {
      id: `${K}-actions`,
      role: "menu",
      "aria-orientation": dr(f),
      className: W(B.actions, !j && B.actionsClosed),
      ownerState: D,
      children: oe
    })]
  });
});
process.env.NODE_ENV !== "production" && (mR.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The aria-label of the button element.
   * Also used to provide the `id` for the `SpeedDial` element and its children.
   */
  ariaLabel: t.string.isRequired,
  /**
   * SpeedDialActions to display when the SpeedDial is `open`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The direction the actions open relative to the floating action button.
   * @default 'up'
   */
  direction: t.oneOf(["down", "left", "right", "up"]),
  /**
   * Props applied to the [`Fab`](https://mui.com/material-ui/api/fab/) element.
   * @default {}
   */
  FabProps: t.object,
  /**
   * If `true`, the SpeedDial is hidden.
   * @default false
   */
  hidden: t.bool,
  /**
   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
   * provides a default Icon with animation.
   */
  icon: t.node,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
   */
  onClose: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onMouseEnter: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The icon to display in the SpeedDial Fab when the SpeedDial is open.
   */
  openIcon: t.node,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    transition: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    transition: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Zoom
   * * @deprecated Use `slots.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)
   */
  TransitionProps: t.object
});
function gR(e) {
  return ae("MuiTooltip", e);
}
const ft = le("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
function bR(e) {
  return Math.round(e * 1e5) / 1e5;
}
const hR = (e) => {
  const {
    classes: o,
    disableInteractive: n,
    arrow: r,
    touch: s,
    placement: a
  } = e, i = {
    popper: ["popper", !n && "popperInteractive", r && "popperArrow"],
    tooltip: ["tooltip", r && "tooltipArrow", s && "touch", `tooltipPlacement${L(a.split("-")[0])}`],
    arrow: ["arrow"]
  };
  return ce(i, gR, o);
}, yR = M(Gr, {
  name: "MuiTooltip",
  slot: "Popper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.popper, !n.disableInteractive && o.popperInteractive, n.arrow && o.popperArrow, !n.open && o.popperClose];
  }
})(Q(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.tooltip,
  pointerEvents: "none",
  variants: [{
    props: ({
      ownerState: o
    }) => !o.disableInteractive,
    style: {
      pointerEvents: "auto"
    }
  }, {
    props: ({
      open: o
    }) => !o,
    style: {
      pointerEvents: "none"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.arrow,
    style: {
      [`&[data-popper-placement*="bottom"] .${ft.arrow}`]: {
        top: 0,
        marginTop: "-0.71em",
        "&::before": {
          transformOrigin: "0 100%"
        }
      },
      [`&[data-popper-placement*="top"] .${ft.arrow}`]: {
        bottom: 0,
        marginBottom: "-0.71em",
        "&::before": {
          transformOrigin: "100% 0"
        }
      },
      [`&[data-popper-placement*="right"] .${ft.arrow}`]: {
        height: "1em",
        width: "0.71em",
        "&::before": {
          transformOrigin: "100% 100%"
        }
      },
      [`&[data-popper-placement*="left"] .${ft.arrow}`]: {
        height: "1em",
        width: "0.71em",
        "&::before": {
          transformOrigin: "0 0"
        }
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.arrow && !o.isRtl,
    style: {
      [`&[data-popper-placement*="right"] .${ft.arrow}`]: {
        left: 0,
        marginLeft: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.arrow && !!o.isRtl,
    style: {
      [`&[data-popper-placement*="right"] .${ft.arrow}`]: {
        right: 0,
        marginRight: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.arrow && !o.isRtl,
    style: {
      [`&[data-popper-placement*="left"] .${ft.arrow}`]: {
        right: 0,
        marginRight: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.arrow && !!o.isRtl,
    style: {
      [`&[data-popper-placement*="left"] .${ft.arrow}`]: {
        left: 0,
        marginLeft: "-0.71em"
      }
    }
  }]
}))), vR = M("div", {
  name: "MuiTooltip",
  slot: "Tooltip",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.tooltip, n.touch && o.touch, n.arrow && o.tooltipArrow, o[`tooltipPlacement${L(n.placement.split("-")[0])}`]];
  }
})(Q(({
  theme: e
}) => ({
  backgroundColor: e.vars ? e.vars.palette.Tooltip.bg : Ne(e.palette.grey[700], 0.92),
  borderRadius: (e.vars || e).shape.borderRadius,
  color: (e.vars || e).palette.common.white,
  fontFamily: e.typography.fontFamily,
  padding: "4px 8px",
  fontSize: e.typography.pxToRem(11),
  maxWidth: 300,
  margin: 2,
  wordWrap: "break-word",
  fontWeight: e.typography.fontWeightMedium,
  [`.${ft.popper}[data-popper-placement*="left"] &`]: {
    transformOrigin: "right center"
  },
  [`.${ft.popper}[data-popper-placement*="right"] &`]: {
    transformOrigin: "left center"
  },
  [`.${ft.popper}[data-popper-placement*="top"] &`]: {
    transformOrigin: "center bottom",
    marginBottom: "14px"
  },
  [`.${ft.popper}[data-popper-placement*="bottom"] &`]: {
    transformOrigin: "center top",
    marginTop: "14px"
  },
  variants: [{
    props: ({
      ownerState: o
    }) => o.arrow,
    style: {
      position: "relative",
      margin: 0
    }
  }, {
    props: ({
      ownerState: o
    }) => o.touch,
    style: {
      padding: "8px 16px",
      fontSize: e.typography.pxToRem(14),
      lineHeight: `${bR(16 / 14)}em`,
      fontWeight: e.typography.fontWeightRegular
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.isRtl,
    style: {
      [`.${ft.popper}[data-popper-placement*="left"] &`]: {
        marginRight: "14px"
      },
      [`.${ft.popper}[data-popper-placement*="right"] &`]: {
        marginLeft: "14px"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => !o.isRtl && o.touch,
    style: {
      [`.${ft.popper}[data-popper-placement*="left"] &`]: {
        marginRight: "24px"
      },
      [`.${ft.popper}[data-popper-placement*="right"] &`]: {
        marginLeft: "24px"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => !!o.isRtl,
    style: {
      [`.${ft.popper}[data-popper-placement*="left"] &`]: {
        marginLeft: "14px"
      },
      [`.${ft.popper}[data-popper-placement*="right"] &`]: {
        marginRight: "14px"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => !!o.isRtl && o.touch,
    style: {
      [`.${ft.popper}[data-popper-placement*="left"] &`]: {
        marginLeft: "24px"
      },
      [`.${ft.popper}[data-popper-placement*="right"] &`]: {
        marginRight: "24px"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.touch,
    style: {
      [`.${ft.popper}[data-popper-placement*="top"] &`]: {
        marginBottom: "24px"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.touch,
    style: {
      [`.${ft.popper}[data-popper-placement*="bottom"] &`]: {
        marginTop: "24px"
      }
    }
  }]
}))), xR = M("span", {
  name: "MuiTooltip",
  slot: "Arrow",
  overridesResolver: (e, o) => o.arrow
})(Q(({
  theme: e
}) => ({
  overflow: "hidden",
  position: "absolute",
  width: "1em",
  height: "0.71em",
  boxSizing: "border-box",
  color: e.vars ? e.vars.palette.Tooltip.bg : Ne(e.palette.grey[700], 0.9),
  "&::before": {
    content: '""',
    margin: "auto",
    display: "block",
    width: "100%",
    height: "100%",
    backgroundColor: "currentColor",
    transform: "rotate(45deg)"
  }
})));
let xs = !1;
const Wp = new ha();
let fr = {
  x: 0,
  y: 0
};
function Ss(e, o) {
  return (n, ...r) => {
    o && o(n, ...r), e(n, ...r);
  };
}
const Cf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTooltip"
  }), {
    arrow: s = !1,
    children: a,
    classes: i,
    components: l = {},
    componentsProps: c = {},
    describeChild: p = !1,
    disableFocusListener: u = !1,
    disableHoverListener: f = !1,
    disableInteractive: g = !1,
    disableTouchListener: b = !1,
    enterDelay: h = 100,
    enterNextDelay: d = 0,
    enterTouchDelay: y = 700,
    followCursor: S = !1,
    id: O,
    leaveDelay: C = 0,
    leaveTouchDelay: T = 1500,
    onClose: w,
    onOpen: E,
    open: $,
    placement: P = "bottom",
    PopperComponent: N,
    PopperProps: v = {},
    slotProps: R = {},
    slots: A = {},
    title: j,
    TransitionComponent: k,
    TransitionProps: D,
    ...B
  } = r, _ = /* @__PURE__ */ m.isValidElement(a) ? a : /* @__PURE__ */ x.jsx("span", {
    children: a
  }), H = Ot(), U = go(), [F, V] = m.useState(), [me, G] = m.useState(null), X = m.useRef(!1), Y = g || S, q = Ao(), ie = Ao(), K = Ao(), de = Ao(), [oe, he] = Kt({
    controlled: $,
    default: !1,
    name: "Tooltip",
    state: "open"
  });
  let z = oe;
  if (process.env.NODE_ENV !== "production") {
    const {
      current: Le
    } = m.useRef($ !== void 0);
    m.useEffect(() => {
      F && F.disabled && !Le && j !== "" && F.tagName.toLowerCase() === "button" && console.warn(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join(`
`));
    }, [j, F, Le]);
  }
  const be = io(O), ye = m.useRef(), Pe = pt(() => {
    ye.current !== void 0 && (document.body.style.WebkitUserSelect = ye.current, ye.current = void 0), de.clear();
  });
  m.useEffect(() => Pe, [Pe]);
  const Te = (Le) => {
    Wp.clear(), xs = !0, he(!0), E && !z && E(Le);
  }, Z = pt(
    /**
     * @param {React.SyntheticEvent | Event} event
     */
    (Le) => {
      Wp.start(800 + C, () => {
        xs = !1;
      }), he(!1), w && z && w(Le), q.start(H.transitions.duration.shortest, () => {
        X.current = !1;
      });
    }
  ), $e = (Le) => {
    X.current && Le.type !== "touchstart" || (F && F.removeAttribute("title"), ie.clear(), K.clear(), h || xs && d ? ie.start(xs ? d : h, () => {
      Te(Le);
    }) : Te(Le));
  }, Oe = (Le) => {
    ie.clear(), K.start(C, () => {
      Z(Le);
    });
  }, [, Me] = m.useState(!1), I = (Le) => {
    ko(Le.target) || (Me(!1), Oe(Le));
  }, J = (Le) => {
    F || V(Le.currentTarget), ko(Le.target) && (Me(!0), $e(Le));
  }, xe = (Le) => {
    X.current = !0;
    const At = _.props;
    At.onTouchStart && At.onTouchStart(Le);
  }, ke = (Le) => {
    xe(Le), K.clear(), q.clear(), Pe(), ye.current = document.body.style.WebkitUserSelect, document.body.style.WebkitUserSelect = "none", de.start(y, () => {
      document.body.style.WebkitUserSelect = ye.current, $e(Le);
    });
  }, ee = (Le) => {
    _.props.onTouchEnd && _.props.onTouchEnd(Le), Pe(), K.start(T, () => {
      Z(Le);
    });
  };
  m.useEffect(() => {
    if (!z)
      return;
    function Le(At) {
      At.key === "Escape" && Z(At);
    }
    return document.addEventListener("keydown", Le), () => {
      document.removeEventListener("keydown", Le);
    };
  }, [Z, z]);
  const ue = Ye(Vo(_), V, n);
  !j && j !== 0 && (z = !1);
  const te = m.useRef(), we = (Le) => {
    const At = _.props;
    At.onMouseMove && At.onMouseMove(Le), fr = {
      x: Le.clientX,
      y: Le.clientY
    }, te.current && te.current.update();
  }, Ce = {}, ge = typeof j == "string";
  p ? (Ce.title = !z && ge && !f ? j : null, Ce["aria-describedby"] = z ? be : null) : (Ce["aria-label"] = ge ? j : null, Ce["aria-labelledby"] = z && !ge ? be : null);
  const ve = {
    ...Ce,
    ...B,
    ..._.props,
    className: W(B.className, _.props.className),
    onTouchStart: xe,
    ref: ue,
    ...S ? {
      onMouseMove: we
    } : {}
  };
  process.env.NODE_ENV !== "production" && (ve["data-mui-internal-clone-element"] = !0, m.useEffect(() => {
    F && !F.getAttribute("data-mui-internal-clone-element") && console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join(`
`));
  }, [F]));
  const Be = {};
  b || (ve.onTouchStart = ke, ve.onTouchEnd = ee), f || (ve.onMouseOver = Ss($e, ve.onMouseOver), ve.onMouseLeave = Ss(Oe, ve.onMouseLeave), Y || (Be.onMouseOver = $e, Be.onMouseLeave = Oe)), u || (ve.onFocus = Ss(J, ve.onFocus), ve.onBlur = Ss(I, ve.onBlur), Y || (Be.onFocus = J, Be.onBlur = I)), process.env.NODE_ENV !== "production" && _.props.title && console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${_.props.title}\` or the Tooltip component.`].join(`
`));
  const Ae = {
    ...r,
    isRtl: U,
    arrow: s,
    disableInteractive: Y,
    placement: P,
    PopperComponentProp: N,
    touch: X.current
  }, Fe = typeof R.popper == "function" ? R.popper(Ae) : R.popper, Se = m.useMemo(() => {
    var At, On;
    let Le = [{
      name: "arrow",
      enabled: !!me,
      options: {
        element: me,
        padding: 4
      }
    }];
    return (At = v.popperOptions) != null && At.modifiers && (Le = Le.concat(v.popperOptions.modifiers)), (On = Fe == null ? void 0 : Fe.popperOptions) != null && On.modifiers && (Le = Le.concat(Fe.popperOptions.modifiers)), {
      ...v.popperOptions,
      ...Fe == null ? void 0 : Fe.popperOptions,
      modifiers: Le
    };
  }, [me, v.popperOptions, Fe == null ? void 0 : Fe.popperOptions]), ne = hR(Ae), Ee = typeof R.transition == "function" ? R.transition(Ae) : R.transition, Ie = {
    slots: {
      popper: l.Popper,
      transition: l.Transition ?? k,
      tooltip: l.Tooltip,
      arrow: l.Arrow,
      ...A
    },
    slotProps: {
      arrow: R.arrow ?? c.arrow,
      popper: {
        ...v,
        ...Fe ?? c.popper
      },
      // resolvedPopperProps can be spread because it's already an object
      tooltip: R.tooltip ?? c.tooltip,
      transition: {
        ...D,
        ...Ee ?? c.transition
      }
    }
  }, [Ve, Ke] = je("popper", {
    elementType: yR,
    externalForwardedProps: Ie,
    ownerState: Ae,
    className: W(ne.popper, v == null ? void 0 : v.className)
  }), [St, He] = je("transition", {
    elementType: Un,
    externalForwardedProps: Ie,
    ownerState: Ae
  }), [tt, ht] = je("tooltip", {
    elementType: vR,
    className: ne.tooltip,
    externalForwardedProps: Ie,
    ownerState: Ae
  }), [fo, It] = je("arrow", {
    elementType: xR,
    className: ne.arrow,
    externalForwardedProps: Ie,
    ownerState: Ae,
    ref: G
  });
  return /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ m.cloneElement(_, ve), /* @__PURE__ */ x.jsx(Ve, {
      as: N ?? Gr,
      placement: P,
      anchorEl: S ? {
        getBoundingClientRect: () => ({
          top: fr.y,
          left: fr.x,
          right: fr.x,
          bottom: fr.y,
          width: 0,
          height: 0
        })
      } : F,
      popperRef: te,
      open: F ? z : !1,
      id: be,
      transition: !0,
      ...Be,
      ...Ke,
      popperOptions: Se,
      children: ({
        TransitionProps: Le
      }) => /* @__PURE__ */ x.jsx(St, {
        timeout: H.transitions.duration.shorter,
        ...Le,
        ...He,
        children: /* @__PURE__ */ x.jsxs(tt, {
          ...ht,
          children: [j, s ? /* @__PURE__ */ x.jsx(fo, {
            ...It
          }) : null]
        })
      })
    })]
  });
});
process.env.NODE_ENV !== "production" && (Cf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */
  arrow: t.bool,
  /**
   * Tooltip reference element.
   */
  children: Fo.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: t.shape({
    Arrow: t.elementType,
    Popper: t.elementType,
    Tooltip: t.elementType,
    Transition: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: t.shape({
    arrow: t.object,
    popper: t.object,
    tooltip: t.object,
    transition: t.object
  }),
  /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */
  describeChild: t.bool,
  /**
   * Do not respond to focus-visible events.
   * @default false
   */
  disableFocusListener: t.bool,
  /**
   * Do not respond to hover events.
   * @default false
   */
  disableHoverListener: t.bool,
  /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */
  disableInteractive: t.bool,
  /**
   * Do not respond to long press touch events.
   * @default false
   */
  disableTouchListener: t.bool,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */
  enterDelay: t.number,
  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */
  enterNextDelay: t.number,
  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */
  enterTouchDelay: t.number,
  /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */
  followCursor: t.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: t.string,
  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */
  leaveDelay: t.number,
  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */
  leaveTouchDelay: t.number,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * Tooltip placement.
   * @default 'bottom'
   */
  placement: t.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The component used for the popper.
   * @deprecated use the `slots.popper` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PopperComponent: t.elementType,
  /**
   * Props applied to the [`Popper`](https://mui.com/material-ui/api/popper/) element.
   * @deprecated use the `slotProps.popper` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  PopperProps: t.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    arrow: t.oneOfType([t.func, t.object]),
    popper: t.oneOfType([t.func, t.object]),
    tooltip: t.oneOfType([t.func, t.object]),
    transition: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    arrow: t.elementType,
    popper: t.elementType,
    tooltip: t.elementType,
    transition: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
   */
  title: t.node,
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @deprecated use the `slots.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: t.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  TransitionProps: t.object
});
function SR(e) {
  return ae("MuiSpeedDialAction", e);
}
const Ts = le("MuiSpeedDialAction", ["fab", "fabClosed", "staticTooltip", "staticTooltipClosed", "staticTooltipLabel", "tooltipPlacementLeft", "tooltipPlacementRight"]), TR = (e) => {
  const {
    open: o,
    tooltipPlacement: n,
    classes: r
  } = e, s = {
    fab: ["fab", !o && "fabClosed"],
    staticTooltip: ["staticTooltip", `tooltipPlacement${L(n)}`, !o && "staticTooltipClosed"],
    staticTooltipLabel: ["staticTooltipLabel"]
  };
  return ce(s, SR, r);
}, CR = M(El, {
  name: "MuiSpeedDialAction",
  slot: "Fab",
  skipVariantsResolver: !1,
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.fab, !n.open && o.fabClosed];
  }
})(Q(({
  theme: e
}) => ({
  margin: 8,
  color: (e.vars || e).palette.text.secondary,
  backgroundColor: (e.vars || e).palette.background.paper,
  "&:hover": {
    backgroundColor: e.vars ? e.vars.palette.SpeedDialAction.fabHoverBg : kr(e.palette.background.paper, 0.15)
  },
  transition: `${e.transitions.create("transform", {
    duration: e.transitions.duration.shorter
  })}, opacity 0.8s`,
  opacity: 1,
  variants: [{
    props: ({
      ownerState: o
    }) => !o.open,
    style: {
      opacity: 0,
      transform: "scale(0)"
    }
  }]
}))), wR = M("span", {
  name: "MuiSpeedDialAction",
  slot: "StaticTooltip",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.staticTooltip, !n.open && o.staticTooltipClosed, o[`tooltipPlacement${L(n.tooltipPlacement)}`]];
  }
})(Q(({
  theme: e
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  [`& .${Ts.staticTooltipLabel}`]: {
    transition: e.transitions.create(["transform", "opacity"], {
      duration: e.transitions.duration.shorter
    }),
    opacity: 1
  },
  variants: [{
    props: ({
      ownerState: o
    }) => !o.open,
    style: {
      [`& .${Ts.staticTooltipLabel}`]: {
        opacity: 0,
        transform: "scale(0.5)"
      }
    }
  }, {
    props: {
      tooltipPlacement: "left"
    },
    style: {
      [`& .${Ts.staticTooltipLabel}`]: {
        transformOrigin: "100% 50%",
        right: "100%",
        marginRight: 8
      }
    }
  }, {
    props: {
      tooltipPlacement: "right"
    },
    style: {
      [`& .${Ts.staticTooltipLabel}`]: {
        transformOrigin: "0% 50%",
        left: "100%",
        marginLeft: 8
      }
    }
  }]
}))), OR = M("span", {
  name: "MuiSpeedDialAction",
  slot: "StaticTooltipLabel",
  overridesResolver: (e, o) => o.staticTooltipLabel
})(Q(({
  theme: e
}) => ({
  position: "absolute",
  ...e.typography.body1,
  backgroundColor: (e.vars || e).palette.background.paper,
  borderRadius: (e.vars || e).shape.borderRadius,
  boxShadow: (e.vars || e).shadows[1],
  color: (e.vars || e).palette.text.secondary,
  padding: "4px 16px",
  wordBreak: "keep-all"
}))), ER = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSpeedDialAction"
  }), {
    className: s,
    delay: a = 0,
    FabProps: i = {},
    icon: l,
    id: c,
    open: p,
    TooltipClasses: u,
    tooltipOpen: f = !1,
    tooltipPlacement: g = "left",
    tooltipTitle: b,
    ...h
  } = r, d = {
    ...r,
    tooltipPlacement: g
  }, y = TR(d), [S, O] = m.useState(f), C = () => {
    O(!1);
  }, T = () => {
    O(!0);
  }, w = {
    transitionDelay: `${a}ms`
  }, E = /* @__PURE__ */ x.jsx(CR, {
    size: "small",
    className: W(y.fab, s),
    tabIndex: -1,
    role: "menuitem",
    ownerState: d,
    ...i,
    style: {
      ...w,
      ...i.style
    },
    children: l
  });
  return f ? /* @__PURE__ */ x.jsxs(wR, {
    id: c,
    ref: n,
    className: y.staticTooltip,
    ownerState: d,
    ...h,
    children: [/* @__PURE__ */ x.jsx(OR, {
      style: w,
      id: `${c}-label`,
      className: y.staticTooltipLabel,
      ownerState: d,
      children: b
    }), /* @__PURE__ */ m.cloneElement(E, {
      "aria-labelledby": `${c}-label`
    })]
  }) : (!p && S && O(!1), /* @__PURE__ */ x.jsx(Cf, {
    id: c,
    ref: n,
    title: b,
    placement: g,
    onClose: C,
    onOpen: T,
    open: p && S,
    classes: u,
    ...h,
    children: E
  }));
});
process.env.NODE_ENV !== "production" && (ER.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
   * @default 0
   */
  delay: t.number,
  /**
   * Props applied to the [`Fab`](https://mui.com/material-ui/api/fab/) component.
   * @default {}
   */
  FabProps: t.object,
  /**
   * The icon to display in the SpeedDial Fab.
   */
  icon: t.node,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: t.string,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * `classes` prop applied to the [`Tooltip`](https://mui.com/material-ui/api/tooltip/) element.
   */
  TooltipClasses: t.object,
  /**
   * Make the tooltip always visible when the SpeedDial is open.
   * @default false
   */
  tooltipOpen: t.bool,
  /**
   * Placement of the tooltip.
   * @default 'left'
   */
  tooltipPlacement: t.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Label to display in the tooltip.
   */
  tooltipTitle: t.node
});
const RR = at(/* @__PURE__ */ x.jsx("path", {
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), "Add");
function $R(e) {
  return ae("MuiSpeedDialIcon", e);
}
const vo = le("MuiSpeedDialIcon", ["root", "icon", "iconOpen", "iconWithOpenIconOpen", "openIcon", "openIconOpen"]), kR = (e) => {
  const {
    classes: o,
    open: n,
    openIcon: r
  } = e;
  return ce({
    root: ["root"],
    icon: ["icon", n && "iconOpen", r && n && "iconWithOpenIconOpen"],
    openIcon: ["openIcon", n && "openIconOpen"]
  }, $R, o);
}, PR = M("span", {
  name: "MuiSpeedDialIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${vo.icon}`]: o.icon
    }, {
      [`& .${vo.icon}`]: n.open && o.iconOpen
    }, {
      [`& .${vo.icon}`]: n.open && n.openIcon && o.iconWithOpenIconOpen
    }, {
      [`& .${vo.openIcon}`]: o.openIcon
    }, {
      [`& .${vo.openIcon}`]: n.open && o.openIconOpen
    }, o.root];
  }
})(Q(({
  theme: e
}) => ({
  height: 24,
  [`& .${vo.icon}`]: {
    transition: e.transitions.create(["transform", "opacity"], {
      duration: e.transitions.duration.short
    })
  },
  [`& .${vo.openIcon}`]: {
    position: "absolute",
    transition: e.transitions.create(["transform", "opacity"], {
      duration: e.transitions.duration.short
    }),
    opacity: 0,
    transform: "rotate(-45deg)"
  },
  variants: [{
    props: ({
      ownerState: o
    }) => o.open,
    style: {
      [`& .${vo.icon}`]: {
        transform: "rotate(45deg)"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.open && o.openIcon,
    style: {
      [`& .${vo.icon}`]: {
        opacity: 0
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.open,
    style: {
      [`& .${vo.openIcon}`]: {
        transform: "rotate(0deg)",
        opacity: 1
      }
    }
  }]
}))), wf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSpeedDialIcon"
  }), {
    className: s,
    icon: a,
    open: i,
    openIcon: l,
    ...c
  } = r, p = r, u = kR(p);
  function f(g, b) {
    return /* @__PURE__ */ m.isValidElement(g) ? /* @__PURE__ */ m.cloneElement(g, {
      className: b
    }) : g;
  }
  return /* @__PURE__ */ x.jsxs(PR, {
    className: W(u.root, s),
    ref: n,
    ownerState: p,
    ...c,
    children: [l ? f(l, u.openIcon) : null, a ? f(a, u.icon) : /* @__PURE__ */ x.jsx(RR, {
      className: u.icon
    })]
  });
});
process.env.NODE_ENV !== "production" && (wf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display.
   */
  icon: t.node,
  /**
   * @ignore
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
   */
  openIcon: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
wf.muiName = "SpeedDialIcon";
const NR = Rh({
  createStyledComponent: M("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (e, o) => o.root
  }),
  useThemeProps: (e) => pe({
    props: e,
    name: "MuiStack"
  })
});
process.env.NODE_ENV !== "production" && (NR.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
  /**
   * Add an element between each child.
   */
  divider: t.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
   * @default false
   */
  useFlexGap: t.bool
});
const hN = le("MuiStack", ["root"]), rn = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (rn.displayName = "StepperContext");
function yN() {
  return m.useContext(rn);
}
const wn = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (wn.displayName = "StepContext");
function vN() {
  return m.useContext(wn);
}
function IR(e) {
  return ae("MuiStep", e);
}
const xN = le("MuiStep", ["root", "horizontal", "vertical", "alternativeLabel", "completed"]), jR = (e) => {
  const {
    classes: o,
    orientation: n,
    alternativeLabel: r,
    completed: s
  } = e;
  return ce({
    root: ["root", n, r && "alternativeLabel", s && "completed"]
  }, IR, o);
}, MR = M("div", {
  name: "MuiStep",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.alternativeLabel && o.alternativeLabel, n.completed && o.completed];
  }
})({
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      paddingLeft: 8,
      paddingRight: 8
    }
  }, {
    props: {
      alternativeLabel: !0
    },
    style: {
      flex: 1,
      position: "relative"
    }
  }]
}), AR = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiStep"
  }), {
    active: s,
    children: a,
    className: i,
    component: l = "div",
    completed: c,
    disabled: p,
    expanded: u = !1,
    index: f,
    last: g,
    ...b
  } = r, {
    activeStep: h,
    connector: d,
    alternativeLabel: y,
    orientation: S,
    nonLinear: O
  } = m.useContext(rn);
  let [C = !1, T = !1, w = !1] = [s, c, p];
  h === f ? C = s !== void 0 ? s : !0 : !O && h > f ? T = c !== void 0 ? c : !0 : !O && h < f && (w = p !== void 0 ? p : !0);
  const E = m.useMemo(() => ({
    index: f,
    last: g,
    expanded: u,
    icon: f + 1,
    active: C,
    completed: T,
    disabled: w
  }), [f, g, u, C, T, w]), $ = {
    ...r,
    active: C,
    orientation: S,
    alternativeLabel: y,
    completed: T,
    disabled: w,
    expanded: u,
    component: l
  }, P = jR($), N = /* @__PURE__ */ x.jsxs(MR, {
    as: l,
    className: W(P.root, i),
    ref: n,
    ownerState: $,
    ...b,
    children: [d && y && f !== 0 ? d : null, a]
  });
  return /* @__PURE__ */ x.jsx(wn.Provider, {
    value: E,
    children: d && !y && f !== 0 ? /* @__PURE__ */ x.jsxs(m.Fragment, {
      children: [d, N]
    }) : N
  });
});
process.env.NODE_ENV !== "production" && (AR.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Sets the step as active. Is passed to child components.
   */
  active: t.bool,
  /**
   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Mark the step as completed. Is passed to child components.
   */
  completed: t.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the step is disabled, will also disable the button if
   * `StepButton` is a child of `Step`. Is passed to child components.
   */
  disabled: t.bool,
  /**
   * Expand the step.
   * @default false
   */
  expanded: t.bool,
  /**
   * The position of the step.
   * The prop defaults to the value inherited from the parent Stepper component.
   */
  index: mt,
  /**
   * If `true`, the Step is displayed as rendered last.
   * The prop defaults to the value inherited from the parent Stepper component.
   */
  last: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const BR = at(/* @__PURE__ */ x.jsx("path", {
  d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
}), "CheckCircle"), LR = at(/* @__PURE__ */ x.jsx("path", {
  d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
}), "Warning");
function DR(e) {
  return ae("MuiStepIcon", e);
}
const si = le("MuiStepIcon", ["root", "active", "completed", "error", "text"]);
var Up;
const zR = (e) => {
  const {
    classes: o,
    active: n,
    completed: r,
    error: s
  } = e;
  return ce({
    root: ["root", n && "active", r && "completed", s && "error"],
    text: ["text"]
  }, DR, o);
}, ai = M(Nr, {
  name: "MuiStepIcon",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => ({
  display: "block",
  transition: e.transitions.create("color", {
    duration: e.transitions.duration.shortest
  }),
  color: (e.vars || e).palette.text.disabled,
  [`&.${si.completed}`]: {
    color: (e.vars || e).palette.primary.main
  },
  [`&.${si.active}`]: {
    color: (e.vars || e).palette.primary.main
  },
  [`&.${si.error}`]: {
    color: (e.vars || e).palette.error.main
  }
}))), FR = M("text", {
  name: "MuiStepIcon",
  slot: "Text",
  overridesResolver: (e, o) => o.text
})(Q(({
  theme: e
}) => ({
  fill: (e.vars || e).palette.primary.contrastText,
  fontSize: e.typography.caption.fontSize,
  fontFamily: e.typography.fontFamily
}))), Of = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiStepIcon"
  }), {
    active: s = !1,
    className: a,
    completed: i = !1,
    error: l = !1,
    icon: c,
    ...p
  } = r, u = {
    ...r,
    active: s,
    completed: i,
    error: l
  }, f = zR(u);
  if (typeof c == "number" || typeof c == "string") {
    const g = W(a, f.root);
    return l ? /* @__PURE__ */ x.jsx(ai, {
      as: LR,
      className: g,
      ref: n,
      ownerState: u,
      ...p
    }) : i ? /* @__PURE__ */ x.jsx(ai, {
      as: BR,
      className: g,
      ref: n,
      ownerState: u,
      ...p
    }) : /* @__PURE__ */ x.jsxs(ai, {
      className: g,
      ref: n,
      ownerState: u,
      ...p,
      children: [Up || (Up = /* @__PURE__ */ x.jsx("circle", {
        cx: "12",
        cy: "12",
        r: "12"
      })), /* @__PURE__ */ x.jsx(FR, {
        className: f.text,
        x: "12",
        y: "12",
        textAnchor: "middle",
        dominantBaseline: "central",
        ownerState: u,
        children: c
      })]
    });
  }
  return c;
});
process.env.NODE_ENV !== "production" && (Of.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Whether this step is active.
   * @default false
   */
  active: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Mark the step as completed. Is passed to child components.
   * @default false
   */
  completed: t.bool,
  /**
   * If `true`, the step is marked as failed.
   * @default false
   */
  error: t.bool,
  /**
   * The label displayed in the step icon.
   */
  icon: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function VR(e) {
  return ae("MuiStepLabel", e);
}
const Zo = le("MuiStepLabel", ["root", "horizontal", "vertical", "label", "active", "completed", "error", "disabled", "iconContainer", "alternativeLabel", "labelContainer"]), _R = (e) => {
  const {
    classes: o,
    orientation: n,
    active: r,
    completed: s,
    error: a,
    disabled: i,
    alternativeLabel: l
  } = e;
  return ce({
    root: ["root", n, a && "error", i && "disabled", l && "alternativeLabel"],
    label: ["label", r && "active", s && "completed", a && "error", i && "disabled", l && "alternativeLabel"],
    iconContainer: ["iconContainer", r && "active", s && "completed", a && "error", i && "disabled", l && "alternativeLabel"],
    labelContainer: ["labelContainer", l && "alternativeLabel"]
  }, VR, o);
}, WR = M("span", {
  name: "MuiStepLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation]];
  }
})({
  display: "flex",
  alignItems: "center",
  [`&.${Zo.alternativeLabel}`]: {
    flexDirection: "column"
  },
  [`&.${Zo.disabled}`]: {
    cursor: "default"
  },
  variants: [{
    props: {
      orientation: "vertical"
    },
    style: {
      textAlign: "left",
      padding: "8px 0"
    }
  }]
}), UR = M("span", {
  name: "MuiStepLabel",
  slot: "Label",
  overridesResolver: (e, o) => o.label
})(Q(({
  theme: e
}) => ({
  ...e.typography.body2,
  display: "block",
  transition: e.transitions.create("color", {
    duration: e.transitions.duration.shortest
  }),
  [`&.${Zo.active}`]: {
    color: (e.vars || e).palette.text.primary,
    fontWeight: 500
  },
  [`&.${Zo.completed}`]: {
    color: (e.vars || e).palette.text.primary,
    fontWeight: 500
  },
  [`&.${Zo.alternativeLabel}`]: {
    marginTop: 16
  },
  [`&.${Zo.error}`]: {
    color: (e.vars || e).palette.error.main
  }
}))), HR = M("span", {
  name: "MuiStepLabel",
  slot: "IconContainer",
  overridesResolver: (e, o) => o.iconContainer
})({
  flexShrink: 0,
  display: "flex",
  paddingRight: 8,
  [`&.${Zo.alternativeLabel}`]: {
    paddingRight: 0
  }
}), GR = M("span", {
  name: "MuiStepLabel",
  slot: "LabelContainer",
  overridesResolver: (e, o) => o.labelContainer
})(Q(({
  theme: e
}) => ({
  width: "100%",
  color: (e.vars || e).palette.text.secondary,
  [`&.${Zo.alternativeLabel}`]: {
    textAlign: "center"
  }
}))), Al = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiStepLabel"
  }), {
    children: s,
    className: a,
    componentsProps: i = {},
    error: l = !1,
    icon: c,
    optional: p,
    slots: u = {},
    slotProps: f = {},
    StepIconComponent: g,
    StepIconProps: b,
    ...h
  } = r, {
    alternativeLabel: d,
    orientation: y
  } = m.useContext(rn), {
    active: S,
    disabled: O,
    completed: C,
    icon: T
  } = m.useContext(wn), w = c || T;
  let E = g;
  w && !E && (E = Of);
  const $ = {
    ...r,
    active: S,
    alternativeLabel: d,
    completed: C,
    disabled: O,
    error: l,
    orientation: y
  }, P = _R($), N = {
    slots: u,
    slotProps: {
      stepIcon: b,
      ...i,
      ...f
    }
  }, [v, R] = je("label", {
    elementType: UR,
    externalForwardedProps: N,
    ownerState: $
  }), [A, j] = je("stepIcon", {
    elementType: E,
    externalForwardedProps: N,
    ownerState: $
  });
  return /* @__PURE__ */ x.jsxs(WR, {
    className: W(P.root, a),
    ref: n,
    ownerState: $,
    ...h,
    children: [w || A ? /* @__PURE__ */ x.jsx(HR, {
      className: P.iconContainer,
      ownerState: $,
      children: /* @__PURE__ */ x.jsx(A, {
        completed: C,
        active: S,
        error: l,
        icon: w,
        ...j
      })
    }) : null, /* @__PURE__ */ x.jsxs(GR, {
      className: P.labelContainer,
      ownerState: $,
      children: [s ? /* @__PURE__ */ x.jsx(v, {
        ...R,
        className: W(P.label, R == null ? void 0 : R.className),
        children: s
      }) : null, p]
    })]
  });
});
process.env.NODE_ENV !== "production" && (Al.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * In most cases will simply be a string containing a title for the label.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  componentsProps: t.shape({
    label: t.object
  }),
  /**
   * If `true`, the step is marked as failed.
   * @default false
   */
  error: t.bool,
  /**
   * Override the default label of the step icon.
   */
  icon: t.node,
  /**
   * The optional node to display.
   */
  optional: t.node,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    label: t.oneOfType([t.func, t.object]),
    stepIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    label: t.elementType,
    stepIcon: t.elementType
  }),
  /**
   * The component to render in place of the [`StepIcon`](https://mui.com/material-ui/api/step-icon/).
   * @deprecated Use `slots.stepIcon` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  StepIconComponent: t.elementType,
  /**
   * Props applied to the [`StepIcon`](https://mui.com/material-ui/api/step-icon/) element.
   * @deprecated Use `slotProps.stepIcon` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  StepIconProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
Al.muiName = "StepLabel";
function qR(e) {
  return ae("MuiStepButton", e);
}
const Hp = le("MuiStepButton", ["root", "horizontal", "vertical", "touchRipple"]), YR = (e) => {
  const {
    classes: o,
    orientation: n
  } = e;
  return ce({
    root: ["root", n],
    touchRipple: ["touchRipple"]
  }, qR, o);
}, KR = M(wt, {
  name: "MuiStepButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${Hp.touchRipple}`]: o.touchRipple
    }, o.root, o[n.orientation]];
  }
})({
  width: "100%",
  padding: "24px 16px",
  margin: "-24px -16px",
  boxSizing: "content-box",
  [`& .${Hp.touchRipple}`]: {
    color: "rgba(0, 0, 0, 0.3)"
  },
  variants: [{
    props: {
      orientation: "vertical"
    },
    style: {
      justifyContent: "flex-start",
      padding: "8px",
      margin: "-8px"
    }
  }]
}), XR = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiStepButton"
  }), {
    children: s,
    className: a,
    icon: i,
    optional: l,
    ...c
  } = r, {
    disabled: p,
    active: u
  } = m.useContext(wn), {
    orientation: f
  } = m.useContext(rn), g = {
    ...r,
    orientation: f
  }, b = YR(g), h = {
    icon: i,
    optional: l
  }, d = Bo(s, ["StepLabel"]) ? /* @__PURE__ */ m.cloneElement(s, h) : /* @__PURE__ */ x.jsx(Al, {
    ...h,
    children: s
  });
  return /* @__PURE__ */ x.jsx(KR, {
    focusRipple: !0,
    disabled: p,
    TouchRippleProps: {
      className: b.touchRipple
    },
    className: W(b.root, a),
    ref: n,
    ownerState: g,
    "aria-current": u ? "step" : void 0,
    ...c,
    children: d
  });
});
process.env.NODE_ENV !== "production" && (XR.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon displayed by the step label.
   */
  icon: t.node,
  /**
   * The optional node to display.
   */
  optional: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function JR(e) {
  return ae("MuiStepConnector", e);
}
const SN = le("MuiStepConnector", ["root", "horizontal", "vertical", "alternativeLabel", "active", "completed", "disabled", "line", "lineHorizontal", "lineVertical"]), ZR = (e) => {
  const {
    classes: o,
    orientation: n,
    alternativeLabel: r,
    active: s,
    completed: a,
    disabled: i
  } = e, l = {
    root: ["root", n, r && "alternativeLabel", s && "active", a && "completed", i && "disabled"],
    line: ["line", `line${L(n)}`]
  };
  return ce(l, JR, o);
}, QR = M("div", {
  name: "MuiStepConnector",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.alternativeLabel && o.alternativeLabel, n.completed && o.completed];
  }
})({
  flex: "1 1 auto",
  variants: [{
    props: {
      orientation: "vertical"
    },
    style: {
      marginLeft: 12
      // half icon
    }
  }, {
    props: {
      alternativeLabel: !0
    },
    style: {
      position: "absolute",
      top: 12,
      left: "calc(-50% + 20px)",
      right: "calc(50% + 20px)"
    }
  }]
}), e$ = M("span", {
  name: "MuiStepConnector",
  slot: "Line",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.line, o[`line${L(n.orientation)}`]];
  }
})(Q(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? e.palette.grey[400] : e.palette.grey[600];
  return {
    display: "block",
    borderColor: e.vars ? e.vars.palette.StepConnector.border : o,
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        borderTopStyle: "solid",
        borderTopWidth: 1
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        borderLeftStyle: "solid",
        borderLeftWidth: 1,
        minHeight: 24
      }
    }]
  };
})), Ef = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiStepConnector"
  }), {
    className: s,
    ...a
  } = r, {
    alternativeLabel: i,
    orientation: l = "horizontal"
  } = m.useContext(rn), {
    active: c,
    disabled: p,
    completed: u
  } = m.useContext(wn), f = {
    ...r,
    alternativeLabel: i,
    orientation: l,
    active: c,
    completed: u,
    disabled: p
  }, g = ZR(f);
  return /* @__PURE__ */ x.jsx(QR, {
    className: W(g.root, s),
    ref: n,
    ownerState: f,
    ...a,
    children: /* @__PURE__ */ x.jsx(e$, {
      className: g.line,
      ownerState: f
    })
  });
});
process.env.NODE_ENV !== "production" && (Ef.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function t$(e) {
  return ae("MuiStepContent", e);
}
const TN = le("MuiStepContent", ["root", "last", "transition"]), o$ = (e) => {
  const {
    classes: o,
    last: n
  } = e;
  return ce({
    root: ["root", n && "last"],
    transition: ["transition"]
  }, t$, o);
}, n$ = M("div", {
  name: "MuiStepContent",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.last && o.last];
  }
})(Q(({
  theme: e
}) => ({
  marginLeft: 12,
  // half icon
  paddingLeft: 20,
  // margin + half icon
  paddingRight: 8,
  borderLeft: e.vars ? `1px solid ${e.vars.palette.StepContent.border}` : `1px solid ${e.palette.mode === "light" ? e.palette.grey[400] : e.palette.grey[600]}`,
  variants: [{
    props: {
      last: !0
    },
    style: {
      borderLeft: "none"
    }
  }]
}))), r$ = M(zn, {
  name: "MuiStepContent",
  slot: "Transition",
  overridesResolver: (e, o) => o.transition
})({}), s$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiStepContent"
  }), {
    children: s,
    className: a,
    TransitionComponent: i = zn,
    transitionDuration: l = "auto",
    TransitionProps: c,
    slots: p = {},
    slotProps: u = {},
    ...f
  } = r, {
    orientation: g
  } = m.useContext(rn), {
    active: b,
    last: h,
    expanded: d
  } = m.useContext(wn), y = {
    ...r,
    last: h
  }, S = o$(y);
  process.env.NODE_ENV !== "production" && g !== "vertical" && console.error("MUI: <StepContent /> is only designed for use with the vertical stepper.");
  let O = l;
  l === "auto" && !i.muiSupportAuto && (O = void 0);
  const C = {
    slots: p,
    slotProps: {
      transition: c,
      ...u
    }
  }, [T, w] = je("transition", {
    elementType: r$,
    externalForwardedProps: C,
    ownerState: y,
    className: S.transition,
    additionalProps: {
      in: b || d,
      timeout: O,
      unmountOnExit: !0
    }
  });
  return /* @__PURE__ */ x.jsx(n$, {
    className: W(S.root, a),
    ref: n,
    ownerState: y,
    ...f,
    children: /* @__PURE__ */ x.jsx(T, {
      as: i,
      ...w,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (s$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    transition: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    transition: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Collapse
   * @deprecated Use `slots.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   */
  TransitionComponent: t.elementType,
  /**
   * Adjust the duration of the content expand transition.
   * Passed as a prop to the transition component.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  transitionDuration: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionProps: t.object
});
function a$(e) {
  return ae("MuiStepper", e);
}
const CN = le("MuiStepper", ["root", "horizontal", "vertical", "nonLinear", "alternativeLabel"]), i$ = (e) => {
  const {
    orientation: o,
    nonLinear: n,
    alternativeLabel: r,
    classes: s
  } = e;
  return ce({
    root: ["root", o, n && "nonLinear", r && "alternativeLabel"]
  }, a$, s);
}, l$ = M("div", {
  name: "MuiStepper",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.alternativeLabel && o.alternativeLabel, n.nonLinear && o.nonLinear];
  }
})({
  display: "flex",
  variants: [{
    props: {
      orientation: "horizontal"
    },
    style: {
      flexDirection: "row",
      alignItems: "center"
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      flexDirection: "column"
    }
  }, {
    props: {
      alternativeLabel: !0
    },
    style: {
      alignItems: "flex-start"
    }
  }]
}), c$ = /* @__PURE__ */ x.jsx(Ef, {}), p$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiStepper"
  }), {
    activeStep: s = 0,
    alternativeLabel: a = !1,
    children: i,
    className: l,
    component: c = "div",
    connector: p = c$,
    nonLinear: u = !1,
    orientation: f = "horizontal",
    ...g
  } = r, b = {
    ...r,
    nonLinear: u,
    alternativeLabel: a,
    orientation: f,
    component: c
  }, h = i$(b), d = m.Children.toArray(i).filter(Boolean), y = d.map((O, C) => /* @__PURE__ */ m.cloneElement(O, {
    index: C,
    last: C + 1 === d.length,
    ...O.props
  })), S = m.useMemo(() => ({
    activeStep: s,
    alternativeLabel: a,
    connector: p,
    nonLinear: u,
    orientation: f
  }), [s, a, p, u, f]);
  return /* @__PURE__ */ x.jsx(rn.Provider, {
    value: S,
    children: /* @__PURE__ */ x.jsx(l$, {
      as: c,
      ownerState: b,
      className: W(h.root, l),
      ref: n,
      ...g,
      children: y
    })
  });
});
process.env.NODE_ENV !== "production" && (p$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the active step (zero based index).
   * Set to -1 to disable all the steps.
   * @default 0
   */
  activeStep: mt,
  /**
   * If set to 'true' and orientation is horizontal,
   * then the step label will be positioned under the icon.
   * @default false
   */
  alternativeLabel: t.bool,
  /**
   * Two or more `<Step />` components.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * An element to be placed between each step.
   * @default <StepConnector />
   */
  connector: t.element,
  /**
   * If set the `Stepper` will not assist in controlling steps for linear flow.
   * @default false
   */
  nonLinear: t.bool,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const u$ = M("div", {
  shouldForwardProp: bt
})(Q(({
  theme: e
}) => ({
  position: "fixed",
  top: 0,
  left: 0,
  bottom: 0,
  zIndex: e.zIndex.drawer - 1,
  variants: [{
    props: {
      anchor: "left"
    },
    style: {
      right: "auto"
    }
  }, {
    props: {
      anchor: "right"
    },
    style: {
      left: "auto",
      right: 0
    }
  }, {
    props: {
      anchor: "top"
    },
    style: {
      bottom: "auto",
      right: 0
    }
  }, {
    props: {
      anchor: "bottom"
    },
    style: {
      top: "auto",
      bottom: 0,
      right: 0
    }
  }]
}))), Rf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    anchor: r,
    classes: s = {},
    className: a,
    width: i,
    style: l,
    ...c
  } = o, p = o;
  return /* @__PURE__ */ x.jsx(u$, {
    className: W("PrivateSwipeArea-root", s.root, s[`anchor${L(r)}`], a),
    ref: n,
    style: {
      [gn(r) ? "width" : "height"]: i,
      ...l
    },
    ownerState: p,
    ...c
  });
});
process.env.NODE_ENV !== "production" && (Rf.propTypes = {
  /**
   * Side on which to attach the discovery area.
   */
  anchor: t.oneOf(["left", "top", "right", "bottom"]).isRequired,
  /**
   * @ignore
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The width of the left most (or right most) area in `px` where the
   * drawer can be swiped open from.
   */
  width: t.number.isRequired
});
const Cs = 3, Gp = 20;
let Mo = null;
function ii(e, o, n) {
  return e === "right" ? n.body.offsetWidth - o[0].pageX : o[0].pageX;
}
function li(e, o, n) {
  return e === "bottom" ? n.innerHeight - o[0].clientY : o[0].clientY;
}
function mr(e, o) {
  return e ? o.clientWidth : o.clientHeight;
}
function qp(e, o, n, r) {
  return Math.min(Math.max(n ? o - e : r + o - e, 0), r);
}
function d$(e, o) {
  const n = [];
  for (; e && e !== o.parentElement; ) {
    const r = Pt(o).getComputedStyle(e);
    // Ignore the scroll children if the element is absolute positioned.
    r.getPropertyValue("position") === "absolute" || // Ignore the scroll children if the element has an overflowX hidden
    r.getPropertyValue("overflow-x") === "hidden" || (e.clientWidth > 0 && e.scrollWidth > e.clientWidth || e.clientHeight > 0 && e.scrollHeight > e.clientHeight) && n.push(e), e = e.parentElement;
  }
  return n;
}
function f$({
  domTreeShapes: e,
  start: o,
  current: n,
  anchor: r
}) {
  const s = {
    scrollPosition: {
      x: "scrollLeft",
      y: "scrollTop"
    },
    scrollLength: {
      x: "scrollWidth",
      y: "scrollHeight"
    },
    clientLength: {
      x: "clientWidth",
      y: "clientHeight"
    }
  };
  return e.some((a) => {
    let i = n >= o;
    (r === "top" || r === "left") && (i = !i);
    const l = r === "left" || r === "right" ? "x" : "y", c = Math.round(a[s.scrollPosition[l]]), p = c > 0, u = c + a[s.clientLength[l]] < a[s.scrollLength[l]];
    return !!(i && u || !i && p);
  });
}
const m$ = typeof navigator < "u" && /iPad|iPhone|iPod/.test(navigator.userAgent), g$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    name: "MuiSwipeableDrawer",
    props: o
  }), s = Ot(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    anchor: i = "left",
    disableBackdropTransition: l = !1,
    disableDiscovery: c = !1,
    disableSwipeToOpen: p = m$,
    hideBackdrop: u,
    hysteresis: f = 0.52,
    allowSwipeInChildren: g = !1,
    minFlingVelocity: b = 450,
    ModalProps: {
      BackdropProps: h,
      ...d
    } = {},
    onClose: y,
    onOpen: S,
    open: O = !1,
    PaperProps: C = {},
    SwipeAreaProps: T,
    swipeAreaWidth: w = 20,
    transitionDuration: E = a,
    variant: $ = "temporary",
    // Mobile first.
    ...P
  } = r, [N, v] = m.useState(!1), R = m.useRef({
    isSwiping: null
  }), A = m.useRef(), j = m.useRef(), k = m.useRef(), D = Ye(C.ref, k), B = m.useRef(!1), _ = m.useRef();
  Rt(() => {
    _.current = null;
  }, [O]);
  const H = m.useCallback((G, X = {}) => {
    const {
      mode: Y = null,
      changeTransition: q = !0
    } = X, ie = yr(s, i), K = ["right", "bottom"].includes(ie) ? 1 : -1, de = gn(i), oe = de ? `translate(${K * G}px, 0)` : `translate(0, ${K * G}px)`, he = k.current.style;
    he.webkitTransform = oe, he.transform = oe;
    let z = "";
    if (Y && (z = s.transitions.create("all", mo({
      easing: void 0,
      style: void 0,
      timeout: E
    }, {
      mode: Y
    }))), q && (he.webkitTransition = z, he.transition = z), !l && !u) {
      const be = j.current.style;
      be.opacity = 1 - G / mr(de, k.current), q && (be.webkitTransition = z, be.transition = z);
    }
  }, [i, l, u, s, E]), U = pt((G) => {
    if (!B.current)
      return;
    if (Mo = null, B.current = !1, ui.flushSync(() => {
      v(!1);
    }), !R.current.isSwiping) {
      R.current.isSwiping = null;
      return;
    }
    R.current.isSwiping = null;
    const X = yr(s, i), Y = gn(i);
    let q;
    Y ? q = ii(X, G.changedTouches, lt(G.currentTarget)) : q = li(X, G.changedTouches, Pt(G.currentTarget));
    const ie = Y ? R.current.startX : R.current.startY, K = mr(Y, k.current), de = qp(q, ie, O, K), oe = de / K;
    if (Math.abs(R.current.velocity) > b && (_.current = Math.abs((K - de) / R.current.velocity) * 1e3), O) {
      R.current.velocity > b || oe > f ? y() : H(0, {
        mode: "exit"
      });
      return;
    }
    R.current.velocity < -b || 1 - oe > f ? S() : H(mr(Y, k.current), {
      mode: "enter"
    });
  }), F = (G = !1) => {
    if (!N) {
      (G || !(c && g)) && ui.flushSync(() => {
        v(!0);
      });
      const X = gn(i);
      !O && k.current && H(mr(X, k.current) + (c ? 15 : -20), {
        changeTransition: !1
      }), R.current.velocity = 0, R.current.lastTime = null, R.current.lastTranslate = null, R.current.paperHit = !1, B.current = !0;
    }
  }, V = pt((G) => {
    if (!k.current || !B.current || Mo !== null && Mo !== R.current)
      return;
    F(!0);
    const X = yr(s, i), Y = gn(i), q = ii(X, G.touches, lt(G.currentTarget)), ie = li(X, G.touches, Pt(G.currentTarget));
    if (O && k.current.contains(G.target) && Mo === null) {
      const z = d$(G.target, k.current);
      if (f$({
        domTreeShapes: z,
        start: Y ? R.current.startX : R.current.startY,
        current: Y ? q : ie,
        anchor: i
      })) {
        Mo = !0;
        return;
      }
      Mo = R.current;
    }
    if (R.current.isSwiping == null) {
      const z = Math.abs(q - R.current.startX), be = Math.abs(ie - R.current.startY), ye = Y ? z > be && z > Cs : be > z && be > Cs;
      if (ye && G.cancelable && G.preventDefault(), ye === !0 || (Y ? be > Cs : z > Cs)) {
        if (R.current.isSwiping = ye, !ye) {
          U(G);
          return;
        }
        R.current.startX = q, R.current.startY = ie, !c && !O && (Y ? R.current.startX -= Gp : R.current.startY -= Gp);
      }
    }
    if (!R.current.isSwiping)
      return;
    const K = mr(Y, k.current);
    let de = Y ? R.current.startX : R.current.startY;
    O && !R.current.paperHit && (de = Math.min(de, K));
    const oe = qp(Y ? q : ie, de, O, K);
    if (O)
      if (R.current.paperHit)
        oe === 0 && (R.current.startX = q, R.current.startY = ie);
      else if (Y ? q < K : ie < K)
        R.current.paperHit = !0, R.current.startX = q, R.current.startY = ie;
      else
        return;
    R.current.lastTranslate === null && (R.current.lastTranslate = oe, R.current.lastTime = performance.now() + 1);
    const he = (oe - R.current.lastTranslate) / (performance.now() - R.current.lastTime) * 1e3;
    R.current.velocity = R.current.velocity * 0.4 + he * 0.6, R.current.lastTranslate = oe, R.current.lastTime = performance.now(), G.cancelable && G.preventDefault(), H(oe);
  }), me = pt((G) => {
    var K;
    if (G.defaultPrevented || G.defaultMuiPrevented || O && (u || !j.current.contains(G.target)) && !k.current.contains(G.target))
      return;
    const X = yr(s, i), Y = gn(i), q = ii(X, G.touches, lt(G.currentTarget)), ie = li(X, G.touches, Pt(G.currentTarget));
    if (!O) {
      if (p || !(G.target === A.current || (K = k.current) != null && K.contains(G.target) && (typeof g == "function" ? g(G, A.current, k.current) : g)))
        return;
      if (Y) {
        if (q > w)
          return;
      } else if (ie > w)
        return;
    }
    G.defaultMuiPrevented = !0, Mo = null, R.current.startX = q, R.current.startY = ie, F();
  });
  return m.useEffect(() => {
    if ($ === "temporary") {
      const G = lt(k.current);
      return G.addEventListener("touchstart", me), G.addEventListener("touchmove", V, {
        passive: !O
      }), G.addEventListener("touchend", U), () => {
        G.removeEventListener("touchstart", me), G.removeEventListener("touchmove", V, {
          passive: !O
        }), G.removeEventListener("touchend", U);
      };
    }
  }, [$, O, me, V, U]), m.useEffect(() => () => {
    Mo === R.current && (Mo = null);
  }, []), m.useEffect(() => {
    O || v(!1);
  }, [O]), /* @__PURE__ */ x.jsxs(m.Fragment, {
    children: [/* @__PURE__ */ x.jsx(Fd, {
      open: $ === "temporary" && N ? !0 : O,
      variant: $,
      ModalProps: {
        BackdropProps: {
          ...h,
          ref: j
        },
        // Ensures that paperRef.current will be defined inside the touch start event handler
        // See https://github.com/mui/material-ui/issues/30414 for more information
        ...$ === "temporary" && {
          keepMounted: !0
        },
        ...d
      },
      hideBackdrop: u,
      PaperProps: {
        ...C,
        style: {
          pointerEvents: $ === "temporary" && !O && !g ? "none" : "",
          ...C.style
        },
        ref: D
      },
      anchor: i,
      transitionDuration: _.current || E,
      onClose: y,
      ref: n,
      ...P
    }), !p && $ === "temporary" && /* @__PURE__ */ x.jsx(ea, {
      children: /* @__PURE__ */ x.jsx(Rf, {
        anchor: i,
        ref: A,
        width: w,
        ...T
      })
    })]
  });
});
process.env.NODE_ENV !== "production" && (g$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.
   * This can be useful in scenarios where the drawer is partially visible.
   * You can customize it further with a callback that determines which children the user can drag over to open the drawer
   * (for example, to ignore other elements that handle touch move events, like sliders).
   *
   * @param {TouchEvent} event The 'touchstart' event
   * @param {HTMLDivElement} swipeArea The swipe area element
   * @param {HTMLDivElement} paper The drawer's paper element
   *
   * @default false
   */
  allowSwipeInChildren: t.oneOfType([t.func, t.bool]),
  /**
   * @ignore
   */
  anchor: t.oneOf(["bottom", "left", "right", "top"]),
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Disable the backdrop transition.
   * This can improve the FPS on low-end devices.
   * @default false
   */
  disableBackdropTransition: t.bool,
  /**
   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
   * to promote accidental discovery of the swipe gesture.
   * @default false
   */
  disableDiscovery: t.bool,
  /**
   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
   * navigation actions. Swipe to open is disabled on iOS browsers by default.
   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)
   */
  disableSwipeToOpen: t.bool,
  /**
   * @ignore
   */
  hideBackdrop: t.bool,
  /**
   * Affects how far the drawer must be opened/closed to change its state.
   * Specified as percent (0-1) of the width of the drawer
   * @default 0.52
   */
  hysteresis: t.number,
  /**
   * Defines, from which (average) velocity on, the swipe is
   * defined as complete although hysteresis isn't reached.
   * Good threshold is between 250 - 1000 px/s
   * @default 450
   */
  minFlingVelocity: t.number,
  /**
   * @ignore
   */
  ModalProps: t.shape({
    BackdropProps: t.shape({
      component: en
    })
  }),
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent<{}>} event The event source of the callback.
   */
  onClose: t.func.isRequired,
  /**
   * Callback fired when the component requests to be opened.
   *
   * @param {React.SyntheticEvent<{}>} event The event source of the callback.
   */
  onOpen: t.func.isRequired,
  /**
   * If `true`, the component is shown.
   * @default false
   */
  open: t.bool,
  /**
   * @ignore
   */
  PaperProps: t.shape({
    component: en,
    style: t.object
  }),
  /**
   * The element is used to intercept the touch events on the edge.
   */
  SwipeAreaProps: t.object,
  /**
   * The width of the left most (or right most) area in `px` that
   * the drawer can be swiped open from.
   * @default 20
   */
  swipeAreaWidth: t.number,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * @ignore
   */
  variant: t.oneOf(["permanent", "persistent", "temporary"])
});
function b$(e) {
  return ae("MuiSwitch", e);
}
const Dt = le("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]), h$ = (e) => {
  const {
    classes: o,
    edge: n,
    size: r,
    color: s,
    checked: a,
    disabled: i
  } = e, l = {
    root: ["root", n && `edge${L(n)}`, `size${L(r)}`],
    switchBase: ["switchBase", `color${L(s)}`, a && "checked", i && "disabled"],
    thumb: ["thumb"],
    track: ["track"],
    input: ["input"]
  }, c = ce(l, b$, o);
  return {
    ...o,
    // forward the disabled and checked classes to the SwitchBase
    ...c
  };
}, y$ = M("span", {
  name: "MuiSwitch",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.edge && o[`edge${L(n.edge)}`], o[`size${L(n.size)}`]];
  }
})({
  display: "inline-flex",
  width: 34 + 12 * 2,
  height: 14 + 12 * 2,
  overflow: "hidden",
  padding: 12,
  boxSizing: "border-box",
  position: "relative",
  flexShrink: 0,
  zIndex: 0,
  // Reset the stacking context.
  verticalAlign: "middle",
  // For correct alignment with the text.
  "@media print": {
    colorAdjust: "exact"
  },
  variants: [{
    props: {
      edge: "start"
    },
    style: {
      marginLeft: -8
    }
  }, {
    props: {
      edge: "end"
    },
    style: {
      marginRight: -8
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      width: 40,
      height: 24,
      padding: 7,
      [`& .${Dt.thumb}`]: {
        width: 16,
        height: 16
      },
      [`& .${Dt.switchBase}`]: {
        padding: 4,
        [`&.${Dt.checked}`]: {
          transform: "translateX(16px)"
        }
      }
    }
  }]
}), v$ = M($a, {
  name: "MuiSwitch",
  slot: "SwitchBase",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.switchBase, {
      [`& .${Dt.input}`]: o.input
    }, n.color !== "default" && o[`color${L(n.color)}`]];
  }
})(Q(({
  theme: e
}) => ({
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: 1,
  // Render above the focus ripple.
  color: e.vars ? e.vars.palette.Switch.defaultColor : `${e.palette.mode === "light" ? e.palette.common.white : e.palette.grey[300]}`,
  transition: e.transitions.create(["left", "transform"], {
    duration: e.transitions.duration.shortest
  }),
  [`&.${Dt.checked}`]: {
    transform: "translateX(20px)"
  },
  [`&.${Dt.disabled}`]: {
    color: e.vars ? e.vars.palette.Switch.defaultDisabledColor : `${e.palette.mode === "light" ? e.palette.grey[100] : e.palette.grey[600]}`
  },
  [`&.${Dt.checked} + .${Dt.track}`]: {
    opacity: 0.5
  },
  [`&.${Dt.disabled} + .${Dt.track}`]: {
    opacity: e.vars ? e.vars.opacity.switchTrackDisabled : `${e.palette.mode === "light" ? 0.12 : 0.2}`
  },
  [`& .${Dt.input}`]: {
    left: "-100%",
    width: "300%"
  }
})), Q(({
  theme: e
}) => ({
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette.action.active, e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  variants: [...Object.entries(e.palette).filter(Ue(["light"])).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      [`&.${Dt.checked}`]: {
        color: (e.vars || e).palette[o].main,
        "&:hover": {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette[o].main, e.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        [`&.${Dt.disabled}`]: {
          color: e.vars ? e.vars.palette.Switch[`${o}DisabledColor`] : `${e.palette.mode === "light" ? Ro(e.palette[o].main, 0.62) : Eo(e.palette[o].main, 0.55)}`
        }
      },
      [`&.${Dt.checked} + .${Dt.track}`]: {
        backgroundColor: (e.vars || e).palette[o].main
      }
    }
  }))]
}))), x$ = M("span", {
  name: "MuiSwitch",
  slot: "Track",
  overridesResolver: (e, o) => o.track
})(Q(({
  theme: e
}) => ({
  height: "100%",
  width: "100%",
  borderRadius: 14 / 2,
  zIndex: -1,
  transition: e.transitions.create(["opacity", "background-color"], {
    duration: e.transitions.duration.shortest
  }),
  backgroundColor: e.vars ? e.vars.palette.common.onBackground : `${e.palette.mode === "light" ? e.palette.common.black : e.palette.common.white}`,
  opacity: e.vars ? e.vars.opacity.switchTrack : `${e.palette.mode === "light" ? 0.38 : 0.3}`
}))), S$ = M("span", {
  name: "MuiSwitch",
  slot: "Thumb",
  overridesResolver: (e, o) => o.thumb
})(Q(({
  theme: e
}) => ({
  boxShadow: (e.vars || e).shadows[1],
  backgroundColor: "currentColor",
  width: 20,
  height: 20,
  borderRadius: "50%"
}))), T$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiSwitch"
  }), {
    className: s,
    color: a = "primary",
    edge: i = !1,
    size: l = "medium",
    sx: c,
    ...p
  } = r, u = {
    ...r,
    color: a,
    edge: i,
    size: l
  }, f = h$(u), g = /* @__PURE__ */ x.jsx(S$, {
    className: f.thumb,
    ownerState: u
  });
  return /* @__PURE__ */ x.jsxs(y$, {
    className: W(f.root, s),
    sx: c,
    ownerState: u,
    children: [/* @__PURE__ */ x.jsx(v$, {
      type: "checkbox",
      icon: g,
      checkedIcon: g,
      ref: n,
      ownerState: u,
      ...p,
      classes: {
        ...f,
        root: f.switchBase
      }
    }), /* @__PURE__ */ x.jsx(x$, {
      className: f.track,
      ownerState: u
    })]
  });
});
process.env.NODE_ENV !== "production" && (T$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: t.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: t.oneOf(["end", "start", !1]),
  /**
   * The icon to display when the component is unchecked.
   */
  icon: t.node,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense switch styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: t.any
});
function C$(e) {
  return ae("MuiTab", e);
}
const eo = le("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper", "icon"]), w$ = (e) => {
  const {
    classes: o,
    textColor: n,
    fullWidth: r,
    wrapped: s,
    icon: a,
    label: i,
    selected: l,
    disabled: c
  } = e, p = {
    root: ["root", a && i && "labelIcon", `textColor${L(n)}`, r && "fullWidth", s && "wrapped", l && "selected", c && "disabled"],
    icon: ["iconWrapper", "icon"]
  };
  return ce(p, C$, o);
}, O$ = M(wt, {
  name: "MuiTab",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.label && n.icon && o.labelIcon, o[`textColor${L(n.textColor)}`], n.fullWidth && o.fullWidth, n.wrapped && o.wrapped, {
      [`& .${eo.iconWrapper}`]: o.iconWrapper
    }, {
      [`& .${eo.icon}`]: o.icon
    }];
  }
})(Q(({
  theme: e
}) => ({
  ...e.typography.button,
  maxWidth: 360,
  minWidth: 90,
  position: "relative",
  minHeight: 48,
  flexShrink: 0,
  padding: "12px 16px",
  overflow: "hidden",
  whiteSpace: "normal",
  textAlign: "center",
  lineHeight: 1.25,
  variants: [{
    props: ({
      ownerState: o
    }) => o.label && (o.iconPosition === "top" || o.iconPosition === "bottom"),
    style: {
      flexDirection: "column"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.label && o.iconPosition !== "top" && o.iconPosition !== "bottom",
    style: {
      flexDirection: "row"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.icon && o.label,
    style: {
      minHeight: 72,
      paddingTop: 9,
      paddingBottom: 9
    }
  }, {
    props: ({
      ownerState: o,
      iconPosition: n
    }) => o.icon && o.label && n === "top",
    style: {
      [`& > .${eo.icon}`]: {
        marginBottom: 6
      }
    }
  }, {
    props: ({
      ownerState: o,
      iconPosition: n
    }) => o.icon && o.label && n === "bottom",
    style: {
      [`& > .${eo.icon}`]: {
        marginTop: 6
      }
    }
  }, {
    props: ({
      ownerState: o,
      iconPosition: n
    }) => o.icon && o.label && n === "start",
    style: {
      [`& > .${eo.icon}`]: {
        marginRight: e.spacing(1)
      }
    }
  }, {
    props: ({
      ownerState: o,
      iconPosition: n
    }) => o.icon && o.label && n === "end",
    style: {
      [`& > .${eo.icon}`]: {
        marginLeft: e.spacing(1)
      }
    }
  }, {
    props: {
      textColor: "inherit"
    },
    style: {
      color: "inherit",
      opacity: 0.6,
      // same opacity as theme.palette.text.secondary
      [`&.${eo.selected}`]: {
        opacity: 1
      },
      [`&.${eo.disabled}`]: {
        opacity: (e.vars || e).palette.action.disabledOpacity
      }
    }
  }, {
    props: {
      textColor: "primary"
    },
    style: {
      color: (e.vars || e).palette.text.secondary,
      [`&.${eo.selected}`]: {
        color: (e.vars || e).palette.primary.main
      },
      [`&.${eo.disabled}`]: {
        color: (e.vars || e).palette.text.disabled
      }
    }
  }, {
    props: {
      textColor: "secondary"
    },
    style: {
      color: (e.vars || e).palette.text.secondary,
      [`&.${eo.selected}`]: {
        color: (e.vars || e).palette.secondary.main
      },
      [`&.${eo.disabled}`]: {
        color: (e.vars || e).palette.text.disabled
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.fullWidth,
    style: {
      flexShrink: 1,
      flexGrow: 1,
      flexBasis: 0,
      maxWidth: "none"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.wrapped,
    style: {
      fontSize: e.typography.pxToRem(12)
    }
  }]
}))), E$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTab"
  }), {
    className: s,
    disabled: a = !1,
    disableFocusRipple: i = !1,
    // eslint-disable-next-line react/prop-types
    fullWidth: l,
    icon: c,
    iconPosition: p = "top",
    // eslint-disable-next-line react/prop-types
    indicator: u,
    label: f,
    onChange: g,
    onClick: b,
    onFocus: h,
    // eslint-disable-next-line react/prop-types
    selected: d,
    // eslint-disable-next-line react/prop-types
    selectionFollowsFocus: y,
    // eslint-disable-next-line react/prop-types
    textColor: S = "inherit",
    value: O,
    wrapped: C = !1,
    ...T
  } = r, w = {
    ...r,
    disabled: a,
    disableFocusRipple: i,
    selected: d,
    icon: !!c,
    iconPosition: p,
    label: !!f,
    fullWidth: l,
    textColor: S,
    wrapped: C
  }, E = w$(w), $ = c && f && /* @__PURE__ */ m.isValidElement(c) ? /* @__PURE__ */ m.cloneElement(c, {
    className: W(E.icon, c.props.className)
  }) : c, P = (v) => {
    !d && g && g(v, O), b && b(v);
  }, N = (v) => {
    y && !d && g && g(v, O), h && h(v);
  };
  return /* @__PURE__ */ x.jsxs(O$, {
    focusRipple: !i,
    className: W(E.root, s),
    ref: n,
    role: "tab",
    "aria-selected": d,
    disabled: a,
    onClick: P,
    onFocus: N,
    ownerState: w,
    tabIndex: d ? 0 : -1,
    ...T,
    children: [p === "top" || p === "start" ? /* @__PURE__ */ x.jsxs(m.Fragment, {
      children: [$, f]
    }) : /* @__PURE__ */ x.jsxs(m.Fragment, {
      children: [f, $]
    }), u]
  });
});
process.env.NODE_ENV !== "production" && (E$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: ol,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * The icon to display.
   */
  icon: t.oneOfType([t.element, t.string]),
  /**
   * The position of the icon relative to the label.
   * @default 'top'
   */
  iconPosition: t.oneOf(["bottom", "end", "start", "top"]),
  /**
   * The label element.
   */
  label: t.node,
  /**
   * @ignore
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * You can provide your own value. Otherwise, we fallback to the child position index.
   */
  value: t.any,
  /**
   * Tab labels appear in a single row.
   * They can use a second line if needed.
   * @default false
   */
  wrapped: t.bool
});
const Bl = /* @__PURE__ */ m.createContext();
process.env.NODE_ENV !== "production" && (Bl.displayName = "TableContext");
function R$(e) {
  return ae("MuiTable", e);
}
const wN = le("MuiTable", ["root", "stickyHeader"]), $$ = (e) => {
  const {
    classes: o,
    stickyHeader: n
  } = e;
  return ce({
    root: ["root", n && "stickyHeader"]
  }, R$, o);
}, k$ = M("table", {
  name: "MuiTable",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.stickyHeader && o.stickyHeader];
  }
})(Q(({
  theme: e
}) => ({
  display: "table",
  width: "100%",
  borderCollapse: "collapse",
  borderSpacing: 0,
  "& caption": {
    ...e.typography.body2,
    padding: e.spacing(2),
    color: (e.vars || e).palette.text.secondary,
    textAlign: "left",
    captionSide: "bottom"
  },
  variants: [{
    props: ({
      ownerState: o
    }) => o.stickyHeader,
    style: {
      borderCollapse: "separate"
    }
  }]
}))), Yp = "table", P$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTable"
  }), {
    className: s,
    component: a = Yp,
    padding: i = "normal",
    size: l = "medium",
    stickyHeader: c = !1,
    ...p
  } = r, u = {
    ...r,
    component: a,
    padding: i,
    size: l,
    stickyHeader: c
  }, f = $$(u), g = m.useMemo(() => ({
    padding: i,
    size: l,
    stickyHeader: c
  }), [i, l, c]);
  return /* @__PURE__ */ x.jsx(Bl.Provider, {
    value: g,
    children: /* @__PURE__ */ x.jsx(k$, {
      as: a,
      role: a === Yp ? null : "table",
      ref: n,
      className: W(f.root, s),
      ownerState: u,
      ...p
    })
  });
});
process.env.NODE_ENV !== "production" && (P$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the table, normally `TableHead` and `TableBody`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Allows TableCells to inherit padding of the Table.
   * @default 'normal'
   */
  padding: t.oneOf(["checkbox", "none", "normal"]),
  /**
   * Allows TableCells to inherit size of the Table.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * Set the header sticky.
   * @default false
   */
  stickyHeader: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Kn = /* @__PURE__ */ m.createContext();
process.env.NODE_ENV !== "production" && (Kn.displayName = "Tablelvl2Context");
function N$(e) {
  return ae("MuiTableBody", e);
}
const ON = le("MuiTableBody", ["root"]), I$ = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, N$, o);
}, j$ = M("tbody", {
  name: "MuiTableBody",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "table-row-group"
}), M$ = {
  variant: "body"
}, Kp = "tbody", A$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTableBody"
  }), {
    className: s,
    component: a = Kp,
    ...i
  } = r, l = {
    ...r,
    component: a
  }, c = I$(l);
  return /* @__PURE__ */ x.jsx(Kn.Provider, {
    value: M$,
    children: /* @__PURE__ */ x.jsx(j$, {
      className: W(c.root, s),
      as: a,
      ref: n,
      role: a === Kp ? null : "rowgroup",
      ownerState: l,
      ...i
    })
  });
});
process.env.NODE_ENV !== "production" && (A$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `TableRow`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function B$(e) {
  return ae("MuiTableCell", e);
}
const L$ = le("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]), D$ = (e) => {
  const {
    classes: o,
    variant: n,
    align: r,
    padding: s,
    size: a,
    stickyHeader: i
  } = e, l = {
    root: ["root", n, i && "stickyHeader", r !== "inherit" && `align${L(r)}`, s !== "normal" && `padding${L(s)}`, `size${L(a)}`]
  };
  return ce(l, B$, o);
}, z$ = M("td", {
  name: "MuiTableCell",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`size${L(n.size)}`], n.padding !== "normal" && o[`padding${L(n.padding)}`], n.align !== "inherit" && o[`align${L(n.align)}`], n.stickyHeader && o.stickyHeader];
  }
})(Q(({
  theme: e
}) => ({
  ...e.typography.body2,
  display: "table-cell",
  verticalAlign: "inherit",
  // Workaround for a rendering bug with spanned columns in Chrome 62.0.
  // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
  borderBottom: e.vars ? `1px solid ${e.vars.palette.TableCell.border}` : `1px solid
    ${e.palette.mode === "light" ? Ro(Ne(e.palette.divider, 1), 0.88) : Eo(Ne(e.palette.divider, 1), 0.68)}`,
  textAlign: "left",
  padding: 16,
  variants: [{
    props: {
      variant: "head"
    },
    style: {
      color: (e.vars || e).palette.text.primary,
      lineHeight: e.typography.pxToRem(24),
      fontWeight: e.typography.fontWeightMedium
    }
  }, {
    props: {
      variant: "body"
    },
    style: {
      color: (e.vars || e).palette.text.primary
    }
  }, {
    props: {
      variant: "footer"
    },
    style: {
      color: (e.vars || e).palette.text.secondary,
      lineHeight: e.typography.pxToRem(21),
      fontSize: e.typography.pxToRem(12)
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      padding: "6px 16px",
      [`&.${L$.paddingCheckbox}`]: {
        width: 24,
        // prevent the checkbox column from growing
        padding: "0 12px 0 16px",
        "& > *": {
          padding: 0
        }
      }
    }
  }, {
    props: {
      padding: "checkbox"
    },
    style: {
      width: 48,
      // prevent the checkbox column from growing
      padding: "0 0 0 4px"
    }
  }, {
    props: {
      padding: "none"
    },
    style: {
      padding: 0
    }
  }, {
    props: {
      align: "left"
    },
    style: {
      textAlign: "left"
    }
  }, {
    props: {
      align: "center"
    },
    style: {
      textAlign: "center"
    }
  }, {
    props: {
      align: "right"
    },
    style: {
      textAlign: "right",
      flexDirection: "row-reverse"
    }
  }, {
    props: {
      align: "justify"
    },
    style: {
      textAlign: "justify"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.stickyHeader,
    style: {
      position: "sticky",
      top: 0,
      zIndex: 2,
      backgroundColor: (e.vars || e).palette.background.default
    }
  }]
}))), oa = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTableCell"
  }), {
    align: s = "inherit",
    className: a,
    component: i,
    padding: l,
    scope: c,
    size: p,
    sortDirection: u,
    variant: f,
    ...g
  } = r, b = m.useContext(Bl), h = m.useContext(Kn), d = h && h.variant === "head";
  let y;
  i ? y = i : y = d ? "th" : "td";
  let S = c;
  y === "td" ? S = void 0 : !S && d && (S = "col");
  const O = f || h && h.variant, C = {
    ...r,
    align: s,
    component: y,
    padding: l || (b && b.padding ? b.padding : "normal"),
    size: p || (b && b.size ? b.size : "medium"),
    sortDirection: u,
    stickyHeader: O === "head" && b && b.stickyHeader,
    variant: O
  }, T = D$(C);
  let w = null;
  return u && (w = u === "asc" ? "ascending" : "descending"), /* @__PURE__ */ x.jsx(z$, {
    as: y,
    ref: n,
    className: W(T.root, a),
    "aria-sort": w,
    scope: S,
    ownerState: C,
    ...g
  });
});
process.env.NODE_ENV !== "production" && (oa.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the table cell content.
   *
   * Monetary or generally number fields **should be right aligned** as that allows
   * you to add them up quickly in your head without having to worry about decimals.
   * @default 'inherit'
   */
  align: t.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Sets the padding applied to the cell.
   * The prop defaults to the value (`'default'`) inherited from the parent Table component.
   */
  padding: t.oneOf(["checkbox", "none", "normal"]),
  /**
   * Set scope attribute.
   */
  scope: t.string,
  /**
   * Specify the size of the cell.
   * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * Set aria-sort direction.
   */
  sortDirection: t.oneOf(["asc", "desc", !1]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Specify the cell type.
   * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
   */
  variant: t.oneOfType([t.oneOf(["body", "footer", "head"]), t.string])
});
function F$(e) {
  return ae("MuiTableContainer", e);
}
const EN = le("MuiTableContainer", ["root"]), V$ = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, F$, o);
}, _$ = M("div", {
  name: "MuiTableContainer",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  width: "100%",
  overflowX: "auto"
}), W$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTableContainer"
  }), {
    className: s,
    component: a = "div",
    ...i
  } = r, l = {
    ...r,
    component: a
  }, c = V$(l);
  return /* @__PURE__ */ x.jsx(_$, {
    ref: n,
    as: a,
    className: W(c.root, s),
    ownerState: l,
    ...i
  });
});
process.env.NODE_ENV !== "production" && (W$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `Table`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function U$(e) {
  return ae("MuiTableFooter", e);
}
const RN = le("MuiTableFooter", ["root"]), H$ = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, U$, o);
}, G$ = M("tfoot", {
  name: "MuiTableFooter",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "table-footer-group"
}), q$ = {
  variant: "footer"
}, Xp = "tfoot", Y$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTableFooter"
  }), {
    className: s,
    component: a = Xp,
    ...i
  } = r, l = {
    ...r,
    component: a
  }, c = H$(l);
  return /* @__PURE__ */ x.jsx(Kn.Provider, {
    value: q$,
    children: /* @__PURE__ */ x.jsx(G$, {
      as: a,
      className: W(c.root, s),
      ref: n,
      role: a === Xp ? null : "rowgroup",
      ownerState: l,
      ...i
    })
  });
});
process.env.NODE_ENV !== "production" && (Y$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `TableRow`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function K$(e) {
  return ae("MuiTableHead", e);
}
const $N = le("MuiTableHead", ["root"]), X$ = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, K$, o);
}, J$ = M("thead", {
  name: "MuiTableHead",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "table-header-group"
}), Z$ = {
  variant: "head"
}, Jp = "thead", Q$ = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTableHead"
  }), {
    className: s,
    component: a = Jp,
    ...i
  } = r, l = {
    ...r,
    component: a
  }, c = X$(l);
  return /* @__PURE__ */ x.jsx(Kn.Provider, {
    value: Z$,
    children: /* @__PURE__ */ x.jsx(J$, {
      as: a,
      className: W(c.root, s),
      ref: n,
      role: a === Jp ? null : "rowgroup",
      ownerState: l,
      ...i
    })
  });
});
process.env.NODE_ENV !== "production" && (Q$.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `TableRow`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function ek(e) {
  return ae("MuiToolbar", e);
}
const kN = le("MuiToolbar", ["root", "gutters", "regular", "dense"]), tk = (e) => {
  const {
    classes: o,
    disableGutters: n,
    variant: r
  } = e;
  return ce({
    root: ["root", !n && "gutters", r]
  }, ek, o);
}, ok = M("div", {
  name: "MuiToolbar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableGutters && o.gutters, o[n.variant]];
  }
})(Q(({
  theme: e
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  variants: [{
    props: ({
      ownerState: o
    }) => !o.disableGutters,
    style: {
      paddingLeft: e.spacing(2),
      paddingRight: e.spacing(2),
      [e.breakpoints.up("sm")]: {
        paddingLeft: e.spacing(3),
        paddingRight: e.spacing(3)
      }
    }
  }, {
    props: {
      variant: "dense"
    },
    style: {
      minHeight: 48
    }
  }, {
    props: {
      variant: "regular"
    },
    style: e.mixins.toolbar
  }]
}))), $f = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiToolbar"
  }), {
    className: s,
    component: a = "div",
    disableGutters: i = !1,
    variant: l = "regular",
    ...c
  } = r, p = {
    ...r,
    component: a,
    disableGutters: i,
    variant: l
  }, u = tk(p);
  return /* @__PURE__ */ x.jsx(ok, {
    as: a,
    className: W(u.root, s),
    ref: n,
    ownerState: p,
    ...c
  });
});
process.env.NODE_ENV !== "production" && ($f.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
   * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, disables gutter padding.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'regular'
   */
  variant: t.oneOfType([t.oneOf(["dense", "regular"]), t.string])
});
const kf = at(/* @__PURE__ */ x.jsx("path", {
  d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
}), "KeyboardArrowLeft"), Pf = at(/* @__PURE__ */ x.jsx("path", {
  d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
}), "KeyboardArrowRight"), Nf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    backIconButtonProps: r,
    count: s,
    disabled: a = !1,
    getItemAriaLabel: i,
    nextIconButtonProps: l,
    onPageChange: c,
    page: p,
    rowsPerPage: u,
    showFirstButton: f,
    showLastButton: g,
    slots: b = {},
    slotProps: h = {},
    ...d
  } = o, y = go(), S = (V) => {
    c(V, 0);
  }, O = (V) => {
    c(V, p - 1);
  }, C = (V) => {
    c(V, p + 1);
  }, T = (V) => {
    c(V, Math.max(0, Math.ceil(s / u) - 1));
  }, w = b.firstButton ?? Xo, E = b.lastButton ?? Xo, $ = b.nextButton ?? Xo, P = b.previousButton ?? Xo, N = b.firstButtonIcon ?? pf, v = b.lastButtonIcon ?? uf, R = b.nextButtonIcon ?? Pf, A = b.previousButtonIcon ?? kf, j = y ? E : w, k = y ? $ : P, D = y ? P : $, B = y ? w : E, _ = y ? h.lastButton : h.firstButton, H = y ? h.nextButton : h.previousButton, U = y ? h.previousButton : h.nextButton, F = y ? h.firstButton : h.lastButton;
  return /* @__PURE__ */ x.jsxs("div", {
    ref: n,
    ...d,
    children: [f && /* @__PURE__ */ x.jsx(j, {
      onClick: S,
      disabled: a || p === 0,
      "aria-label": i("first", p),
      title: i("first", p),
      ..._,
      children: y ? /* @__PURE__ */ x.jsx(v, {
        ...h.lastButtonIcon
      }) : /* @__PURE__ */ x.jsx(N, {
        ...h.firstButtonIcon
      })
    }), /* @__PURE__ */ x.jsx(k, {
      onClick: O,
      disabled: a || p === 0,
      color: "inherit",
      "aria-label": i("previous", p),
      title: i("previous", p),
      ...H ?? r,
      children: y ? /* @__PURE__ */ x.jsx(R, {
        ...h.nextButtonIcon
      }) : /* @__PURE__ */ x.jsx(A, {
        ...h.previousButtonIcon
      })
    }), /* @__PURE__ */ x.jsx(D, {
      onClick: C,
      disabled: a || (s !== -1 ? p >= Math.ceil(s / u) - 1 : !1),
      color: "inherit",
      "aria-label": i("next", p),
      title: i("next", p),
      ...U ?? l,
      children: y ? /* @__PURE__ */ x.jsx(A, {
        ...h.previousButtonIcon
      }) : /* @__PURE__ */ x.jsx(R, {
        ...h.nextButtonIcon
      })
    }), g && /* @__PURE__ */ x.jsx(B, {
      onClick: T,
      disabled: a || p >= Math.ceil(s / u) - 1,
      "aria-label": i("last", p),
      title: i("last", p),
      ...F,
      children: y ? /* @__PURE__ */ x.jsx(N, {
        ...h.firstButtonIcon
      }) : /* @__PURE__ */ x.jsx(v, {
        ...h.lastButtonIcon
      })
    })]
  });
});
process.env.NODE_ENV !== "production" && (Nf.propTypes = {
  /**
   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  backIconButtonProps: t.object,
  /**
   * The total number of rows.
   */
  count: t.number.isRequired,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   *
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
   * @param {number} page The page number to format.
   * @returns {string}
   */
  getItemAriaLabel: t.func.isRequired,
  /**
   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  nextIconButtonProps: t.object,
  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: t.func.isRequired,
  /**
   * The zero-based index of the current page.
   */
  page: t.number.isRequired,
  /**
   * The number of rows per page.
   */
  rowsPerPage: t.number.isRequired,
  /**
   * If `true`, show the first-page button.
   */
  showFirstButton: t.bool.isRequired,
  /**
   * If `true`, show the last-page button.
   */
  showLastButton: t.bool.isRequired,
  /**
   * The props used for each slot inside the TablePaginationActions.
   * @default {}
   */
  slotProps: t.shape({
    firstButton: t.object,
    firstButtonIcon: t.object,
    lastButton: t.object,
    lastButtonIcon: t.object,
    nextButton: t.object,
    nextButtonIcon: t.object,
    previousButton: t.object,
    previousButtonIcon: t.object
  }),
  /**
   * The components used for each slot inside the TablePaginationActions.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    firstButton: t.elementType,
    firstButtonIcon: t.elementType,
    lastButton: t.elementType,
    lastButtonIcon: t.elementType,
    nextButton: t.elementType,
    nextButtonIcon: t.elementType,
    previousButton: t.elementType,
    previousButtonIcon: t.elementType
  })
});
function nk(e) {
  return ae("MuiTablePagination", e);
}
const Or = le("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
var Zp;
const rk = M(oa, {
  name: "MuiTablePagination",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(Q(({
  theme: e
}) => ({
  overflow: "auto",
  color: (e.vars || e).palette.text.primary,
  fontSize: e.typography.pxToRem(14),
  // Increase the specificity to override TableCell.
  "&:last-child": {
    padding: 0
  }
}))), sk = M($f, {
  name: "MuiTablePagination",
  slot: "Toolbar",
  overridesResolver: (e, o) => ({
    [`& .${Or.actions}`]: o.actions,
    ...o.toolbar
  })
})(Q(({
  theme: e
}) => ({
  minHeight: 52,
  paddingRight: 2,
  [`${e.breakpoints.up("xs")} and (orientation: landscape)`]: {
    minHeight: 52
  },
  [e.breakpoints.up("sm")]: {
    minHeight: 52,
    paddingRight: 2
  },
  [`& .${Or.actions}`]: {
    flexShrink: 0,
    marginLeft: 20
  }
}))), ak = M("div", {
  name: "MuiTablePagination",
  slot: "Spacer",
  overridesResolver: (e, o) => o.spacer
})({
  flex: "1 1 100%"
}), ik = M("p", {
  name: "MuiTablePagination",
  slot: "SelectLabel",
  overridesResolver: (e, o) => o.selectLabel
})(Q(({
  theme: e
}) => ({
  ...e.typography.body2,
  flexShrink: 0
}))), lk = M(Ia, {
  name: "MuiTablePagination",
  slot: "Select",
  overridesResolver: (e, o) => ({
    [`& .${Or.selectIcon}`]: o.selectIcon,
    [`& .${Or.select}`]: o.select,
    ...o.input,
    ...o.selectRoot
  })
})({
  color: "inherit",
  fontSize: "inherit",
  flexShrink: 0,
  marginRight: 32,
  marginLeft: 8,
  [`& .${Or.select}`]: {
    paddingLeft: 8,
    paddingRight: 24,
    textAlign: "right",
    textAlignLast: "right"
    // Align <select> on Chrome.
  }
}), ck = M(nf, {
  name: "MuiTablePagination",
  slot: "MenuItem",
  overridesResolver: (e, o) => o.menuItem
})({}), pk = M("p", {
  name: "MuiTablePagination",
  slot: "DisplayedRows",
  overridesResolver: (e, o) => o.displayedRows
})(Q(({
  theme: e
}) => ({
  ...e.typography.body2,
  flexShrink: 0
})));
function uk({
  from: e,
  to: o,
  count: n
}) {
  return `${e}–${o} of ${n !== -1 ? n : `more than ${o}`}`;
}
function dk(e) {
  return `Go to ${e} page`;
}
const fk = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"],
    toolbar: ["toolbar"],
    spacer: ["spacer"],
    selectLabel: ["selectLabel"],
    select: ["select"],
    input: ["input"],
    selectIcon: ["selectIcon"],
    menuItem: ["menuItem"],
    displayedRows: ["displayedRows"],
    actions: ["actions"]
  }, nk, o);
}, mk = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTablePagination"
  }), {
    ActionsComponent: s = Nf,
    backIconButtonProps: a,
    colSpan: i,
    component: l = oa,
    count: c,
    disabled: p = !1,
    getItemAriaLabel: u = dk,
    labelDisplayedRows: f = uk,
    labelRowsPerPage: g = "Rows per page:",
    nextIconButtonProps: b,
    onPageChange: h,
    onRowsPerPageChange: d,
    page: y,
    rowsPerPage: S,
    rowsPerPageOptions: O = [10, 25, 50, 100],
    SelectProps: C = {},
    showFirstButton: T = !1,
    showLastButton: w = !1,
    slotProps: E = {},
    slots: $ = {},
    ...P
  } = r, N = r, v = fk(N), R = (E == null ? void 0 : E.select) ?? C, A = R.native ? "option" : ck;
  let j;
  (l === oa || l === "td") && (j = i || 1e3);
  const k = io(R.id), D = io(R.labelId), B = () => c === -1 ? (y + 1) * S : S === -1 ? c : Math.min(c, (y + 1) * S), _ = {
    slots: $,
    slotProps: E
  }, [H, U] = je("root", {
    ref: n,
    className: v.root,
    elementType: rk,
    externalForwardedProps: {
      ..._,
      component: l,
      ...P
    },
    ownerState: N,
    additionalProps: {
      colSpan: j
    }
  }), [F, V] = je("toolbar", {
    className: v.toolbar,
    elementType: sk,
    externalForwardedProps: _,
    ownerState: N
  }), [me, G] = je("spacer", {
    className: v.spacer,
    elementType: ak,
    externalForwardedProps: _,
    ownerState: N
  }), [X, Y] = je("selectLabel", {
    className: v.selectLabel,
    elementType: ik,
    externalForwardedProps: _,
    ownerState: N,
    additionalProps: {
      id: D
    }
  }), [q, ie] = je("select", {
    className: v.select,
    elementType: lk,
    externalForwardedProps: _,
    ownerState: N
  }), [K, de] = je("menuItem", {
    className: v.menuItem,
    elementType: A,
    externalForwardedProps: _,
    ownerState: N
  }), [oe, he] = je("displayedRows", {
    className: v.displayedRows,
    elementType: pk,
    externalForwardedProps: _,
    ownerState: N
  });
  return /* @__PURE__ */ x.jsx(H, {
    ...U,
    children: /* @__PURE__ */ x.jsxs(F, {
      ...V,
      children: [/* @__PURE__ */ x.jsx(me, {
        ...G
      }), O.length > 1 && /* @__PURE__ */ x.jsx(X, {
        ...Y,
        children: g
      }), O.length > 1 && /* @__PURE__ */ x.jsx(q, {
        variant: "standard",
        ...!R.variant && {
          input: Zp || (Zp = /* @__PURE__ */ x.jsx(Yr, {}))
        },
        value: S,
        onChange: d,
        id: k,
        labelId: D,
        ...R,
        classes: {
          ...R.classes,
          // TODO v5 remove `classes.input`
          root: W(v.input, v.selectRoot, (R.classes || {}).root),
          select: W(v.select, (R.classes || {}).select),
          // TODO v5 remove `selectIcon`
          icon: W(v.selectIcon, (R.classes || {}).icon)
        },
        disabled: p,
        ...ie,
        children: O.map((z) => /* @__PURE__ */ Vf(K, {
          ...de,
          key: z.label ? z.label : z,
          value: z.value ? z.value : z
        }, z.label ? z.label : z))
      }), /* @__PURE__ */ x.jsx(oe, {
        ...he,
        children: f({
          from: c === 0 ? 0 : y * S + 1,
          to: B(),
          count: c === -1 ? -1 : c,
          page: y
        })
      }), /* @__PURE__ */ x.jsx(s, {
        className: v.actions,
        backIconButtonProps: a,
        count: c,
        nextIconButtonProps: b,
        onPageChange: h,
        page: y,
        rowsPerPage: S,
        showFirstButton: T,
        showLastButton: w,
        slotProps: E.actions,
        slots: $.actions,
        getItemAriaLabel: u,
        disabled: p
      })]
    })
  });
});
process.env.NODE_ENV !== "production" && (mk.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The component used for displaying the actions.
   * Either a string to use a HTML element or a component.
   * @default TablePaginationActions
   */
  ActionsComponent: t.elementType,
  /**
   * Props applied to the back arrow [`IconButton`](https://mui.com/material-ui/api/icon-button/) component.
   *
   * This prop is an alias for `slotProps.actions.previousButton` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.actions.previousButton` instead.
   */
  backIconButtonProps: t.object,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  colSpan: t.number,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The total number of rows.
   *
   * To enable server side pagination for an unknown number of items, provide -1.
   */
  count: mt.isRequired,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
   * @returns {string}
   * @default function defaultGetAriaLabel(type) {
   *   return `Go to ${type} page`;
   * }
   */
  getItemAriaLabel: t.func,
  /**
   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
   * object.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default function defaultLabelDisplayedRows({ from, to, count }) {
   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
   * }
   */
  labelDisplayedRows: t.func,
  /**
   * Customize the rows per page label.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Rows per page:'
   */
  labelRowsPerPage: t.node,
  /**
   * Props applied to the next arrow [`IconButton`](https://mui.com/material-ui/api/icon-button/) element.
   *
   * This prop is an alias for `slotProps.actions.nextButton` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.actions.nextButton` instead.
   */
  nextIconButtonProps: t.object,
  /**
   * Callback fired when the page is changed.
   *
   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: t.func.isRequired,
  /**
   * Callback fired when the number of rows per page is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   */
  onRowsPerPageChange: t.func,
  /**
   * The zero-based index of the current page.
   */
  page: xt(mt.isRequired, (e) => {
    const {
      count: o,
      page: n,
      rowsPerPage: r
    } = e;
    if (o === -1)
      return null;
    const s = Math.max(0, Math.ceil(o / r) - 1);
    return n < 0 || n > s ? new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${s}, but page is ${n}).`) : null;
  }),
  /**
   * The number of rows per page.
   *
   * Set -1 to display all the rows.
   */
  rowsPerPage: mt.isRequired,
  /**
   * Customizes the options of the rows per page select field. If less than two options are
   * available, no select field will be displayed.
   * Use -1 for the value with a custom label to show all the rows.
   * @default [10, 25, 50, 100]
   */
  rowsPerPageOptions: t.arrayOf(t.oneOfType([t.number, t.shape({
    label: t.string.isRequired,
    value: t.number.isRequired
  })]).isRequired),
  /**
   * Props applied to the rows per page [`Select`](https://mui.com/material-ui/api/select/) element.
   *
   * This prop is an alias for `slotProps.select` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.select` instead.
   *
   * @default {}
   */
  SelectProps: t.object,
  /**
   * If `true`, show the first-page button.
   * @default false
   */
  showFirstButton: t.bool,
  /**
   * If `true`, show the last-page button.
   * @default false
   */
  showLastButton: t.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    actions: t.shape({
      firstButton: t.object,
      firstButtonIcon: t.object,
      lastButton: t.object,
      lastButtonIcon: t.object,
      nextButton: t.object,
      nextButtonIcon: t.object,
      previousButton: t.object,
      previousButtonIcon: t.object
    }),
    displayedRows: t.oneOfType([t.func, t.object]),
    menuItem: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object]),
    select: t.object,
    selectLabel: t.oneOfType([t.func, t.object]),
    spacer: t.oneOfType([t.func, t.object]),
    toolbar: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    actions: t.shape({
      firstButton: t.elementType,
      firstButtonIcon: t.elementType,
      lastButton: t.elementType,
      lastButtonIcon: t.elementType,
      nextButton: t.elementType,
      nextButtonIcon: t.elementType,
      previousButton: t.elementType,
      previousButtonIcon: t.elementType
    }),
    displayedRows: t.elementType,
    menuItem: t.elementType,
    root: t.elementType,
    select: t.elementType,
    selectLabel: t.elementType,
    spacer: t.elementType,
    toolbar: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function gk(e) {
  return ae("MuiTableRow", e);
}
const Qp = le("MuiTableRow", ["root", "selected", "hover", "head", "footer"]), bk = (e) => {
  const {
    classes: o,
    selected: n,
    hover: r,
    head: s,
    footer: a
  } = e;
  return ce({
    root: ["root", n && "selected", r && "hover", s && "head", a && "footer"]
  }, gk, o);
}, hk = M("tr", {
  name: "MuiTableRow",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.head && o.head, n.footer && o.footer];
  }
})(Q(({
  theme: e
}) => ({
  color: "inherit",
  display: "table-row",
  verticalAlign: "middle",
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  [`&.${Qp.hover}:hover`]: {
    backgroundColor: (e.vars || e).palette.action.hover
  },
  [`&.${Qp.selected}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity),
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity)
    }
  }
}))), eu = "tr", yk = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTableRow"
  }), {
    className: s,
    component: a = eu,
    hover: i = !1,
    selected: l = !1,
    ...c
  } = r, p = m.useContext(Kn), u = {
    ...r,
    component: a,
    hover: i,
    selected: l,
    head: p && p.variant === "head",
    footer: p && p.variant === "footer"
  }, f = bk(u);
  return /* @__PURE__ */ x.jsx(hk, {
    as: a,
    ref: n,
    className: W(f.root, s),
    role: a === eu ? null : "row",
    ownerState: u,
    ...c
  });
});
process.env.NODE_ENV !== "production" && (yk.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Should be valid `<tr>` children such as `TableCell`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the table row will shade on hover.
   * @default false
   */
  hover: t.bool,
  /**
   * If `true`, the table row will have the selected shading.
   * @default false
   */
  selected: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const vk = at(/* @__PURE__ */ x.jsx("path", {
  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
}), "ArrowDownward");
function xk(e) {
  return ae("MuiTableSortLabel", e);
}
const ci = le("MuiTableSortLabel", ["root", "active", "icon", "iconDirectionDesc", "iconDirectionAsc", "directionDesc", "directionAsc"]), Sk = (e) => {
  const {
    classes: o,
    direction: n,
    active: r
  } = e, s = {
    root: ["root", r && "active", `direction${L(n)}`],
    icon: ["icon", `iconDirection${L(n)}`]
  };
  return ce(s, xk, o);
}, Tk = M(wt, {
  name: "MuiTableSortLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.active && o.active];
  }
})(Q(({
  theme: e
}) => ({
  cursor: "pointer",
  display: "inline-flex",
  justifyContent: "flex-start",
  flexDirection: "inherit",
  alignItems: "center",
  "&:focus": {
    color: (e.vars || e).palette.text.secondary
  },
  "&:hover": {
    color: (e.vars || e).palette.text.secondary,
    [`& .${ci.icon}`]: {
      opacity: 0.5
    }
  },
  [`&.${ci.active}`]: {
    color: (e.vars || e).palette.text.primary,
    [`& .${ci.icon}`]: {
      opacity: 1,
      color: (e.vars || e).palette.text.secondary
    }
  }
}))), Ck = M("span", {
  name: "MuiTableSortLabel",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, o[`iconDirection${L(n.direction)}`]];
  }
})(Q(({
  theme: e
}) => ({
  fontSize: 18,
  marginRight: 4,
  marginLeft: 4,
  opacity: 0,
  transition: e.transitions.create(["opacity", "transform"], {
    duration: e.transitions.duration.shorter
  }),
  userSelect: "none",
  variants: [{
    props: {
      direction: "desc"
    },
    style: {
      transform: "rotate(0deg)"
    }
  }, {
    props: {
      direction: "asc"
    },
    style: {
      transform: "rotate(180deg)"
    }
  }]
}))), wk = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTableSortLabel"
  }), {
    active: s = !1,
    children: a,
    className: i,
    direction: l = "asc",
    hideSortIcon: c = !1,
    IconComponent: p = vk,
    slots: u = {},
    slotProps: f = {},
    ...g
  } = r, b = {
    ...r,
    active: s,
    direction: l,
    hideSortIcon: c,
    IconComponent: p
  }, h = Sk(b), d = {
    slots: u,
    slotProps: f
  }, [y, S] = je("root", {
    elementType: Tk,
    externalForwardedProps: d,
    ownerState: b,
    className: W(h.root, i),
    ref: n
  }), [O, C] = je("icon", {
    elementType: Ck,
    externalForwardedProps: d,
    ownerState: b,
    className: h.icon
  });
  return /* @__PURE__ */ x.jsxs(y, {
    disableRipple: !0,
    component: "span",
    ...S,
    ...g,
    children: [a, c && !s ? null : /* @__PURE__ */ x.jsx(O, {
      as: p,
      ...C
    })]
  });
});
process.env.NODE_ENV !== "production" && (wk.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the label will have the active styling (should be true for the sorted column).
   * @default false
   */
  active: t.bool,
  /**
   * Label contents, the arrow will be appended automatically.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The current sort direction.
   * @default 'asc'
   */
  direction: t.oneOf(["asc", "desc"]),
  /**
   * Hide sort icon when active is false.
   * @default false
   */
  hideSortIcon: t.bool,
  /**
   * Sort icon to use.
   * @default ArrowDownwardIcon
   */
  IconComponent: t.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    icon: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    icon: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function Ok(e) {
  return (1 + Math.sin(Math.PI * e - Math.PI / 2)) / 2;
}
function Ek(e, o, n, r = {}, s = () => {
}) {
  const {
    ease: a = Ok,
    duration: i = 300
    // standard
  } = r;
  let l = null;
  const c = o[e];
  let p = !1;
  const u = () => {
    p = !0;
  }, f = (g) => {
    if (p) {
      s(new Error("Animation cancelled"));
      return;
    }
    l === null && (l = g);
    const b = Math.min(1, (g - l) / i);
    if (o[e] = a(b) * (n - c) + c, b >= 1) {
      requestAnimationFrame(() => {
        s(null);
      });
      return;
    }
    requestAnimationFrame(f);
  };
  return c === n ? (s(new Error("Element already at target position")), u) : (requestAnimationFrame(f), u);
}
const Rk = {
  width: 99,
  height: 99,
  position: "absolute",
  top: -9999,
  overflow: "scroll"
};
function If(e) {
  const {
    onChange: o,
    ...n
  } = e, r = m.useRef(), s = m.useRef(null), a = () => {
    r.current = s.current.offsetHeight - s.current.clientHeight;
  };
  return Rt(() => {
    const i = Wr(() => {
      const c = r.current;
      a(), c !== r.current && o(r.current);
    }), l = Pt(s.current);
    return l.addEventListener("resize", i), () => {
      i.clear(), l.removeEventListener("resize", i);
    };
  }, [o]), m.useEffect(() => {
    a(), o(r.current);
  }, [o]), /* @__PURE__ */ x.jsx("div", {
    style: Rk,
    ...n,
    ref: s
  });
}
process.env.NODE_ENV !== "production" && (If.propTypes = {
  onChange: t.func.isRequired
});
function $k(e) {
  return ae("MuiTabScrollButton", e);
}
const kk = le("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]), Pk = (e) => {
  const {
    classes: o,
    orientation: n,
    disabled: r
  } = e;
  return ce({
    root: ["root", n, r && "disabled"]
  }, $k, o);
}, Nk = M(wt, {
  name: "MuiTabScrollButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.orientation && o[n.orientation]];
  }
})({
  width: 40,
  flexShrink: 0,
  opacity: 0.8,
  [`&.${kk.disabled}`]: {
    opacity: 0
  },
  variants: [{
    props: {
      orientation: "vertical"
    },
    style: {
      width: "100%",
      height: 40,
      "& svg": {
        transform: "var(--TabScrollButton-svgRotate)"
      }
    }
  }]
}), jf = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTabScrollButton"
  }), {
    className: s,
    slots: a = {},
    slotProps: i = {},
    direction: l,
    orientation: c,
    disabled: p,
    ...u
  } = r, f = go(), g = {
    isRtl: f,
    ...r
  }, b = Pk(g), h = a.StartScrollButtonIcon ?? kf, d = a.EndScrollButtonIcon ?? Pf, y = Tt({
    elementType: h,
    externalSlotProps: i.startScrollButtonIcon,
    additionalProps: {
      fontSize: "small"
    },
    ownerState: g
  }), S = Tt({
    elementType: d,
    externalSlotProps: i.endScrollButtonIcon,
    additionalProps: {
      fontSize: "small"
    },
    ownerState: g
  });
  return /* @__PURE__ */ x.jsx(Nk, {
    component: "div",
    className: W(b.root, s),
    ref: n,
    role: null,
    ownerState: g,
    tabIndex: null,
    ...u,
    style: {
      ...u.style,
      ...c === "vertical" && {
        "--TabScrollButton-svgRotate": `rotate(${f ? -90 : 90}deg)`
      }
    },
    children: l === "left" ? /* @__PURE__ */ x.jsx(h, {
      ...y
    }) : /* @__PURE__ */ x.jsx(d, {
      ...S
    })
  });
});
process.env.NODE_ENV !== "production" && (jf.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The direction the button should indicate.
   */
  direction: t.oneOf(["left", "right"]).isRequired,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * The component orientation (layout flow direction).
   */
  orientation: t.oneOf(["horizontal", "vertical"]).isRequired,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   * @default {}
   */
  slotProps: t.shape({
    endScrollButtonIcon: t.oneOfType([t.func, t.object]),
    startScrollButtonIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    EndScrollButtonIcon: t.elementType,
    StartScrollButtonIcon: t.elementType
  }),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function Ik(e) {
  return ae("MuiTabs", e);
}
const pi = le("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]), tu = (e, o) => e === o ? e.firstChild : o && o.nextElementSibling ? o.nextElementSibling : e.firstChild, ou = (e, o) => e === o ? e.lastChild : o && o.previousElementSibling ? o.previousElementSibling : e.lastChild, ws = (e, o, n) => {
  let r = !1, s = n(e, o);
  for (; s; ) {
    if (s === e.firstChild) {
      if (r)
        return;
      r = !0;
    }
    const a = s.disabled || s.getAttribute("aria-disabled") === "true";
    if (!s.hasAttribute("tabindex") || a)
      s = n(e, s);
    else {
      s.focus();
      return;
    }
  }
}, jk = (e) => {
  const {
    vertical: o,
    fixed: n,
    hideScrollbar: r,
    scrollableX: s,
    scrollableY: a,
    centered: i,
    scrollButtonsHideMobile: l,
    classes: c
  } = e;
  return ce({
    root: ["root", o && "vertical"],
    scroller: ["scroller", n && "fixed", r && "hideScrollbar", s && "scrollableX", a && "scrollableY"],
    flexContainer: ["flexContainer", o && "flexContainerVertical", i && "centered"],
    indicator: ["indicator"],
    scrollButtons: ["scrollButtons", l && "scrollButtonsHideMobile"],
    scrollableX: [s && "scrollableX"],
    hideScrollbar: [r && "hideScrollbar"]
  }, Ik, c);
}, Mk = M("div", {
  name: "MuiTabs",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${pi.scrollButtons}`]: o.scrollButtons
    }, {
      [`& .${pi.scrollButtons}`]: n.scrollButtonsHideMobile && o.scrollButtonsHideMobile
    }, o.root, n.vertical && o.vertical];
  }
})(Q(({
  theme: e
}) => ({
  overflow: "hidden",
  minHeight: 48,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  display: "flex",
  variants: [{
    props: ({
      ownerState: o
    }) => o.vertical,
    style: {
      flexDirection: "column"
    }
  }, {
    props: ({
      ownerState: o
    }) => o.scrollButtonsHideMobile,
    style: {
      [`& .${pi.scrollButtons}`]: {
        [e.breakpoints.down("sm")]: {
          display: "none"
        }
      }
    }
  }]
}))), Ak = M("div", {
  name: "MuiTabs",
  slot: "Scroller",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.scroller, n.fixed && o.fixed, n.hideScrollbar && o.hideScrollbar, n.scrollableX && o.scrollableX, n.scrollableY && o.scrollableY];
  }
})({
  position: "relative",
  display: "inline-block",
  flex: "1 1 auto",
  whiteSpace: "nowrap",
  variants: [{
    props: ({
      ownerState: e
    }) => e.fixed,
    style: {
      overflowX: "hidden",
      width: "100%"
    }
  }, {
    props: ({
      ownerState: e
    }) => e.hideScrollbar,
    style: {
      // Hide dimensionless scrollbar on macOS
      scrollbarWidth: "none",
      // Firefox
      "&::-webkit-scrollbar": {
        display: "none"
        // Safari + Chrome
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => e.scrollableX,
    style: {
      overflowX: "auto",
      overflowY: "hidden"
    }
  }, {
    props: ({
      ownerState: e
    }) => e.scrollableY,
    style: {
      overflowY: "auto",
      overflowX: "hidden"
    }
  }]
}), Bk = M("div", {
  name: "MuiTabs",
  slot: "FlexContainer",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.flexContainer, n.vertical && o.flexContainerVertical, n.centered && o.centered];
  }
})({
  display: "flex",
  variants: [{
    props: ({
      ownerState: e
    }) => e.vertical,
    style: {
      flexDirection: "column"
    }
  }, {
    props: ({
      ownerState: e
    }) => e.centered,
    style: {
      justifyContent: "center"
    }
  }]
}), Lk = M("span", {
  name: "MuiTabs",
  slot: "Indicator",
  overridesResolver: (e, o) => o.indicator
})(Q(({
  theme: e
}) => ({
  position: "absolute",
  height: 2,
  bottom: 0,
  width: "100%",
  transition: e.transitions.create(),
  variants: [{
    props: {
      indicatorColor: "primary"
    },
    style: {
      backgroundColor: (e.vars || e).palette.primary.main
    }
  }, {
    props: {
      indicatorColor: "secondary"
    },
    style: {
      backgroundColor: (e.vars || e).palette.secondary.main
    }
  }, {
    props: ({
      ownerState: o
    }) => o.vertical,
    style: {
      height: "100%",
      width: 2,
      right: 0
    }
  }]
}))), Dk = M(If)({
  overflowX: "auto",
  overflowY: "hidden",
  // Hide dimensionless scrollbar on macOS
  scrollbarWidth: "none",
  // Firefox
  "&::-webkit-scrollbar": {
    display: "none"
    // Safari + Chrome
  }
}), nu = {};
let ru = !1;
const zk = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTabs"
  }), s = Ot(), a = go(), {
    "aria-label": i,
    "aria-labelledby": l,
    action: c,
    centered: p = !1,
    children: u,
    className: f,
    component: g = "div",
    allowScrollButtonsMobile: b = !1,
    indicatorColor: h = "primary",
    onChange: d,
    orientation: y = "horizontal",
    ScrollButtonComponent: S = jf,
    scrollButtons: O = "auto",
    selectionFollowsFocus: C,
    slots: T = {},
    slotProps: w = {},
    TabIndicatorProps: E = {},
    TabScrollButtonProps: $ = {},
    textColor: P = "primary",
    value: N,
    variant: v = "standard",
    visibleScrollbar: R = !1,
    ...A
  } = r, j = v === "scrollable", k = y === "vertical", D = k ? "scrollTop" : "scrollLeft", B = k ? "top" : "left", _ = k ? "bottom" : "right", H = k ? "clientHeight" : "clientWidth", U = k ? "height" : "width", F = {
    ...r,
    component: g,
    allowScrollButtonsMobile: b,
    indicatorColor: h,
    orientation: y,
    vertical: k,
    scrollButtons: O,
    textColor: P,
    variant: v,
    visibleScrollbar: R,
    fixed: !j,
    hideScrollbar: j && !R,
    scrollableX: j && !k,
    scrollableY: j && k,
    centered: p && !j,
    scrollButtonsHideMobile: !b
  }, V = jk(F), me = Tt({
    elementType: T.StartScrollButtonIcon,
    externalSlotProps: w.startScrollButtonIcon,
    ownerState: F
  }), G = Tt({
    elementType: T.EndScrollButtonIcon,
    externalSlotProps: w.endScrollButtonIcon,
    ownerState: F
  });
  process.env.NODE_ENV !== "production" && p && j && console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
  const [X, Y] = m.useState(!1), [q, ie] = m.useState(nu), [K, de] = m.useState(!1), [oe, he] = m.useState(!1), [z, be] = m.useState(!1), [ye, Pe] = m.useState({
    overflow: "hidden",
    scrollbarWidth: 0
  }), Te = /* @__PURE__ */ new Map(), Z = m.useRef(null), $e = m.useRef(null), Oe = () => {
    const Se = Z.current;
    let ne;
    if (Se) {
      const Ie = Se.getBoundingClientRect();
      ne = {
        clientWidth: Se.clientWidth,
        scrollLeft: Se.scrollLeft,
        scrollTop: Se.scrollTop,
        scrollWidth: Se.scrollWidth,
        top: Ie.top,
        bottom: Ie.bottom,
        left: Ie.left,
        right: Ie.right
      };
    }
    let Ee;
    if (Se && N !== !1) {
      const Ie = $e.current.children;
      if (Ie.length > 0) {
        const Ve = Ie[Te.get(N)];
        process.env.NODE_ENV !== "production" && (Ve || console.error(["MUI: The `value` provided to the Tabs component is invalid.", `None of the Tabs' children match with "${N}".`, Te.keys ? `You can provide one of the following values: ${Array.from(Te.keys()).join(", ")}.` : null].join(`
`))), Ee = Ve ? Ve.getBoundingClientRect() : null, process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !ru && Ee && Ee.width === 0 && Ee.height === 0 && // if the whole Tabs component is hidden, don't warn
        ne.clientWidth !== 0 && (ne = null, console.error(["MUI: The `value` provided to the Tabs component is invalid.", `The Tab with this \`value\` ("${N}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join(`
`)), ru = !0);
      }
    }
    return {
      tabsMeta: ne,
      tabMeta: Ee
    };
  }, Me = pt(() => {
    const {
      tabsMeta: Se,
      tabMeta: ne
    } = Oe();
    let Ee = 0, Ie;
    k ? (Ie = "top", ne && Se && (Ee = ne.top - Se.top + Se.scrollTop)) : (Ie = a ? "right" : "left", ne && Se && (Ee = (a ? -1 : 1) * (ne[Ie] - Se[Ie] + Se.scrollLeft)));
    const Ve = {
      [Ie]: Ee,
      // May be wrong until the font is loaded.
      [U]: ne ? ne[U] : 0
    };
    if (typeof q[Ie] != "number" || typeof q[U] != "number")
      ie(Ve);
    else {
      const Ke = Math.abs(q[Ie] - Ve[Ie]), St = Math.abs(q[U] - Ve[U]);
      (Ke >= 1 || St >= 1) && ie(Ve);
    }
  }), I = (Se, {
    animation: ne = !0
  } = {}) => {
    ne ? Ek(D, Z.current, Se, {
      duration: s.transitions.duration.standard
    }) : Z.current[D] = Se;
  }, J = (Se) => {
    let ne = Z.current[D];
    k ? ne += Se : ne += Se * (a ? -1 : 1), I(ne);
  }, xe = () => {
    const Se = Z.current[H];
    let ne = 0;
    const Ee = Array.from($e.current.children);
    for (let Ie = 0; Ie < Ee.length; Ie += 1) {
      const Ve = Ee[Ie];
      if (ne + Ve[H] > Se) {
        Ie === 0 && (ne = Se);
        break;
      }
      ne += Ve[H];
    }
    return ne;
  }, ke = () => {
    J(-1 * xe());
  }, ee = () => {
    J(xe());
  }, ue = m.useCallback((Se) => {
    Pe({
      overflow: null,
      scrollbarWidth: Se
    });
  }, []), te = () => {
    const Se = {};
    Se.scrollbarSizeListener = j ? /* @__PURE__ */ x.jsx(Dk, {
      onChange: ue,
      className: W(V.scrollableX, V.hideScrollbar)
    }) : null;
    const Ee = j && (O === "auto" && (K || oe) || O === !0);
    return Se.scrollButtonStart = Ee ? /* @__PURE__ */ x.jsx(S, {
      slots: {
        StartScrollButtonIcon: T.StartScrollButtonIcon
      },
      slotProps: {
        startScrollButtonIcon: me
      },
      orientation: y,
      direction: a ? "right" : "left",
      onClick: ke,
      disabled: !K,
      ...$,
      className: W(V.scrollButtons, $.className)
    }) : null, Se.scrollButtonEnd = Ee ? /* @__PURE__ */ x.jsx(S, {
      slots: {
        EndScrollButtonIcon: T.EndScrollButtonIcon
      },
      slotProps: {
        endScrollButtonIcon: G
      },
      orientation: y,
      direction: a ? "left" : "right",
      onClick: ee,
      disabled: !oe,
      ...$,
      className: W(V.scrollButtons, $.className)
    }) : null, Se;
  }, we = pt((Se) => {
    const {
      tabsMeta: ne,
      tabMeta: Ee
    } = Oe();
    if (!(!Ee || !ne)) {
      if (Ee[B] < ne[B]) {
        const Ie = ne[D] + (Ee[B] - ne[B]);
        I(Ie, {
          animation: Se
        });
      } else if (Ee[_] > ne[_]) {
        const Ie = ne[D] + (Ee[_] - ne[_]);
        I(Ie, {
          animation: Se
        });
      }
    }
  }), Ce = pt(() => {
    j && O !== !1 && be(!z);
  });
  m.useEffect(() => {
    const Se = Wr(() => {
      Z.current && Me();
    });
    let ne;
    const Ee = (Ke) => {
      Ke.forEach((St) => {
        St.removedNodes.forEach((He) => {
          ne == null || ne.unobserve(He);
        }), St.addedNodes.forEach((He) => {
          ne == null || ne.observe(He);
        });
      }), Se(), Ce();
    }, Ie = Pt(Z.current);
    Ie.addEventListener("resize", Se);
    let Ve;
    return typeof ResizeObserver < "u" && (ne = new ResizeObserver(Se), Array.from($e.current.children).forEach((Ke) => {
      ne.observe(Ke);
    })), typeof MutationObserver < "u" && (Ve = new MutationObserver(Ee), Ve.observe($e.current, {
      childList: !0
    })), () => {
      Se.clear(), Ie.removeEventListener("resize", Se), Ve == null || Ve.disconnect(), ne == null || ne.disconnect();
    };
  }, [Me, Ce]), m.useEffect(() => {
    const Se = Array.from($e.current.children), ne = Se.length;
    if (typeof IntersectionObserver < "u" && ne > 0 && j && O !== !1) {
      const Ee = Se[0], Ie = Se[ne - 1], Ve = {
        root: Z.current,
        threshold: 0.99
      }, Ke = (ht) => {
        de(!ht[0].isIntersecting);
      }, St = new IntersectionObserver(Ke, Ve);
      St.observe(Ee);
      const He = (ht) => {
        he(!ht[0].isIntersecting);
      }, tt = new IntersectionObserver(He, Ve);
      return tt.observe(Ie), () => {
        St.disconnect(), tt.disconnect();
      };
    }
  }, [j, O, z, u == null ? void 0 : u.length]), m.useEffect(() => {
    Y(!0);
  }, []), m.useEffect(() => {
    Me();
  }), m.useEffect(() => {
    we(nu !== q);
  }, [we, q]), m.useImperativeHandle(c, () => ({
    updateIndicator: Me,
    updateScrollButtons: Ce
  }), [Me, Ce]);
  const ge = /* @__PURE__ */ x.jsx(Lk, {
    ...E,
    className: W(V.indicator, E.className),
    ownerState: F,
    style: {
      ...q,
      ...E.style
    }
  });
  let ve = 0;
  const Be = m.Children.map(u, (Se) => {
    if (!/* @__PURE__ */ m.isValidElement(Se))
      return null;
    process.env.NODE_ENV !== "production" && Ft.isFragment(Se) && console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`));
    const ne = Se.props.value === void 0 ? ve : Se.props.value;
    Te.set(ne, ve);
    const Ee = ne === N;
    return ve += 1, /* @__PURE__ */ m.cloneElement(Se, {
      fullWidth: v === "fullWidth",
      indicator: Ee && !X && ge,
      selected: Ee,
      selectionFollowsFocus: C,
      onChange: d,
      textColor: P,
      value: ne,
      ...ve === 1 && N === !1 && !Se.props.tabIndex ? {
        tabIndex: 0
      } : {}
    });
  }), Ae = (Se) => {
    const ne = $e.current, Ee = lt(ne).activeElement;
    if (Ee.getAttribute("role") !== "tab")
      return;
    let Ve = y === "horizontal" ? "ArrowLeft" : "ArrowUp", Ke = y === "horizontal" ? "ArrowRight" : "ArrowDown";
    switch (y === "horizontal" && a && (Ve = "ArrowRight", Ke = "ArrowLeft"), Se.key) {
      case Ve:
        Se.preventDefault(), ws(ne, Ee, ou);
        break;
      case Ke:
        Se.preventDefault(), ws(ne, Ee, tu);
        break;
      case "Home":
        Se.preventDefault(), ws(ne, null, tu);
        break;
      case "End":
        Se.preventDefault(), ws(ne, null, ou);
        break;
    }
  }, Fe = te();
  return /* @__PURE__ */ x.jsxs(Mk, {
    className: W(V.root, f),
    ownerState: F,
    ref: n,
    as: g,
    ...A,
    children: [Fe.scrollButtonStart, Fe.scrollbarSizeListener, /* @__PURE__ */ x.jsxs(Ak, {
      className: V.scroller,
      ownerState: F,
      style: {
        overflow: ye.overflow,
        [k ? `margin${a ? "Left" : "Right"}` : "marginBottom"]: R ? void 0 : -ye.scrollbarWidth
      },
      ref: Z,
      children: [/* @__PURE__ */ x.jsx(Bk, {
        "aria-label": i,
        "aria-labelledby": l,
        "aria-orientation": y === "vertical" ? "vertical" : null,
        className: V.flexContainer,
        ownerState: F,
        onKeyDown: Ae,
        ref: $e,
        role: "tablist",
        children: Be
      }), X && ge]
    }), Fe.scrollButtonEnd]
  });
});
process.env.NODE_ENV !== "production" && (zk.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Callback fired when the component mounts.
   * This is useful when you want to trigger an action programmatically.
   * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
   *
   * @param {object} actions This object contains all possible actions
   * that can be triggered programmatically.
   */
  action: Nt,
  /**
   * If `true`, the scroll buttons aren't forced hidden on mobile.
   * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
   * @default false
   */
  allowScrollButtonsMobile: t.bool,
  /**
   * The label for the Tabs as a string.
   */
  "aria-label": t.string,
  /**
   * An id or list of ids separated by a space that label the Tabs.
   */
  "aria-labelledby": t.string,
  /**
   * If `true`, the tabs are centered.
   * This prop is intended for large views.
   * @default false
   */
  centered: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Determines the color of the indicator.
   * @default 'primary'
   */
  indicatorColor: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {any} value We default to the index of the child (number)
   */
  onChange: t.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The component used to render the scroll buttons.
   * @default TabScrollButton
   */
  ScrollButtonComponent: t.elementType,
  /**
   * Determine behavior of scroll buttons when tabs are set to scroll:
   *
   * - `auto` will only present them when not all the items are visible.
   * - `true` will always present them.
   * - `false` will never present them.
   *
   * By default the scroll buttons are hidden on mobile.
   * This behavior can be disabled with `allowScrollButtonsMobile`.
   * @default 'auto'
   */
  scrollButtons: t.oneOf(["auto", !1, !0]),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: t.bool,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   * @default {}
   */
  slotProps: t.shape({
    endScrollButtonIcon: t.oneOfType([t.func, t.object]),
    startScrollButtonIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    EndScrollButtonIcon: t.elementType,
    StartScrollButtonIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Props applied to the tab indicator element.
   * @default  {}
   */
  TabIndicatorProps: t.object,
  /**
   * Props applied to the [`TabScrollButton`](https://mui.com/material-ui/api/tab-scroll-button/) element.
   * @default {}
   */
  TabScrollButtonProps: t.object,
  /**
   * Determines the color of the `Tab`.
   * @default 'primary'
   */
  textColor: t.oneOf(["inherit", "primary", "secondary"]),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `false`.
   */
  value: t.any,
  /**
   * Determines additional display behavior of the tabs:
   *
   *  - `scrollable` will invoke scrolling properties and allow for horizontally
   *  scrolling (or swiping) of the tab bar.
   *  - `fullWidth` will make the tabs grow to use all the available space,
   *  which should be used for small views, like on mobile.
   *  - `standard` will render the default state.
   * @default 'standard'
   */
  variant: t.oneOf(["fullWidth", "scrollable", "standard"]),
  /**
   * If `true`, the scrollbar is visible. It can be useful when displaying
   * a long vertical list of tabs.
   * @default false
   */
  visibleScrollbar: t.bool
});
function Fk(e) {
  return ae("MuiTextField", e);
}
const PN = le("MuiTextField", ["root"]), Vk = {
  standard: Kr,
  filled: Pa,
  outlined: Na
}, _k = (e) => {
  const {
    classes: o
  } = e;
  return ce({
    root: ["root"]
  }, Fk, o);
}, Wk = M(Vd, {
  name: "MuiTextField",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), Uk = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiTextField"
  }), {
    autoComplete: s,
    autoFocus: a = !1,
    children: i,
    className: l,
    color: c = "primary",
    defaultValue: p,
    disabled: u = !1,
    error: f = !1,
    FormHelperTextProps: g,
    fullWidth: b = !1,
    helperText: h,
    id: d,
    InputLabelProps: y,
    inputProps: S,
    InputProps: O,
    inputRef: C,
    label: T,
    maxRows: w,
    minRows: E,
    multiline: $ = !1,
    name: P,
    onBlur: N,
    onChange: v,
    onFocus: R,
    placeholder: A,
    required: j = !1,
    rows: k,
    select: D = !1,
    SelectProps: B,
    slots: _ = {},
    slotProps: H = {},
    type: U,
    value: F,
    variant: V = "outlined",
    ...me
  } = r, G = {
    ...r,
    autoFocus: a,
    color: c,
    disabled: u,
    error: f,
    fullWidth: b,
    multiline: $,
    required: j,
    select: D,
    variant: V
  }, X = _k(G);
  process.env.NODE_ENV !== "production" && D && !i && console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
  const Y = io(d), q = h && Y ? `${Y}-helper-text` : void 0, ie = T && Y ? `${Y}-label` : void 0, K = Vk[V], de = {
    slots: _,
    slotProps: {
      input: O,
      inputLabel: y,
      htmlInput: S,
      formHelperText: g,
      select: B,
      ...H
    }
  }, oe = {}, he = de.slotProps.inputLabel;
  V === "outlined" && (he && typeof he.shrink < "u" && (oe.notched = he.shrink), oe.label = T), D && ((!B || !B.native) && (oe.id = void 0), oe["aria-describedby"] = void 0);
  const [z, be] = je("input", {
    elementType: K,
    externalForwardedProps: de,
    additionalProps: oe,
    ownerState: G
  }), [ye, Pe] = je("inputLabel", {
    elementType: Kd,
    externalForwardedProps: de,
    ownerState: G
  }), [Te, Z] = je("htmlInput", {
    elementType: "input",
    externalForwardedProps: de,
    ownerState: G
  }), [$e, Oe] = je("formHelperText", {
    elementType: Wd,
    externalForwardedProps: de,
    ownerState: G
  }), [Me, I] = je("select", {
    elementType: Ia,
    externalForwardedProps: de,
    ownerState: G
  }), J = /* @__PURE__ */ x.jsx(z, {
    "aria-describedby": q,
    autoComplete: s,
    autoFocus: a,
    defaultValue: p,
    fullWidth: b,
    multiline: $,
    name: P,
    rows: k,
    maxRows: w,
    minRows: E,
    type: U,
    value: F,
    id: Y,
    inputRef: C,
    onBlur: N,
    onChange: v,
    onFocus: R,
    placeholder: A,
    inputProps: Z,
    slots: {
      input: _.htmlInput ? Te : void 0
    },
    ...be
  });
  return /* @__PURE__ */ x.jsxs(Wk, {
    className: W(X.root, l),
    disabled: u,
    error: f,
    fullWidth: b,
    ref: n,
    required: j,
    color: c,
    variant: V,
    ownerState: G,
    ...me,
    children: [T != null && T !== "" && /* @__PURE__ */ x.jsx(ye, {
      htmlFor: Y,
      id: ie,
      ...Pe,
      children: T
    }), D ? /* @__PURE__ */ x.jsx(Me, {
      "aria-describedby": q,
      id: Y,
      labelId: ie,
      value: F,
      input: J,
      ...I,
      children: i
    }) : J, h && /* @__PURE__ */ x.jsx($e, {
      id: q,
      ...Oe,
      children: h
    })]
  });
});
process.env.NODE_ENV !== "production" && (Uk.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: t.bool,
  /**
   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  FormHelperTextProps: t.object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The helper text content.
   */
  helperText: t.node,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: t.string,
  /**
   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputLabelProps: t.object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  inputProps: t.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),
   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)
   * component depending on the `variant` prop value.
   * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Nt,
  /**
   * The label content.
   */
  label: t.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: t.oneOf(["dense", "none", "normal"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a `textarea` element is rendered instead of an input.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   * @default false
   */
  select: t.bool,
  /**
   * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.
   * @deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  SelectProps: t.object,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    formHelperText: t.oneOfType([t.func, t.object]),
    htmlInput: t.oneOfType([t.func, t.object]),
    input: t.oneOfType([t.func, t.object]),
    inputLabel: t.oneOfType([t.func, t.object]),
    select: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    formHelperText: t.elementType,
    htmlInput: t.elementType,
    input: t.elementType,
    inputLabel: t.elementType,
    select: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
function Hk(e) {
  return ae("MuiToggleButton", e);
}
const hn = le("MuiToggleButton", ["root", "disabled", "selected", "standard", "primary", "secondary", "sizeSmall", "sizeMedium", "sizeLarge", "fullWidth"]), Ll = /* @__PURE__ */ m.createContext({});
process.env.NODE_ENV !== "production" && (Ll.displayName = "ToggleButtonGroupContext");
const Dl = /* @__PURE__ */ m.createContext(void 0);
process.env.NODE_ENV !== "production" && (Dl.displayName = "ToggleButtonGroupButtonContext");
function Gk(e, o) {
  return o === void 0 || e === void 0 ? !1 : Array.isArray(o) ? o.includes(e) : e === o;
}
const qk = (e) => {
  const {
    classes: o,
    fullWidth: n,
    selected: r,
    disabled: s,
    size: a,
    color: i
  } = e, l = {
    root: ["root", r && "selected", s && "disabled", n && "fullWidth", `size${L(a)}`, i]
  };
  return ce(l, Hk, o);
}, Yk = M(wt, {
  name: "MuiToggleButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`size${L(n.size)}`]];
  }
})(Q(({
  theme: e
}) => ({
  ...e.typography.button,
  borderRadius: (e.vars || e).shape.borderRadius,
  padding: 11,
  border: `1px solid ${(e.vars || e).palette.divider}`,
  color: (e.vars || e).palette.action.active,
  [`&.${hn.disabled}`]: {
    color: (e.vars || e).palette.action.disabled,
    border: `1px solid ${(e.vars || e).palette.action.disabledBackground}`
  },
  "&:hover": {
    textDecoration: "none",
    // Reset on mouse devices
    backgroundColor: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})` : Ne(e.palette.text.primary, e.palette.action.hoverOpacity),
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  variants: [{
    props: {
      color: "standard"
    },
    style: {
      [`&.${hn.selected}`]: {
        color: (e.vars || e).palette.text.primary,
        backgroundColor: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.text.primary, e.palette.action.selectedOpacity),
        "&:hover": {
          backgroundColor: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette.text.primary, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette.text.primary, e.palette.action.selectedOpacity)
          }
        }
      }
    }
  }, ...Object.entries(e.palette).filter(Ue()).map(([o]) => ({
    props: {
      color: o
    },
    style: {
      [`&.${hn.selected}`]: {
        color: (e.vars || e).palette[o].main,
        backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette[o].main, e.palette.action.selectedOpacity),
        "&:hover": {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Ne(e.palette[o].main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: e.vars ? `rgba(${e.vars.palette[o].mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Ne(e.palette[o].main, e.palette.action.selectedOpacity)
          }
        }
      }
    }
  })), {
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      padding: 7,
      fontSize: e.typography.pxToRem(13)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      padding: 15,
      fontSize: e.typography.pxToRem(15)
    }
  }]
}))), Kk = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const {
    value: r,
    ...s
  } = m.useContext(Ll), a = m.useContext(Dl), i = Dn({
    ...s,
    selected: Gk(o.value, r)
  }, o), l = pe({
    props: i,
    name: "MuiToggleButton"
  }), {
    children: c,
    className: p,
    color: u = "standard",
    disabled: f = !1,
    disableFocusRipple: g = !1,
    fullWidth: b = !1,
    onChange: h,
    onClick: d,
    selected: y,
    size: S = "medium",
    value: O,
    ...C
  } = l, T = {
    ...l,
    color: u,
    disabled: f,
    disableFocusRipple: g,
    fullWidth: b,
    size: S
  }, w = qk(T), E = (P) => {
    d && (d(P, O), P.defaultPrevented) || h && h(P, O);
  }, $ = a || "";
  return /* @__PURE__ */ x.jsx(Yk, {
    className: W(s.className, w.root, p, $),
    disabled: f,
    focusRipple: !g,
    ref: n,
    onClick: E,
    onChange: h,
    value: O,
    ownerState: T,
    "aria-pressed": y,
    ...C,
    children: c
  });
});
process.env.NODE_ENV !== "production" && (Kk.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the button when it is in an active state.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * Callback fired when the state changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */
  onChange: t.func,
  /**
   * Callback fired when the button is clicked.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */
  onClick: t.func,
  /**
   * If `true`, the button is rendered in an active state.
   */
  selected: t.bool,
  /**
   * The size of the component.
   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value to associate with the button when selected in a
   * ToggleButtonGroup.
   */
  value: t.any.isRequired
});
function Xk(e) {
  return ae("MuiToggleButtonGroup", e);
}
const it = le("MuiToggleButtonGroup", ["root", "selected", "horizontal", "vertical", "disabled", "grouped", "groupedHorizontal", "groupedVertical", "fullWidth", "firstButton", "lastButton", "middleButton"]), Jk = (e) => {
  const {
    classes: o,
    orientation: n,
    fullWidth: r,
    disabled: s
  } = e, a = {
    root: ["root", n, r && "fullWidth"],
    grouped: ["grouped", `grouped${L(n)}`, s && "disabled"],
    firstButton: ["firstButton"],
    lastButton: ["lastButton"],
    middleButton: ["middleButton"]
  };
  return ce(a, Xk, o);
}, Zk = M("div", {
  name: "MuiToggleButtonGroup",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${it.grouped}`]: o.grouped
    }, {
      [`& .${it.grouped}`]: o[`grouped${L(n.orientation)}`]
    }, {
      [`& .${it.firstButton}`]: o.firstButton
    }, {
      [`& .${it.lastButton}`]: o.lastButton
    }, {
      [`& .${it.middleButton}`]: o.middleButton
    }, o.root, n.orientation === "vertical" && o.vertical, n.fullWidth && o.fullWidth];
  }
})(Q(({
  theme: e
}) => ({
  display: "inline-flex",
  borderRadius: (e.vars || e).shape.borderRadius,
  variants: [{
    props: {
      orientation: "vertical"
    },
    style: {
      flexDirection: "column",
      [`& .${it.grouped}`]: {
        [`&.${it.selected} + .${it.grouped}.${it.selected}`]: {
          borderTop: 0,
          marginTop: 0
        }
      },
      [`& .${it.firstButton},& .${it.middleButton}`]: {
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0
      },
      [`& .${it.lastButton},& .${it.middleButton}`]: {
        marginTop: -1,
        borderTop: "1px solid transparent",
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0
      },
      [`& .${it.lastButton}.${hn.disabled},& .${it.middleButton}.${hn.disabled}`]: {
        borderTop: "1px solid transparent"
      }
    }
  }, {
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }, {
    props: {
      orientation: "horizontal"
    },
    style: {
      [`& .${it.grouped}`]: {
        [`&.${it.selected} + .${it.grouped}.${it.selected}`]: {
          borderLeft: 0,
          marginLeft: 0
        }
      },
      [`& .${it.firstButton},& .${it.middleButton}`]: {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      },
      [`& .${it.lastButton},& .${it.middleButton}`]: {
        marginLeft: -1,
        borderLeft: "1px solid transparent",
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      },
      [`& .${it.lastButton}.${hn.disabled},& .${it.middleButton}.${hn.disabled}`]: {
        borderLeft: "1px solid transparent"
      }
    }
  }]
}))), Qk = /* @__PURE__ */ m.forwardRef(function(o, n) {
  const r = pe({
    props: o,
    name: "MuiToggleButtonGroup"
  }), {
    children: s,
    className: a,
    color: i = "standard",
    disabled: l = !1,
    exclusive: c = !1,
    fullWidth: p = !1,
    onChange: u,
    orientation: f = "horizontal",
    size: g = "medium",
    value: b,
    ...h
  } = r, d = {
    ...r,
    disabled: l,
    fullWidth: p,
    orientation: f,
    size: g
  }, y = Jk(d), S = m.useCallback(($, P) => {
    if (!u)
      return;
    const N = b && b.indexOf(P);
    let v;
    b && N >= 0 ? (v = b.slice(), v.splice(N, 1)) : v = b ? b.concat(P) : [P], u($, v);
  }, [u, b]), O = m.useCallback(($, P) => {
    u && u($, b === P ? null : P);
  }, [u, b]), C = m.useMemo(() => ({
    className: y.grouped,
    onChange: c ? O : S,
    value: b,
    size: g,
    fullWidth: p,
    color: i,
    disabled: l
  }), [y.grouped, c, O, S, b, g, p, i, l]), T = Wu(s), w = T.length, E = ($) => {
    const P = $ === 0, N = $ === w - 1;
    return P && N ? "" : P ? y.firstButton : N ? y.lastButton : y.middleButton;
  };
  return /* @__PURE__ */ x.jsx(Zk, {
    role: "group",
    className: W(y.root, a),
    ref: n,
    ownerState: d,
    ...h,
    children: /* @__PURE__ */ x.jsx(Ll.Provider, {
      value: C,
      children: T.map(($, P) => (process.env.NODE_ENV !== "production" && Ft.isFragment($) && console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ x.jsx(Dl.Provider, {
        value: E(P),
        children: $
      }, P)))
    })
  });
});
process.env.NODE_ENV !== "production" && (Qk.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the button when it is selected.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, only allow one of the child ToggleButton values to be selected.
   * @default false
   */
  exclusive: t.bool,
  /**
   * If `true`, the button group will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected buttons. When `exclusive` is true
   * this is a single value; when false an array of selected values. If no value
   * is selected and `exclusive` is true the value is null; when false an empty array.
   */
  onChange: t.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The currently selected value within the group or an array of selected
   * values when `exclusive` is false.
   *
   * The value must have reference equality with the option in order to be selected.
   */
  value: t.any
});
function eP(e, o) {
  const {
    disableHysteresis: n = !1,
    threshold: r = 100,
    target: s
  } = o, a = e.current;
  return s && (e.current = s.pageYOffset !== void 0 ? s.pageYOffset : s.scrollTop), !n && a !== void 0 && e.current < a ? !1 : e.current > r;
}
const tP = typeof window < "u" ? window : null;
function NN(e = {}) {
  const {
    getTrigger: o = eP,
    target: n = tP,
    ...r
  } = e, s = m.useRef(), [a, i] = m.useState(() => o(s, r));
  return m.useEffect(() => {
    const l = () => {
      i(o(s, {
        target: n,
        ...r
      }));
    };
    return l(), n.addEventListener("scroll", l, {
      passive: !0
    }), () => {
      n.removeEventListener("scroll", l, {
        passive: !0
      });
    };
  }, [n, o, JSON.stringify(r)]), a;
}
const IN = "6.4.3", jN = 6, MN = 4, AN = 3, BN = void 0;
export {
  Ny as Accordion,
  Ay as AccordionActions,
  zy as AccordionDetails,
  nv as AccordionSummary,
  Rv as Alert,
  Bv as AlertTitle,
  Fv as AppBar,
  Lx as Autocomplete,
  kd as Avatar,
  Xx as AvatarGroup,
  Tl as Backdrop,
  aS as Badge,
  pS as BottomNavigation,
  gS as BottomNavigationAction,
  yS as Box,
  kS as Breadcrumbs,
  BS as Button,
  wt as ButtonBase,
  VS as ButtonGroup,
  wl as ButtonGroupButtonContext,
  Cl as ButtonGroupContext,
  HS as Card,
  XS as CardActionArea,
  eT as CardActions,
  rT as CardContent,
  uT as CardHeader,
  hT as CardMedia,
  NT as Checkbox,
  Rd as Chip,
  fl as CircularProgress,
  Js as ClickAwayListener,
  zn as Collapse,
  jT as Container,
  BT as CssBaseline,
  ay as CssVarsProvider,
  lC as Dialog,
  dC as DialogActions,
  yC as DialogContent,
  TC as DialogContentText,
  OC as DialogTitle,
  ki as Divider,
  Fd as Drawer,
  gP as Experimental_CssVarsProvider,
  El as Fab,
  Ks as Fade,
  Pa as FilledInput,
  Vd as FormControl,
  YC as FormControlLabel,
  _d as FormGroup,
  Wd as FormHelperText,
  Ud as FormLabel,
  nw as FormLabelRoot,
  ud as GlobalStyles,
  js as Grid,
  Gd as Grid2,
  Un as Grow,
  kw as Hidden,
  Yd as Icon,
  Xo as IconButton,
  Bw as ImageList,
  Fw as ImageListItem,
  Yw as ImageListItemBar,
  Kr as Input,
  oO as InputAdornment,
  Yr as InputBase,
  Kd as InputLabel,
  Xd as LinearProgress,
  xO as Link,
  Jd as List,
  LO as ListItem,
  VO as ListItemAvatar,
  kO as ListItemButton,
  HO as ListItemIcon,
  kl as ListItemSecondaryAction,
  KO as ListItemText,
  qs as ListSubheader,
  of as Menu,
  nf as MenuItem,
  Qd as MenuList,
  b1 as MobileStepper,
  ka as Modal,
  _T as ModalManager,
  lf as NativeSelect,
  ea as NoSsr,
  Na as OutlinedInput,
  V1 as Pagination,
  ff as PaginationItem,
  Qt as Paper,
  tf as Popover,
  ef as PopoverPaper,
  ZO as PopoverRoot,
  Gr as Popper,
  Mr as Portal,
  Z1 as Radio,
  tE as RadioGroup,
  fE as Rating,
  hE as ScopedCssBaseline,
  Ia as Select,
  IE as Skeleton,
  Ld as Slide,
  ZE as Slider,
  YE as SliderMark,
  KE as SliderMarkLabel,
  HE as SliderRail,
  UE as SliderRoot,
  qE as SliderThumb,
  GE as SliderTrack,
  xf as SliderValueLabel,
  iR as Snackbar,
  Sf as SnackbarContent,
  mR as SpeedDial,
  ER as SpeedDialAction,
  wf as SpeedDialIcon,
  NR as Stack,
  AR as Step,
  XR as StepButton,
  Ef as StepConnector,
  s$ as StepContent,
  wn as StepContext,
  Of as StepIcon,
  Al as StepLabel,
  p$ as Stepper,
  rn as StepperContext,
  ig as StyledEngineProvider,
  Nr as SvgIcon,
  g$ as SwipeableDrawer,
  T$ as Switch,
  so as THEME_ID,
  E$ as Tab,
  jf as TabScrollButton,
  P$ as Table,
  A$ as TableBody,
  oa as TableCell,
  W$ as TableContainer,
  Y$ as TableFooter,
  Q$ as TableHead,
  mk as TablePagination,
  yk as TableRow,
  wk as TableSortLabel,
  zk as Tabs,
  Uk as TextField,
  $d as TextareaAutosize,
  hP as ThemeProvider,
  Kk as ToggleButton,
  Qk as ToggleButtonGroup,
  $f as Toolbar,
  Cf as Tooltip,
  kt as Typography,
  Zs as Unstable_TrapFocus,
  Tf as Zoom,
  $P as accordionActionsClasses,
  ls as accordionClasses,
  kP as accordionDetailsClasses,
  Nn as accordionSummaryClasses,
  lP as adaptV4Theme,
  Uc as alertClasses,
  IP as alertTitleClasses,
  Ne as alpha,
  jP as appBarClasses,
  _e as autocompleteClasses,
  Fx as avatarClasses,
  qx as avatarGroupClasses,
  AP as backdropClasses,
  Ho as badgeClasses,
  Pd as bottomNavigationActionClasses,
  BP as bottomNavigationClasses,
  bS as boxClasses,
  CS as breadcrumbsClasses,
  Ky as buttonBaseClasses,
  an as buttonClasses,
  ze as buttonGroupClasses,
  L as capitalize,
  Ja as cardActionAreaClasses,
  DP as cardActionsClasses,
  LP as cardClasses,
  zP as cardContentClasses,
  Xs as cardHeaderClasses,
  FP as cardMediaClasses,
  Za as checkboxClasses,
  Ge as chipClasses,
  NP as circularProgressClasses,
  EP as collapseClasses,
  sP as colors,
  _P as containerClasses,
  yi as createChainedFunction,
  Yh as createColorScheme,
  Vv as createFilterOptions,
  cP as createMuiTheme,
  uP as createStyles,
  at as createSvgIcon,
  va as createTheme,
  Uh as createTransitions,
  tn as css,
  WP as darkScrollbar,
  Eo as darken,
  Wr as debounce,
  Do as decomposeColor,
  iP as deprecatedPropType,
  HP as dialogActionsClasses,
  ei as dialogClasses,
  GP as dialogContentClasses,
  qP as dialogContentTextClasses,
  gC as dialogTitleClasses,
  vp as dividerClasses,
  YP as drawerClasses,
  rd as duration,
  _h as easing,
  kr as emphasize,
  M as experimentalStyled,
  SP as experimental_extendTheme,
  TP as experimental_sx,
  ld as extendTheme,
  Sp as fabClasses,
  Gt as filledInputClasses,
  KP as formControlClasses,
  vr as formControlLabelClasses,
  XP as formGroupClasses,
  Tp as formHelperTextClasses,
  wr as formLabelClasses,
  ae as generateUtilityClass,
  le as generateUtilityClasses,
  Iy as getAccordionActionsUtilityClass,
  By as getAccordionDetailsUtilityClass,
  Zy as getAccordionSummaryUtilityClass,
  Ry as getAccordionUtilityClass,
  jv as getAlertTitleUtilityClass,
  av as getAlertUtilityClass,
  Lv as getAppBarUtilityClass,
  wx as getAutocompleteUtilityClass,
  Gx as getAvatarGroupUtilityClass,
  zx as getAvatarUtilityClass,
  Zx as getBackdropUtilityClass,
  oS as getBadgeUtilityClass,
  uS as getBottomNavigationActionUtilityClass,
  iS as getBottomNavigationUtilityClass,
  TS as getBreadcrumbsUtilityClass,
  Yy as getButtonBaseUtilityClass,
  LS as getButtonGroupUtilityClass,
  PS as getButtonUtilityClass,
  GS as getCardActionAreaUtilityClass,
  JS as getCardActionsUtilityClass,
  tT as getCardContentUtilityClass,
  sT as getCardHeaderUtilityClass,
  dT as getCardMediaUtilityClass,
  _S as getCardUtilityClass,
  OT as getCheckboxUtilityClass,
  ux as getChipUtilityClass,
  iv as getCircularProgressUtilityClass,
  vy as getCollapseUtilityClass,
  VP as getContainerUtilityClass,
  vc as getContrastRatio,
  cC as getDialogActionsUtilityClass,
  vC as getDialogContentTextUtilityClass,
  fC as getDialogContentUtilityClass,
  mC as getDialogTitleUtilityClass,
  oC as getDialogUtilityClass,
  EC as getDividerUtilityClass,
  NC as getDrawerUtilityClass,
  AC as getFabUtilityClass,
  Cx as getFilledInputUtilityClass,
  UC as getFormControlLabelUtilityClasses,
  VC as getFormControlUtilityClasses,
  KC as getFormGroupUtilityClass,
  ZC as getFormHelperTextUtilityClasses,
  tw as getFormLabelUtilityClasses,
  JP as getGrid2UtilityClass,
  mv as getIconButtonUtilityClass,
  Pw as getIconUtilityClass,
  Vw as getImageListItemBarUtilityClass,
  Lw as getImageListItemUtilityClass,
  jw as getImageListUtilityClass,
  bP as getInitColorSchemeScript,
  Zw as getInputAdornmentUtilityClass,
  vx as getInputBaseUtilityClass,
  nO as getInputLabelUtilityClasses,
  Sx as getInputUtilityClass,
  aO as getLinearProgressUtilityClass,
  gO as getLinkUtilityClass,
  DO as getListItemAvatarUtilityClass,
  OO as getListItemButtonUtilityClass,
  _O as getListItemIconUtilityClass,
  PO as getListItemSecondaryActionClassesUtilityClass,
  GO as getListItemTextUtilityClass,
  wO as getListItemUtilityClass,
  ix as getListSubheaderUtilityClass,
  SO as getListUtilityClass,
  hi as getLuminance,
  a1 as getMenuItemUtilityClass,
  QO as getMenuUtilityClass,
  p1 as getMobileStepperUtilityClass,
  ZT as getModalUtilityClass,
  rf as getNativeSelectUtilityClasses,
  Pp as getOffsetLeft,
  kp as getOffsetTop,
  Tx as getOutlinedInputUtilityClass,
  xi as getOverlayAlpha,
  P1 as getPaginationItemUtilityClass,
  $1 as getPaginationUtilityClass,
  wy as getPaperUtilityClass,
  XO as getPopoverUtilityClass,
  ex as getPopperUtilityClass,
  Q1 as getRadioGroupUtilityClass,
  Y1 as getRadioUtilityClass,
  rE as getRatingUtilityClass,
  mE as getScopedCssBaselineUtilityClass,
  bf as getSelectUtilityClasses,
  RE as getSkeletonUtilityClass,
  _E as getSliderUtilityClass,
  eR as getSnackbarContentUtilityClass,
  sR as getSnackbarUtilityClass,
  SR as getSpeedDialActionUtilityClass,
  $R as getSpeedDialIconUtilityClass,
  cR as getSpeedDialUtilityClass,
  qR as getStepButtonUtilityClass,
  JR as getStepConnectorUtilityClass,
  t$ as getStepContentUtilityClass,
  DR as getStepIconUtilityClass,
  VR as getStepLabelUtilityClass,
  IR as getStepUtilityClass,
  a$ as getStepperUtilityClass,
  ly as getSvgIconUtilityClass,
  b$ as getSwitchUtilityClass,
  $k as getTabScrollButtonUtilityClass,
  C$ as getTabUtilityClass,
  N$ as getTableBodyUtilityClass,
  B$ as getTableCellUtilityClass,
  F$ as getTableContainerUtilityClass,
  U$ as getTableFooterUtilityClass,
  K$ as getTableHeadUtilityClass,
  nk as getTablePaginationUtilityClass,
  gk as getTableRowUtilityClass,
  xk as getTableSortLabelUtilityClass,
  R$ as getTableUtilityClass,
  Ik as getTabsUtilityClass,
  Fk as getTextFieldUtilityClass,
  Xk as getToggleButtonGroupUtilityClass,
  Hk as getToggleButtonUtilityClass,
  ek as getToolbarUtilityClass,
  gR as getTooltipUtilityClass,
  PP as getTouchRippleUtilityClass,
  $v as getTypographyUtilityClass,
  ZP as grid2Classes,
  Ob as hexToRgb,
  Du as hslToRgb,
  Hc as iconButtonClasses,
  QP as iconClasses,
  eN as imageListClasses,
  tN as imageListItemBarClasses,
  oi as imageListItemClasses,
  wp as inputAdornmentClasses,
  Ht as inputBaseClasses,
  Yo as inputClasses,
  oN as inputLabelClasses,
  Bo as isMuiElement,
  No as keyframes,
  Ro as lighten,
  nN as linearProgressClasses,
  bO as linkClasses,
  rN as listClasses,
  iN as listItemAvatarClasses,
  Pn as listItemButtonClasses,
  sN as listItemClasses,
  Rp as listItemIconClasses,
  aN as listItemSecondaryActionClasses,
  In as listItemTextClasses,
  MP as listSubheaderClasses,
  jN as major,
  yP as makeStyles,
  cN as menuClasses,
  cr as menuItemClasses,
  wP as mergeSlotProps,
  MN as minor,
  pN as mobileStepperClasses,
  UP as modalClasses,
  Pl as nativeSelectClasses,
  to as outlinedInputClasses,
  lt as ownerDocument,
  Pt as ownerWindow,
  uN as paginationClasses,
  Lt as paginationItemClasses,
  RP as paperClasses,
  AN as patch,
  lN as popoverClasses,
  BN as prerelease,
  Bh as private_createMixins,
  nd as private_createTypography,
  Xh as private_excludeVariablesFromRoot,
  jp as radioClasses,
  dN as radioGroupClasses,
  pr as ratingClasses,
  ba as recomposeColor,
  Fu as requirePropFactory,
  dP as responsiveFontSizes,
  aP as rgbToHex,
  fN as scopedCssBaselineClasses,
  ur as selectClasses,
  Ds as setRef,
  Kh as shouldSkipGeneratingVar,
  mN as skeletonClasses,
  ro as sliderClasses,
  bN as snackbarClasses,
  gN as snackbarContentClasses,
  Ts as speedDialActionClasses,
  hs as speedDialClasses,
  vo as speedDialIconClasses,
  hN as stackClasses,
  Hp as stepButtonClasses,
  xN as stepClasses,
  SN as stepConnectorClasses,
  TN as stepContentClasses,
  si as stepIconClasses,
  Zo as stepLabelClasses,
  CN as stepperClasses,
  M as styled,
  CP as svgIconClasses,
  Dt as switchClasses,
  eo as tabClasses,
  kk as tabScrollButtonClasses,
  ON as tableBodyClasses,
  L$ as tableCellClasses,
  wN as tableClasses,
  EN as tableContainerClasses,
  RN as tableFooterClasses,
  $N as tableHeadClasses,
  Or as tablePaginationClasses,
  Qp as tableRowClasses,
  ci as tableSortLabelClasses,
  pi as tabsClasses,
  PN as textFieldClasses,
  hn as toggleButtonClasses,
  it as toggleButtonGroupClasses,
  kN as toolbarClasses,
  ft as tooltipClasses,
  oo as touchRippleClasses,
  Us as typographyClasses,
  OP as unstable_ClassNameGenerator,
  ce as unstable_composeClasses,
  wu as unstable_createBreakpoints,
  pP as unstable_createMuiStrictModeTheme,
  cd as unstable_getUnit,
  Q as unstable_memoTheme,
  Go as unstable_toUnitless,
  Rt as unstable_useEnhancedEffect,
  io as unstable_useId,
  ol as unsupportedProp,
  Gv as useAutocomplete,
  mP as useColorScheme,
  Kt as useControlled,
  pt as useEventCallback,
  Ye as useForkRef,
  uo as useFormControl,
  Sw as useMediaQuery,
  k1 as usePagination,
  q1 as useRadioGroup,
  NN as useScrollTrigger,
  vN as useStepContext,
  yN as useStepperContext,
  Ot as useTheme,
  fP as useThemeProps,
  IN as version,
  vP as withStyles,
  xP as withTheme
};
//# sourceMappingURL=ui-react.es.js.map
